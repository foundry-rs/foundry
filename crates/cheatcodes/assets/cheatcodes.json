{
  "errors": [
    {
      "name": "CheatcodeError",
      "description": "Error thrown by cheatcodes.",
      "declaration": "error CheatcodeError(string message);"
    }
  ],
  "events": [],
  "enums": [
    {
      "name": "CallerMode",
      "description": "A modification applied to either `msg.sender` or `tx.origin`. Returned by `readCallers`.",
      "variants": [
        {
          "name": "None",
          "description": "No caller modification is currently active."
        },
        {
          "name": "Broadcast",
          "description": "A one time broadcast triggered by a `vm.broadcast()` call is currently active."
        },
        {
          "name": "RecurrentBroadcast",
          "description": "A recurrent broadcast triggered by a `vm.startBroadcast()` call is currently active."
        },
        {
          "name": "Prank",
          "description": "A one time prank triggered by a `vm.prank()` call is currently active."
        },
        {
          "name": "RecurrentPrank",
          "description": "A recurrent prank triggered by a `vm.startPrank()` call is currently active."
        }
      ]
    },
    {
      "name": "AccountAccessKind",
      "description": "The kind of account access that occurred.",
      "variants": [
        {
          "name": "Call",
          "description": "The account was called."
        },
        {
          "name": "DelegateCall",
          "description": "The account was called via delegatecall."
        },
        {
          "name": "CallCode",
          "description": "The account was called via callcode."
        },
        {
          "name": "StaticCall",
          "description": "The account was called via staticcall."
        },
        {
          "name": "Create",
          "description": "The account was created."
        },
        {
          "name": "SelfDestruct",
          "description": "The account was selfdestructed."
        },
        {
          "name": "Resume",
          "description": "Synthetic access indicating the current context has resumed after a previous sub-context (AccountAccess)."
        },
        {
          "name": "Balance",
          "description": "The account's balance was read."
        },
        {
          "name": "Extcodesize",
          "description": "The account's codesize was read."
        },
        {
          "name": "Extcodehash",
          "description": "The account's codehash was read."
        },
        {
          "name": "Extcodecopy",
          "description": "The account's code was copied."
        }
      ]
    },
    {
      "name": "ForgeContext",
      "description": "Forge execution contexts.",
      "variants": [
        {
          "name": "TestGroup",
          "description": "Test group execution context (test, coverage or snapshot)."
        },
        {
          "name": "Test",
          "description": "`forge test` execution context."
        },
        {
          "name": "Coverage",
          "description": "`forge coverage` execution context."
        },
        {
          "name": "Snapshot",
          "description": "`forge snapshot` execution context."
        },
        {
          "name": "ScriptGroup",
          "description": "Script group execution context (dry run, broadcast or resume)."
        },
        {
          "name": "ScriptDryRun",
          "description": "`forge script` execution context."
        },
        {
          "name": "ScriptBroadcast",
          "description": "`forge script --broadcast` execution context."
        },
        {
          "name": "ScriptResume",
          "description": "`forge script --resume` execution context."
        },
        {
          "name": "Unknown",
          "description": "Unknown `forge` execution context."
        }
      ]
    }
  ],
  "structs": [
    {
      "name": "Log",
      "description": "An Ethereum log. Returned by `getRecordedLogs`.",
      "fields": [
        {
          "name": "topics",
          "ty": "bytes32[]",
          "description": "The topics of the log, including the signature, if any."
        },
        {
          "name": "data",
          "ty": "bytes",
          "description": "The raw data of the log."
        },
        {
          "name": "emitter",
          "ty": "address",
          "description": "The address of the log's emitter."
        }
      ]
    },
    {
      "name": "Rpc",
      "description": "An RPC URL and its alias. Returned by `rpcUrlStructs`.",
      "fields": [
        {
          "name": "key",
          "ty": "string",
          "description": "The alias of the RPC URL."
        },
        {
          "name": "url",
          "ty": "string",
          "description": "The RPC URL."
        }
      ]
    },
    {
      "name": "EthGetLogs",
      "description": "An RPC log object. Returned by `eth_getLogs`.",
      "fields": [
        {
          "name": "emitter",
          "ty": "address",
          "description": "The address of the log's emitter."
        },
        {
          "name": "topics",
          "ty": "bytes32[]",
          "description": "The topics of the log, including the signature, if any."
        },
        {
          "name": "data",
          "ty": "bytes",
          "description": "The raw data of the log."
        },
        {
          "name": "blockHash",
          "ty": "bytes32",
          "description": "The block hash."
        },
        {
          "name": "blockNumber",
          "ty": "uint64",
          "description": "The block number."
        },
        {
          "name": "transactionHash",
          "ty": "bytes32",
          "description": "The transaction hash."
        },
        {
          "name": "transactionIndex",
          "ty": "uint64",
          "description": "The transaction index in the block."
        },
        {
          "name": "logIndex",
          "ty": "uint256",
          "description": "The log index."
        },
        {
          "name": "removed",
          "ty": "bool",
          "description": "Whether the log was removed."
        }
      ]
    },
    {
      "name": "DirEntry",
      "description": "A single entry in a directory listing. Returned by `readDir`.",
      "fields": [
        {
          "name": "errorMessage",
          "ty": "string",
          "description": "The error message, if any."
        },
        {
          "name": "path",
          "ty": "string",
          "description": "The path of the entry."
        },
        {
          "name": "depth",
          "ty": "uint64",
          "description": "The depth of the entry."
        },
        {
          "name": "isDir",
          "ty": "bool",
          "description": "Whether the entry is a directory."
        },
        {
          "name": "isSymlink",
          "ty": "bool",
          "description": "Whether the entry is a symlink."
        }
      ]
    },
    {
      "name": "FsMetadata",
      "description": "Metadata information about a file.\n This structure is returned from the `fsMetadata` function and represents known\n metadata about a file such as its permissions, size, modification\n times, etc.",
      "fields": [
        {
          "name": "isDir",
          "ty": "bool",
          "description": "True if this metadata is for a directory."
        },
        {
          "name": "isSymlink",
          "ty": "bool",
          "description": "True if this metadata is for a symlink."
        },
        {
          "name": "length",
          "ty": "uint256",
          "description": "The size of the file, in bytes, this metadata is for."
        },
        {
          "name": "readOnly",
          "ty": "bool",
          "description": "True if this metadata is for a readonly (unwritable) file."
        },
        {
          "name": "modified",
          "ty": "uint256",
          "description": "The last modification time listed in this metadata."
        },
        {
          "name": "accessed",
          "ty": "uint256",
          "description": "The last access time of this metadata."
        },
        {
          "name": "created",
          "ty": "uint256",
          "description": "The creation time listed in this metadata."
        }
      ]
    },
    {
      "name": "Wallet",
      "description": "A wallet with a public and private key.",
      "fields": [
        {
          "name": "addr",
          "ty": "address",
          "description": "The wallet's address."
        },
        {
          "name": "publicKeyX",
          "ty": "uint256",
          "description": "The wallet's public key `X`."
        },
        {
          "name": "publicKeyY",
          "ty": "uint256",
          "description": "The wallet's public key `Y`."
        },
        {
          "name": "privateKey",
          "ty": "uint256",
          "description": "The wallet's private key."
        }
      ]
    },
    {
      "name": "FfiResult",
      "description": "The result of a `tryFfi` call.",
      "fields": [
        {
          "name": "exitCode",
          "ty": "int32",
          "description": "The exit code of the call."
        },
        {
          "name": "stdout",
          "ty": "bytes",
          "description": "The optionally hex-decoded `stdout` data."
        },
        {
          "name": "stderr",
          "ty": "bytes",
          "description": "The `stderr` data."
        }
      ]
    },
    {
      "name": "ChainInfo",
      "description": "Information on the chain and fork.",
      "fields": [
        {
          "name": "forkId",
          "ty": "uint256",
          "description": "The fork identifier. Set to zero if no fork is active."
        },
        {
          "name": "chainId",
          "ty": "uint256",
          "description": "The chain ID of the current fork."
        }
      ]
    },
    {
      "name": "AccountAccess",
      "description": "The result of a `stopAndReturnStateDiff` call.",
      "fields": [
        {
          "name": "chainInfo",
          "ty": "ChainInfo",
          "description": "The chain and fork the access occurred."
        },
        {
          "name": "kind",
          "ty": "AccountAccessKind",
          "description": "The kind of account access that determines what the account is.\n If kind is Call, DelegateCall, StaticCall or CallCode, then the account is the callee.\n If kind is Create, then the account is the newly created account.\n If kind is SelfDestruct, then the account is the selfdestruct recipient.\n If kind is a Resume, then account represents a account context that has resumed."
        },
        {
          "name": "account",
          "ty": "address",
          "description": "The account that was accessed.\n It's either the account created, callee or a selfdestruct recipient for CREATE, CALL or SELFDESTRUCT."
        },
        {
          "name": "accessor",
          "ty": "address",
          "description": "What accessed the account."
        },
        {
          "name": "initialized",
          "ty": "bool",
          "description": "If the account was initialized or empty prior to the access.\n An account is considered initialized if it has code, a\n non-zero nonce, or a non-zero balance."
        },
        {
          "name": "oldBalance",
          "ty": "uint256",
          "description": "The previous balance of the accessed account."
        },
        {
          "name": "newBalance",
          "ty": "uint256",
          "description": "The potential new balance of the accessed account.\n That is, all balance changes are recorded here, even if reverts occurred."
        },
        {
          "name": "deployedCode",
          "ty": "bytes",
          "description": "Code of the account deployed by CREATE."
        },
        {
          "name": "value",
          "ty": "uint256",
          "description": "Value passed along with the account access"
        },
        {
          "name": "data",
          "ty": "bytes",
          "description": "Input data provided to the CREATE or CALL"
        },
        {
          "name": "reverted",
          "ty": "bool",
          "description": "If this access reverted in either the current or parent context."
        },
        {
          "name": "storageAccesses",
          "ty": "StorageAccess[]",
          "description": "An ordered list of storage accesses made during an account access operation."
        },
        {
          "name": "depth",
          "ty": "uint64",
          "description": "Call depth traversed during the recording of state differences"
        }
      ]
    },
    {
      "name": "StorageAccess",
      "description": "The storage accessed during an `AccountAccess`.",
      "fields": [
        {
          "name": "account",
          "ty": "address",
          "description": "The account whose storage was accessed."
        },
        {
          "name": "slot",
          "ty": "bytes32",
          "description": "The slot that was accessed."
        },
        {
          "name": "isWrite",
          "ty": "bool",
          "description": "If the access was a write."
        },
        {
          "name": "previousValue",
          "ty": "bytes32",
          "description": "The previous value of the slot."
        },
        {
          "name": "newValue",
          "ty": "bytes32",
          "description": "The new value of the slot."
        },
        {
          "name": "reverted",
          "ty": "bool",
          "description": "If the access was reverted."
        }
      ]
    },
    {
      "name": "Gas",
      "description": "Gas used. Returned by `lastCallGas`.",
      "fields": [
        {
          "name": "gasLimit",
          "ty": "uint64",
          "description": "The gas limit of the call."
        },
        {
          "name": "gasTotalUsed",
          "ty": "uint64",
          "description": "The total gas used."
        },
        {
          "name": "gasMemoryUsed",
          "ty": "uint64",
          "description": "The amount of gas used for memory expansion."
        },
        {
          "name": "gasRefunded",
          "ty": "int64",
          "description": "The amount of gas refunded."
        },
        {
          "name": "gasRemaining",
          "ty": "uint64",
          "description": "The amount of gas remaining."
        }
      ]
    }
  ],
  "cheatcodes": [
    {
      "func": {
        "id": "_expectCheatcodeRevert_0",
        "description": "Expects an error on next cheatcode call with any revert data.",
        "declaration": "function _expectCheatcodeRevert() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "_expectCheatcodeRevert()",
        "selector": "0x79a4f48a",
        "selectorBytes": [
          121,
          164,
          244,
          138
        ]
      },
      "group": "testing",
      "status": "internal",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "_expectCheatcodeRevert_1",
        "description": "Expects an error on next cheatcode call that starts with the revert data.",
        "declaration": "function _expectCheatcodeRevert(bytes4 revertData) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "_expectCheatcodeRevert(bytes4)",
        "selector": "0x884cb0ae",
        "selectorBytes": [
          136,
          76,
          176,
          174
        ]
      },
      "group": "testing",
      "status": "internal",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "_expectCheatcodeRevert_2",
        "description": "Expects an error on next cheatcode call that exactly matches the revert data.",
        "declaration": "function _expectCheatcodeRevert(bytes calldata revertData) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "_expectCheatcodeRevert(bytes)",
        "selector": "0x7843b44d",
        "selectorBytes": [
          120,
          67,
          180,
          77
        ]
      },
      "group": "testing",
      "status": "internal",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "accesses",
        "description": "Gets all accessed reads and write slot from a `vm.record` session, for a given address.",
        "declaration": "function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);",
        "visibility": "external",
        "mutability": "",
        "signature": "accesses(address)",
        "selector": "0x65bc9481",
        "selectorBytes": [
          101,
          188,
          148,
          129
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "activeFork",
        "description": "Returns the identifier of the currently active fork. Reverts if no fork is currently active.",
        "declaration": "function activeFork() external view returns (uint256 forkId);",
        "visibility": "external",
        "mutability": "view",
        "signature": "activeFork()",
        "selector": "0x2f103f22",
        "selectorBytes": [
          47,
          16,
          63,
          34
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "addr",
        "description": "Gets the address for a given private key.",
        "declaration": "function addr(uint256 privateKey) external pure returns (address keyAddr);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "addr(uint256)",
        "selector": "0xffa18649",
        "selectorBytes": [
          255,
          161,
          134,
          73
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "allowCheatcodes",
        "description": "In forking mode, explicitly grant the given address cheatcode access.",
        "declaration": "function allowCheatcodes(address account) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "allowCheatcodes(address)",
        "selector": "0xea060291",
        "selectorBytes": [
          234,
          6,
          2,
          145
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "assertApproxEqAbsDecimal_0",
        "description": "Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\nFormats values with decimals in failure message.",
        "declaration": "function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256)",
        "selector": "0x045c55ce",
        "selectorBytes": [
          4,
          92,
          85,
          206
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertApproxEqAbsDecimal_1",
        "description": "Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\nFormats values with decimals in failure message. Includes error message into revert string on failure.",
        "declaration": "function assertApproxEqAbsDecimal(uint256 left, uint256 right, uint256 maxDelta, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqAbsDecimal(uint256,uint256,uint256,uint256,string)",
        "selector": "0x60429eb2",
        "selectorBytes": [
          96,
          66,
          158,
          178
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertApproxEqAbsDecimal_2",
        "description": "Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\nFormats values with decimals in failure message.",
        "declaration": "function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqAbsDecimal(int256,int256,uint256,uint256)",
        "selector": "0x3d5bc8bc",
        "selectorBytes": [
          61,
          91,
          200,
          188
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertApproxEqAbsDecimal_3",
        "description": "Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\nFormats values with decimals in failure message. Includes error message into revert string on failure.",
        "declaration": "function assertApproxEqAbsDecimal(int256 left, int256 right, uint256 maxDelta, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqAbsDecimal(int256,int256,uint256,uint256,string)",
        "selector": "0x6a5066d4",
        "selectorBytes": [
          106,
          80,
          102,
          212
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertApproxEqAbs_0",
        "description": "Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.",
        "declaration": "function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqAbs(uint256,uint256,uint256)",
        "selector": "0x16d207c6",
        "selectorBytes": [
          22,
          210,
          7,
          198
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertApproxEqAbs_1",
        "description": "Compares two `uint256` values. Expects difference to be less than or equal to `maxDelta`.\nIncludes error message into revert string on failure.",
        "declaration": "function assertApproxEqAbs(uint256 left, uint256 right, uint256 maxDelta, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqAbs(uint256,uint256,uint256,string)",
        "selector": "0xf710b062",
        "selectorBytes": [
          247,
          16,
          176,
          98
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertApproxEqAbs_2",
        "description": "Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.",
        "declaration": "function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqAbs(int256,int256,uint256)",
        "selector": "0x240f839d",
        "selectorBytes": [
          36,
          15,
          131,
          157
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertApproxEqAbs_3",
        "description": "Compares two `int256` values. Expects difference to be less than or equal to `maxDelta`.\nIncludes error message into revert string on failure.",
        "declaration": "function assertApproxEqAbs(int256 left, int256 right, uint256 maxDelta, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqAbs(int256,int256,uint256,string)",
        "selector": "0x8289e621",
        "selectorBytes": [
          130,
          137,
          230,
          33
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertApproxEqRelDecimal_0",
        "description": "Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n`maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\nFormats values with decimals in failure message.",
        "declaration": "function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqRelDecimal(uint256,uint256,uint256,uint256)",
        "selector": "0x21ed2977",
        "selectorBytes": [
          33,
          237,
          41,
          119
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertApproxEqRelDecimal_1",
        "description": "Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n`maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\nFormats values with decimals in failure message. Includes error message into revert string on failure.",
        "declaration": "function assertApproxEqRelDecimal(uint256 left, uint256 right, uint256 maxPercentDelta, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqRelDecimal(uint256,uint256,uint256,uint256,string)",
        "selector": "0x82d6c8fd",
        "selectorBytes": [
          130,
          214,
          200,
          253
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertApproxEqRelDecimal_2",
        "description": "Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n`maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\nFormats values with decimals in failure message.",
        "declaration": "function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqRelDecimal(int256,int256,uint256,uint256)",
        "selector": "0xabbf21cc",
        "selectorBytes": [
          171,
          191,
          33,
          204
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertApproxEqRelDecimal_3",
        "description": "Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n`maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\nFormats values with decimals in failure message. Includes error message into revert string on failure.",
        "declaration": "function assertApproxEqRelDecimal(int256 left, int256 right, uint256 maxPercentDelta, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqRelDecimal(int256,int256,uint256,uint256,string)",
        "selector": "0xfccc11c4",
        "selectorBytes": [
          252,
          204,
          17,
          196
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertApproxEqRel_0",
        "description": "Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n`maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%",
        "declaration": "function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqRel(uint256,uint256,uint256)",
        "selector": "0x8cf25ef4",
        "selectorBytes": [
          140,
          242,
          94,
          244
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertApproxEqRel_1",
        "description": "Compares two `uint256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n`maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\nIncludes error message into revert string on failure.",
        "declaration": "function assertApproxEqRel(uint256 left, uint256 right, uint256 maxPercentDelta, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqRel(uint256,uint256,uint256,string)",
        "selector": "0x1ecb7d33",
        "selectorBytes": [
          30,
          203,
          125,
          51
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertApproxEqRel_2",
        "description": "Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n`maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%",
        "declaration": "function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqRel(int256,int256,uint256)",
        "selector": "0xfea2d14f",
        "selectorBytes": [
          254,
          162,
          209,
          79
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertApproxEqRel_3",
        "description": "Compares two `int256` values. Expects relative difference in percents to be less than or equal to `maxPercentDelta`.\n`maxPercentDelta` is an 18 decimal fixed point number, where 1e18 == 100%\nIncludes error message into revert string on failure.",
        "declaration": "function assertApproxEqRel(int256 left, int256 right, uint256 maxPercentDelta, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertApproxEqRel(int256,int256,uint256,string)",
        "selector": "0xef277d72",
        "selectorBytes": [
          239,
          39,
          125,
          114
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEqDecimal_0",
        "description": "Asserts that two `uint256` values are equal, formatting them with decimals in failure message.",
        "declaration": "function assertEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEqDecimal(uint256,uint256,uint256)",
        "selector": "0x27af7d9c",
        "selectorBytes": [
          39,
          175,
          125,
          156
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEqDecimal_1",
        "description": "Asserts that two `uint256` values are equal, formatting them with decimals in failure message.\nIncludes error message into revert string on failure.",
        "declaration": "function assertEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEqDecimal(uint256,uint256,uint256,string)",
        "selector": "0xd0cbbdef",
        "selectorBytes": [
          208,
          203,
          189,
          239
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEqDecimal_2",
        "description": "Asserts that two `int256` values are equal, formatting them with decimals in failure message.",
        "declaration": "function assertEqDecimal(int256 left, int256 right, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEqDecimal(int256,int256,uint256)",
        "selector": "0x48016c04",
        "selectorBytes": [
          72,
          1,
          108,
          4
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEqDecimal_3",
        "description": "Asserts that two `int256` values are equal, formatting them with decimals in failure message.\nIncludes error message into revert string on failure.",
        "declaration": "function assertEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEqDecimal(int256,int256,uint256,string)",
        "selector": "0x7e77b0c5",
        "selectorBytes": [
          126,
          119,
          176,
          197
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_0",
        "description": "Asserts that two `bool` values are equal.",
        "declaration": "function assertEq(bool left, bool right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(bool,bool)",
        "selector": "0xf7fe3477",
        "selectorBytes": [
          247,
          254,
          52,
          119
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_1",
        "description": "Asserts that two `bool` values are equal and includes error message into revert string on failure.",
        "declaration": "function assertEq(bool left, bool right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(bool,bool,string)",
        "selector": "0x4db19e7e",
        "selectorBytes": [
          77,
          177,
          158,
          126
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_10",
        "description": "Asserts that two `string` values are equal.",
        "declaration": "function assertEq(string calldata left, string calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(string,string)",
        "selector": "0xf320d963",
        "selectorBytes": [
          243,
          32,
          217,
          99
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_11",
        "description": "Asserts that two `string` values are equal and includes error message into revert string on failure.",
        "declaration": "function assertEq(string calldata left, string calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(string,string,string)",
        "selector": "0x36f656d8",
        "selectorBytes": [
          54,
          246,
          86,
          216
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_12",
        "description": "Asserts that two `bytes` values are equal.",
        "declaration": "function assertEq(bytes calldata left, bytes calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(bytes,bytes)",
        "selector": "0x97624631",
        "selectorBytes": [
          151,
          98,
          70,
          49
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_13",
        "description": "Asserts that two `bytes` values are equal and includes error message into revert string on failure.",
        "declaration": "function assertEq(bytes calldata left, bytes calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(bytes,bytes,string)",
        "selector": "0xe24fed00",
        "selectorBytes": [
          226,
          79,
          237,
          0
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_14",
        "description": "Asserts that two arrays of `bool` values are equal.",
        "declaration": "function assertEq(bool[] calldata left, bool[] calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(bool[],bool[])",
        "selector": "0x707df785",
        "selectorBytes": [
          112,
          125,
          247,
          133
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_15",
        "description": "Asserts that two arrays of `bool` values are equal and includes error message into revert string on failure.",
        "declaration": "function assertEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(bool[],bool[],string)",
        "selector": "0xe48a8f8d",
        "selectorBytes": [
          228,
          138,
          143,
          141
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_16",
        "description": "Asserts that two arrays of `uint256 values are equal.",
        "declaration": "function assertEq(uint256[] calldata left, uint256[] calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(uint256[],uint256[])",
        "selector": "0x975d5a12",
        "selectorBytes": [
          151,
          93,
          90,
          18
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_17",
        "description": "Asserts that two arrays of `uint256` values are equal and includes error message into revert string on failure.",
        "declaration": "function assertEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(uint256[],uint256[],string)",
        "selector": "0x5d18c73a",
        "selectorBytes": [
          93,
          24,
          199,
          58
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_18",
        "description": "Asserts that two arrays of `int256` values are equal.",
        "declaration": "function assertEq(int256[] calldata left, int256[] calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(int256[],int256[])",
        "selector": "0x711043ac",
        "selectorBytes": [
          113,
          16,
          67,
          172
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_19",
        "description": "Asserts that two arrays of `int256` values are equal and includes error message into revert string on failure.",
        "declaration": "function assertEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(int256[],int256[],string)",
        "selector": "0x191f1b30",
        "selectorBytes": [
          25,
          31,
          27,
          48
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_2",
        "description": "Asserts that two `uint256` values are equal.",
        "declaration": "function assertEq(uint256 left, uint256 right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(uint256,uint256)",
        "selector": "0x98296c54",
        "selectorBytes": [
          152,
          41,
          108,
          84
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_20",
        "description": "Asserts that two arrays of `address` values are equal.",
        "declaration": "function assertEq(address[] calldata left, address[] calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(address[],address[])",
        "selector": "0x3868ac34",
        "selectorBytes": [
          56,
          104,
          172,
          52
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_21",
        "description": "Asserts that two arrays of `address` values are equal and includes error message into revert string on failure.",
        "declaration": "function assertEq(address[] calldata left, address[] calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(address[],address[],string)",
        "selector": "0x3e9173c5",
        "selectorBytes": [
          62,
          145,
          115,
          197
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_22",
        "description": "Asserts that two arrays of `bytes32` values are equal.",
        "declaration": "function assertEq(bytes32[] calldata left, bytes32[] calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(bytes32[],bytes32[])",
        "selector": "0x0cc9ee84",
        "selectorBytes": [
          12,
          201,
          238,
          132
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_23",
        "description": "Asserts that two arrays of `bytes32` values are equal and includes error message into revert string on failure.",
        "declaration": "function assertEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(bytes32[],bytes32[],string)",
        "selector": "0xe03e9177",
        "selectorBytes": [
          224,
          62,
          145,
          119
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_24",
        "description": "Asserts that two arrays of `string` values are equal.",
        "declaration": "function assertEq(string[] calldata left, string[] calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(string[],string[])",
        "selector": "0xcf1c049c",
        "selectorBytes": [
          207,
          28,
          4,
          156
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_25",
        "description": "Asserts that two arrays of `string` values are equal and includes error message into revert string on failure.",
        "declaration": "function assertEq(string[] calldata left, string[] calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(string[],string[],string)",
        "selector": "0xeff6b27d",
        "selectorBytes": [
          239,
          246,
          178,
          125
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_26",
        "description": "Asserts that two arrays of `bytes` values are equal.",
        "declaration": "function assertEq(bytes[] calldata left, bytes[] calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(bytes[],bytes[])",
        "selector": "0xe5fb9b4a",
        "selectorBytes": [
          229,
          251,
          155,
          74
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_27",
        "description": "Asserts that two arrays of `bytes` values are equal and includes error message into revert string on failure.",
        "declaration": "function assertEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(bytes[],bytes[],string)",
        "selector": "0xf413f0b6",
        "selectorBytes": [
          244,
          19,
          240,
          182
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_3",
        "description": "Asserts that two `uint256` values are equal and includes error message into revert string on failure.",
        "declaration": "function assertEq(uint256 left, uint256 right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(uint256,uint256,string)",
        "selector": "0x88b44c85",
        "selectorBytes": [
          136,
          180,
          76,
          133
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_4",
        "description": "Asserts that two `int256` values are equal.",
        "declaration": "function assertEq(int256 left, int256 right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(int256,int256)",
        "selector": "0xfe74f05b",
        "selectorBytes": [
          254,
          116,
          240,
          91
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_5",
        "description": "Asserts that two `int256` values are equal and includes error message into revert string on failure.",
        "declaration": "function assertEq(int256 left, int256 right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(int256,int256,string)",
        "selector": "0x714a2f13",
        "selectorBytes": [
          113,
          74,
          47,
          19
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_6",
        "description": "Asserts that two `address` values are equal.",
        "declaration": "function assertEq(address left, address right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(address,address)",
        "selector": "0x515361f6",
        "selectorBytes": [
          81,
          83,
          97,
          246
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_7",
        "description": "Asserts that two `address` values are equal and includes error message into revert string on failure.",
        "declaration": "function assertEq(address left, address right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(address,address,string)",
        "selector": "0x2f2769d1",
        "selectorBytes": [
          47,
          39,
          105,
          209
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_8",
        "description": "Asserts that two `bytes32` values are equal.",
        "declaration": "function assertEq(bytes32 left, bytes32 right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(bytes32,bytes32)",
        "selector": "0x7c84c69b",
        "selectorBytes": [
          124,
          132,
          198,
          155
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertEq_9",
        "description": "Asserts that two `bytes32` values are equal and includes error message into revert string on failure.",
        "declaration": "function assertEq(bytes32 left, bytes32 right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertEq(bytes32,bytes32,string)",
        "selector": "0xc1fa1ed0",
        "selectorBytes": [
          193,
          250,
          30,
          208
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertFalse_0",
        "description": "Asserts that the given condition is false.",
        "declaration": "function assertFalse(bool condition) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertFalse(bool)",
        "selector": "0xa5982885",
        "selectorBytes": [
          165,
          152,
          40,
          133
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertFalse_1",
        "description": "Asserts that the given condition is false and includes error message into revert string on failure.",
        "declaration": "function assertFalse(bool condition, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertFalse(bool,string)",
        "selector": "0x7ba04809",
        "selectorBytes": [
          123,
          160,
          72,
          9
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGeDecimal_0",
        "description": "Compares two `uint256` values. Expects first value to be greater than or equal to second.\nFormats values with decimals in failure message.",
        "declaration": "function assertGeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGeDecimal(uint256,uint256,uint256)",
        "selector": "0x3d1fe08a",
        "selectorBytes": [
          61,
          31,
          224,
          138
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGeDecimal_1",
        "description": "Compares two `uint256` values. Expects first value to be greater than or equal to second.\nFormats values with decimals in failure message. Includes error message into revert string on failure.",
        "declaration": "function assertGeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGeDecimal(uint256,uint256,uint256,string)",
        "selector": "0x8bff9133",
        "selectorBytes": [
          139,
          255,
          145,
          51
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGeDecimal_2",
        "description": "Compares two `int256` values. Expects first value to be greater than or equal to second.\nFormats values with decimals in failure message.",
        "declaration": "function assertGeDecimal(int256 left, int256 right, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGeDecimal(int256,int256,uint256)",
        "selector": "0xdc28c0f1",
        "selectorBytes": [
          220,
          40,
          192,
          241
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGeDecimal_3",
        "description": "Compares two `int256` values. Expects first value to be greater than or equal to second.\nFormats values with decimals in failure message. Includes error message into revert string on failure.",
        "declaration": "function assertGeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGeDecimal(int256,int256,uint256,string)",
        "selector": "0x5df93c9b",
        "selectorBytes": [
          93,
          249,
          60,
          155
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGe_0",
        "description": "Compares two `uint256` values. Expects first value to be greater than or equal to second.",
        "declaration": "function assertGe(uint256 left, uint256 right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGe(uint256,uint256)",
        "selector": "0xa8d4d1d9",
        "selectorBytes": [
          168,
          212,
          209,
          217
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGe_1",
        "description": "Compares two `uint256` values. Expects first value to be greater than or equal to second.\nIncludes error message into revert string on failure.",
        "declaration": "function assertGe(uint256 left, uint256 right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGe(uint256,uint256,string)",
        "selector": "0xe25242c0",
        "selectorBytes": [
          226,
          82,
          66,
          192
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGe_2",
        "description": "Compares two `int256` values. Expects first value to be greater than or equal to second.",
        "declaration": "function assertGe(int256 left, int256 right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGe(int256,int256)",
        "selector": "0x0a30b771",
        "selectorBytes": [
          10,
          48,
          183,
          113
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGe_3",
        "description": "Compares two `int256` values. Expects first value to be greater than or equal to second.\nIncludes error message into revert string on failure.",
        "declaration": "function assertGe(int256 left, int256 right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGe(int256,int256,string)",
        "selector": "0xa84328dd",
        "selectorBytes": [
          168,
          67,
          40,
          221
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGtDecimal_0",
        "description": "Compares two `uint256` values. Expects first value to be greater than second.\nFormats values with decimals in failure message.",
        "declaration": "function assertGtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGtDecimal(uint256,uint256,uint256)",
        "selector": "0xeccd2437",
        "selectorBytes": [
          236,
          205,
          36,
          55
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGtDecimal_1",
        "description": "Compares two `uint256` values. Expects first value to be greater than second.\nFormats values with decimals in failure message. Includes error message into revert string on failure.",
        "declaration": "function assertGtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGtDecimal(uint256,uint256,uint256,string)",
        "selector": "0x64949a8d",
        "selectorBytes": [
          100,
          148,
          154,
          141
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGtDecimal_2",
        "description": "Compares two `int256` values. Expects first value to be greater than second.\nFormats values with decimals in failure message.",
        "declaration": "function assertGtDecimal(int256 left, int256 right, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGtDecimal(int256,int256,uint256)",
        "selector": "0x78611f0e",
        "selectorBytes": [
          120,
          97,
          31,
          14
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGtDecimal_3",
        "description": "Compares two `int256` values. Expects first value to be greater than second.\nFormats values with decimals in failure message. Includes error message into revert string on failure.",
        "declaration": "function assertGtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGtDecimal(int256,int256,uint256,string)",
        "selector": "0x04a5c7ab",
        "selectorBytes": [
          4,
          165,
          199,
          171
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGt_0",
        "description": "Compares two `uint256` values. Expects first value to be greater than second.",
        "declaration": "function assertGt(uint256 left, uint256 right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGt(uint256,uint256)",
        "selector": "0xdb07fcd2",
        "selectorBytes": [
          219,
          7,
          252,
          210
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGt_1",
        "description": "Compares two `uint256` values. Expects first value to be greater than second.\nIncludes error message into revert string on failure.",
        "declaration": "function assertGt(uint256 left, uint256 right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGt(uint256,uint256,string)",
        "selector": "0xd9a3c4d2",
        "selectorBytes": [
          217,
          163,
          196,
          210
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGt_2",
        "description": "Compares two `int256` values. Expects first value to be greater than second.",
        "declaration": "function assertGt(int256 left, int256 right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGt(int256,int256)",
        "selector": "0x5a362d45",
        "selectorBytes": [
          90,
          54,
          45,
          69
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertGt_3",
        "description": "Compares two `int256` values. Expects first value to be greater than second.\nIncludes error message into revert string on failure.",
        "declaration": "function assertGt(int256 left, int256 right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertGt(int256,int256,string)",
        "selector": "0xf8d33b9b",
        "selectorBytes": [
          248,
          211,
          59,
          155
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLeDecimal_0",
        "description": "Compares two `uint256` values. Expects first value to be less than or equal to second.\nFormats values with decimals in failure message.",
        "declaration": "function assertLeDecimal(uint256 left, uint256 right, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLeDecimal(uint256,uint256,uint256)",
        "selector": "0xc304aab7",
        "selectorBytes": [
          195,
          4,
          170,
          183
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLeDecimal_1",
        "description": "Compares two `uint256` values. Expects first value to be less than or equal to second.\nFormats values with decimals in failure message. Includes error message into revert string on failure.",
        "declaration": "function assertLeDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLeDecimal(uint256,uint256,uint256,string)",
        "selector": "0x7fefbbe0",
        "selectorBytes": [
          127,
          239,
          187,
          224
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLeDecimal_2",
        "description": "Compares two `int256` values. Expects first value to be less than or equal to second.\nFormats values with decimals in failure message.",
        "declaration": "function assertLeDecimal(int256 left, int256 right, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLeDecimal(int256,int256,uint256)",
        "selector": "0x11d1364a",
        "selectorBytes": [
          17,
          209,
          54,
          74
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLeDecimal_3",
        "description": "Compares two `int256` values. Expects first value to be less than or equal to second.\nFormats values with decimals in failure message. Includes error message into revert string on failure.",
        "declaration": "function assertLeDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLeDecimal(int256,int256,uint256,string)",
        "selector": "0xaa5cf788",
        "selectorBytes": [
          170,
          92,
          247,
          136
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLe_0",
        "description": "Compares two `uint256` values. Expects first value to be less than or equal to second.",
        "declaration": "function assertLe(uint256 left, uint256 right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLe(uint256,uint256)",
        "selector": "0x8466f415",
        "selectorBytes": [
          132,
          102,
          244,
          21
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLe_1",
        "description": "Compares two `uint256` values. Expects first value to be less than or equal to second.\nIncludes error message into revert string on failure.",
        "declaration": "function assertLe(uint256 left, uint256 right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLe(uint256,uint256,string)",
        "selector": "0xd17d4b0d",
        "selectorBytes": [
          209,
          125,
          75,
          13
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLe_2",
        "description": "Compares two `int256` values. Expects first value to be less than or equal to second.",
        "declaration": "function assertLe(int256 left, int256 right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLe(int256,int256)",
        "selector": "0x95fd154e",
        "selectorBytes": [
          149,
          253,
          21,
          78
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLe_3",
        "description": "Compares two `int256` values. Expects first value to be less than or equal to second.\nIncludes error message into revert string on failure.",
        "declaration": "function assertLe(int256 left, int256 right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLe(int256,int256,string)",
        "selector": "0x4dfe692c",
        "selectorBytes": [
          77,
          254,
          105,
          44
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLtDecimal_0",
        "description": "Compares two `uint256` values. Expects first value to be less than second.\nFormats values with decimals in failure message.",
        "declaration": "function assertLtDecimal(uint256 left, uint256 right, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLtDecimal(uint256,uint256,uint256)",
        "selector": "0x2077337e",
        "selectorBytes": [
          32,
          119,
          51,
          126
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLtDecimal_1",
        "description": "Compares two `uint256` values. Expects first value to be less than second.\nFormats values with decimals in failure message. Includes error message into revert string on failure.",
        "declaration": "function assertLtDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLtDecimal(uint256,uint256,uint256,string)",
        "selector": "0xa972d037",
        "selectorBytes": [
          169,
          114,
          208,
          55
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLtDecimal_2",
        "description": "Compares two `int256` values. Expects first value to be less than second.\nFormats values with decimals in failure message.",
        "declaration": "function assertLtDecimal(int256 left, int256 right, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLtDecimal(int256,int256,uint256)",
        "selector": "0xdbe8d88b",
        "selectorBytes": [
          219,
          232,
          216,
          139
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLtDecimal_3",
        "description": "Compares two `int256` values. Expects first value to be less than second.\nFormats values with decimals in failure message. Includes error message into revert string on failure.",
        "declaration": "function assertLtDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLtDecimal(int256,int256,uint256,string)",
        "selector": "0x40f0b4e0",
        "selectorBytes": [
          64,
          240,
          180,
          224
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLt_0",
        "description": "Compares two `uint256` values. Expects first value to be less than second.",
        "declaration": "function assertLt(uint256 left, uint256 right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLt(uint256,uint256)",
        "selector": "0xb12fc005",
        "selectorBytes": [
          177,
          47,
          192,
          5
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLt_1",
        "description": "Compares two `uint256` values. Expects first value to be less than second.\nIncludes error message into revert string on failure.",
        "declaration": "function assertLt(uint256 left, uint256 right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLt(uint256,uint256,string)",
        "selector": "0x65d5c135",
        "selectorBytes": [
          101,
          213,
          193,
          53
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLt_2",
        "description": "Compares two `int256` values. Expects first value to be less than second.",
        "declaration": "function assertLt(int256 left, int256 right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLt(int256,int256)",
        "selector": "0x3e914080",
        "selectorBytes": [
          62,
          145,
          64,
          128
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertLt_3",
        "description": "Compares two `int256` values. Expects first value to be less than second.\nIncludes error message into revert string on failure.",
        "declaration": "function assertLt(int256 left, int256 right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertLt(int256,int256,string)",
        "selector": "0x9ff531e3",
        "selectorBytes": [
          159,
          245,
          49,
          227
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEqDecimal_0",
        "description": "Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.",
        "declaration": "function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEqDecimal(uint256,uint256,uint256)",
        "selector": "0x669efca7",
        "selectorBytes": [
          102,
          158,
          252,
          167
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEqDecimal_1",
        "description": "Asserts that two `uint256` values are not equal, formatting them with decimals in failure message.\nIncludes error message into revert string on failure.",
        "declaration": "function assertNotEqDecimal(uint256 left, uint256 right, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEqDecimal(uint256,uint256,uint256,string)",
        "selector": "0xf5a55558",
        "selectorBytes": [
          245,
          165,
          85,
          88
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEqDecimal_2",
        "description": "Asserts that two `int256` values are not equal, formatting them with decimals in failure message.",
        "declaration": "function assertNotEqDecimal(int256 left, int256 right, uint256 decimals) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEqDecimal(int256,int256,uint256)",
        "selector": "0x14e75680",
        "selectorBytes": [
          20,
          231,
          86,
          128
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEqDecimal_3",
        "description": "Asserts that two `int256` values are not equal, formatting them with decimals in failure message.\nIncludes error message into revert string on failure.",
        "declaration": "function assertNotEqDecimal(int256 left, int256 right, uint256 decimals, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEqDecimal(int256,int256,uint256,string)",
        "selector": "0x33949f0b",
        "selectorBytes": [
          51,
          148,
          159,
          11
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_0",
        "description": "Asserts that two `bool` values are not equal.",
        "declaration": "function assertNotEq(bool left, bool right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(bool,bool)",
        "selector": "0x236e4d66",
        "selectorBytes": [
          35,
          110,
          77,
          102
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_1",
        "description": "Asserts that two `bool` values are not equal and includes error message into revert string on failure.",
        "declaration": "function assertNotEq(bool left, bool right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(bool,bool,string)",
        "selector": "0x1091a261",
        "selectorBytes": [
          16,
          145,
          162,
          97
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_10",
        "description": "Asserts that two `string` values are not equal.",
        "declaration": "function assertNotEq(string calldata left, string calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(string,string)",
        "selector": "0x6a8237b3",
        "selectorBytes": [
          106,
          130,
          55,
          179
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_11",
        "description": "Asserts that two `string` values are not equal and includes error message into revert string on failure.",
        "declaration": "function assertNotEq(string calldata left, string calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(string,string,string)",
        "selector": "0x78bdcea7",
        "selectorBytes": [
          120,
          189,
          206,
          167
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_12",
        "description": "Asserts that two `bytes` values are not equal.",
        "declaration": "function assertNotEq(bytes calldata left, bytes calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(bytes,bytes)",
        "selector": "0x3cf78e28",
        "selectorBytes": [
          60,
          247,
          142,
          40
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_13",
        "description": "Asserts that two `bytes` values are not equal and includes error message into revert string on failure.",
        "declaration": "function assertNotEq(bytes calldata left, bytes calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(bytes,bytes,string)",
        "selector": "0x9507540e",
        "selectorBytes": [
          149,
          7,
          84,
          14
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_14",
        "description": "Asserts that two arrays of `bool` values are not equal.",
        "declaration": "function assertNotEq(bool[] calldata left, bool[] calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(bool[],bool[])",
        "selector": "0x286fafea",
        "selectorBytes": [
          40,
          111,
          175,
          234
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_15",
        "description": "Asserts that two arrays of `bool` values are not equal and includes error message into revert string on failure.",
        "declaration": "function assertNotEq(bool[] calldata left, bool[] calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(bool[],bool[],string)",
        "selector": "0x62c6f9fb",
        "selectorBytes": [
          98,
          198,
          249,
          251
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_16",
        "description": "Asserts that two arrays of `uint256` values are not equal.",
        "declaration": "function assertNotEq(uint256[] calldata left, uint256[] calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(uint256[],uint256[])",
        "selector": "0x56f29cba",
        "selectorBytes": [
          86,
          242,
          156,
          186
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_17",
        "description": "Asserts that two arrays of `uint256` values are not equal and includes error message into revert string on failure.",
        "declaration": "function assertNotEq(uint256[] calldata left, uint256[] calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(uint256[],uint256[],string)",
        "selector": "0x9a7fbd8f",
        "selectorBytes": [
          154,
          127,
          189,
          143
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_18",
        "description": "Asserts that two arrays of `int256` values are not equal.",
        "declaration": "function assertNotEq(int256[] calldata left, int256[] calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(int256[],int256[])",
        "selector": "0x0b72f4ef",
        "selectorBytes": [
          11,
          114,
          244,
          239
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_19",
        "description": "Asserts that two arrays of `int256` values are not equal and includes error message into revert string on failure.",
        "declaration": "function assertNotEq(int256[] calldata left, int256[] calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(int256[],int256[],string)",
        "selector": "0xd3977322",
        "selectorBytes": [
          211,
          151,
          115,
          34
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_2",
        "description": "Asserts that two `uint256` values are not equal.",
        "declaration": "function assertNotEq(uint256 left, uint256 right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(uint256,uint256)",
        "selector": "0xb7909320",
        "selectorBytes": [
          183,
          144,
          147,
          32
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_20",
        "description": "Asserts that two arrays of `address` values are not equal.",
        "declaration": "function assertNotEq(address[] calldata left, address[] calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(address[],address[])",
        "selector": "0x46d0b252",
        "selectorBytes": [
          70,
          208,
          178,
          82
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_21",
        "description": "Asserts that two arrays of `address` values are not equal and includes error message into revert string on failure.",
        "declaration": "function assertNotEq(address[] calldata left, address[] calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(address[],address[],string)",
        "selector": "0x72c7e0b5",
        "selectorBytes": [
          114,
          199,
          224,
          181
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_22",
        "description": "Asserts that two arrays of `bytes32` values are not equal.",
        "declaration": "function assertNotEq(bytes32[] calldata left, bytes32[] calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(bytes32[],bytes32[])",
        "selector": "0x0603ea68",
        "selectorBytes": [
          6,
          3,
          234,
          104
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_23",
        "description": "Asserts that two arrays of `bytes32` values are not equal and includes error message into revert string on failure.",
        "declaration": "function assertNotEq(bytes32[] calldata left, bytes32[] calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(bytes32[],bytes32[],string)",
        "selector": "0xb873634c",
        "selectorBytes": [
          184,
          115,
          99,
          76
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_24",
        "description": "Asserts that two arrays of `string` values are not equal.",
        "declaration": "function assertNotEq(string[] calldata left, string[] calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(string[],string[])",
        "selector": "0xbdfacbe8",
        "selectorBytes": [
          189,
          250,
          203,
          232
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_25",
        "description": "Asserts that two arrays of `string` values are not equal and includes error message into revert string on failure.",
        "declaration": "function assertNotEq(string[] calldata left, string[] calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(string[],string[],string)",
        "selector": "0xb67187f3",
        "selectorBytes": [
          182,
          113,
          135,
          243
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_26",
        "description": "Asserts that two arrays of `bytes` values are not equal.",
        "declaration": "function assertNotEq(bytes[] calldata left, bytes[] calldata right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(bytes[],bytes[])",
        "selector": "0xedecd035",
        "selectorBytes": [
          237,
          236,
          208,
          53
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_27",
        "description": "Asserts that two arrays of `bytes` values are not equal and includes error message into revert string on failure.",
        "declaration": "function assertNotEq(bytes[] calldata left, bytes[] calldata right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(bytes[],bytes[],string)",
        "selector": "0x1dcd1f68",
        "selectorBytes": [
          29,
          205,
          31,
          104
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_3",
        "description": "Asserts that two `uint256` values are not equal and includes error message into revert string on failure.",
        "declaration": "function assertNotEq(uint256 left, uint256 right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(uint256,uint256,string)",
        "selector": "0x98f9bdbd",
        "selectorBytes": [
          152,
          249,
          189,
          189
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_4",
        "description": "Asserts that two `int256` values are not equal.",
        "declaration": "function assertNotEq(int256 left, int256 right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(int256,int256)",
        "selector": "0xf4c004e3",
        "selectorBytes": [
          244,
          192,
          4,
          227
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_5",
        "description": "Asserts that two `int256` values are not equal and includes error message into revert string on failure.",
        "declaration": "function assertNotEq(int256 left, int256 right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(int256,int256,string)",
        "selector": "0x4724c5b9",
        "selectorBytes": [
          71,
          36,
          197,
          185
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_6",
        "description": "Asserts that two `address` values are not equal.",
        "declaration": "function assertNotEq(address left, address right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(address,address)",
        "selector": "0xb12e1694",
        "selectorBytes": [
          177,
          46,
          22,
          148
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_7",
        "description": "Asserts that two `address` values are not equal and includes error message into revert string on failure.",
        "declaration": "function assertNotEq(address left, address right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(address,address,string)",
        "selector": "0x8775a591",
        "selectorBytes": [
          135,
          117,
          165,
          145
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_8",
        "description": "Asserts that two `bytes32` values are not equal.",
        "declaration": "function assertNotEq(bytes32 left, bytes32 right) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(bytes32,bytes32)",
        "selector": "0x898e83fc",
        "selectorBytes": [
          137,
          142,
          131,
          252
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertNotEq_9",
        "description": "Asserts that two `bytes32` values are not equal and includes error message into revert string on failure.",
        "declaration": "function assertNotEq(bytes32 left, bytes32 right, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertNotEq(bytes32,bytes32,string)",
        "selector": "0xb2332f51",
        "selectorBytes": [
          178,
          51,
          47,
          81
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertTrue_0",
        "description": "Asserts that the given condition is true.",
        "declaration": "function assertTrue(bool condition) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertTrue(bool)",
        "selector": "0x0c9fd581",
        "selectorBytes": [
          12,
          159,
          213,
          129
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assertTrue_1",
        "description": "Asserts that the given condition is true and includes error message into revert string on failure.",
        "declaration": "function assertTrue(bool condition, string calldata error) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assertTrue(bool,string)",
        "selector": "0xa34edc03",
        "selectorBytes": [
          163,
          78,
          220,
          3
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "assume",
        "description": "If the condition is false, discard this run's fuzz inputs and generate new ones.",
        "declaration": "function assume(bool condition) external pure;",
        "visibility": "external",
        "mutability": "pure",
        "signature": "assume(bool)",
        "selector": "0x4c63e562",
        "selectorBytes": [
          76,
          99,
          229,
          98
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "blobBaseFee",
        "description": "Sets `block.blobbasefee`",
        "declaration": "function blobBaseFee(uint256 newBlobBaseFee) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "blobBaseFee(uint256)",
        "selector": "0x6d315d7e",
        "selectorBytes": [
          109,
          49,
          93,
          126
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "breakpoint_0",
        "description": "Writes a breakpoint to jump to in the debugger.",
        "declaration": "function breakpoint(string calldata char) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "breakpoint(string)",
        "selector": "0xf0259e92",
        "selectorBytes": [
          240,
          37,
          158,
          146
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "breakpoint_1",
        "description": "Writes a conditional breakpoint to jump to in the debugger.",
        "declaration": "function breakpoint(string calldata char, bool value) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "breakpoint(string,bool)",
        "selector": "0xf7d39a8d",
        "selectorBytes": [
          247,
          211,
          154,
          141
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "broadcast_0",
        "description": "Has the next call (at this call depth only) create transactions that can later be signed and sent onchain.\nBroadcasting address is determined by checking the following in order:\n1. If `--sender` argument was provided, that address is used.\n2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.\n3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.",
        "declaration": "function broadcast() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "broadcast()",
        "selector": "0xafc98040",
        "selectorBytes": [
          175,
          201,
          128,
          64
        ]
      },
      "group": "scripting",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "broadcast_1",
        "description": "Has the next call (at this call depth only) create a transaction with the address provided\nas the sender that can later be signed and sent onchain.",
        "declaration": "function broadcast(address signer) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "broadcast(address)",
        "selector": "0xe6962cdb",
        "selectorBytes": [
          230,
          150,
          44,
          219
        ]
      },
      "group": "scripting",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "broadcast_2",
        "description": "Has the next call (at this call depth only) create a transaction with the private key\nprovided as the sender that can later be signed and sent onchain.",
        "declaration": "function broadcast(uint256 privateKey) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "broadcast(uint256)",
        "selector": "0xf67a965b",
        "selectorBytes": [
          246,
          122,
          150,
          91
        ]
      },
      "group": "scripting",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "chainId",
        "description": "Sets `block.chainid`.",
        "declaration": "function chainId(uint256 newChainId) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "chainId(uint256)",
        "selector": "0x4049ddd2",
        "selectorBytes": [
          64,
          73,
          221,
          210
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "clearMockedCalls",
        "description": "Clears all mocked calls.",
        "declaration": "function clearMockedCalls() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "clearMockedCalls()",
        "selector": "0x3fdf4e15",
        "selectorBytes": [
          63,
          223,
          78,
          21
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "closeFile",
        "description": "Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\n`path` is relative to the project root.",
        "declaration": "function closeFile(string calldata path) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "closeFile(string)",
        "selector": "0x48c3241f",
        "selectorBytes": [
          72,
          195,
          36,
          31
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "coinbase",
        "description": "Sets `block.coinbase`.",
        "declaration": "function coinbase(address newCoinbase) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "coinbase(address)",
        "selector": "0xff483c54",
        "selectorBytes": [
          255,
          72,
          60,
          84
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "computeCreate2Address_0",
        "description": "Compute the address of a contract created with CREATE2 using the given CREATE2 deployer.",
        "declaration": "function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer) external pure returns (address);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "computeCreate2Address(bytes32,bytes32,address)",
        "selector": "0xd323826a",
        "selectorBytes": [
          211,
          35,
          130,
          106
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "computeCreate2Address_1",
        "description": "Compute the address of a contract created with CREATE2 using the default CREATE2 deployer.",
        "declaration": "function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) external pure returns (address);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "computeCreate2Address(bytes32,bytes32)",
        "selector": "0x890c283b",
        "selectorBytes": [
          137,
          12,
          40,
          59
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "computeCreateAddress",
        "description": "Compute the address a contract will be deployed at for a given deployer address and nonce.",
        "declaration": "function computeCreateAddress(address deployer, uint256 nonce) external pure returns (address);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "computeCreateAddress(address,uint256)",
        "selector": "0x74637a7a",
        "selectorBytes": [
          116,
          99,
          122,
          122
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "cool",
        "description": "Marks the slots of an account and the account address as cold.",
        "declaration": "function cool(address target) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "cool(address)",
        "selector": "0x40ff9f21",
        "selectorBytes": [
          64,
          255,
          159,
          33
        ]
      },
      "group": "evm",
      "status": "experimental",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "copyFile",
        "description": "Copies the contents of one file to another. This function will **overwrite** the contents of `to`.\nOn success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.\nBoth `from` and `to` are relative to the project root.",
        "declaration": "function copyFile(string calldata from, string calldata to) external returns (uint64 copied);",
        "visibility": "external",
        "mutability": "",
        "signature": "copyFile(string,string)",
        "selector": "0xa54a87d8",
        "selectorBytes": [
          165,
          74,
          135,
          216
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "createDir",
        "description": "Creates a new, empty directory at the provided path.\nThis cheatcode will revert in the following situations, but is not limited to just these cases:\n- User lacks permissions to modify `path`.\n- A parent of the given path doesn't exist and `recursive` is false.\n- `path` already exists and `recursive` is false.\n`path` is relative to the project root.",
        "declaration": "function createDir(string calldata path, bool recursive) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "createDir(string,bool)",
        "selector": "0x168b64d3",
        "selectorBytes": [
          22,
          139,
          100,
          211
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "createFork_0",
        "description": "Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork.",
        "declaration": "function createFork(string calldata urlOrAlias) external returns (uint256 forkId);",
        "visibility": "external",
        "mutability": "",
        "signature": "createFork(string)",
        "selector": "0x31ba3498",
        "selectorBytes": [
          49,
          186,
          52,
          152
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "createFork_1",
        "description": "Creates a new fork with the given endpoint and block and returns the identifier of the fork.",
        "declaration": "function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);",
        "visibility": "external",
        "mutability": "",
        "signature": "createFork(string,uint256)",
        "selector": "0x6ba3ba2b",
        "selectorBytes": [
          107,
          163,
          186,
          43
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "createFork_2",
        "description": "Creates a new fork with the given endpoint and at the block the given transaction was mined in,\nreplays all transaction mined in the block before the transaction, and returns the identifier of the fork.",
        "declaration": "function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);",
        "visibility": "external",
        "mutability": "",
        "signature": "createFork(string,bytes32)",
        "selector": "0x7ca29682",
        "selectorBytes": [
          124,
          162,
          150,
          130
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "createSelectFork_0",
        "description": "Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork.",
        "declaration": "function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);",
        "visibility": "external",
        "mutability": "",
        "signature": "createSelectFork(string)",
        "selector": "0x98680034",
        "selectorBytes": [
          152,
          104,
          0,
          52
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "createSelectFork_1",
        "description": "Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork.",
        "declaration": "function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);",
        "visibility": "external",
        "mutability": "",
        "signature": "createSelectFork(string,uint256)",
        "selector": "0x71ee464d",
        "selectorBytes": [
          113,
          238,
          70,
          77
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "createSelectFork_2",
        "description": "Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in,\nreplays all transaction mined in the block before the transaction, returns the identifier of the fork.",
        "declaration": "function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);",
        "visibility": "external",
        "mutability": "",
        "signature": "createSelectFork(string,bytes32)",
        "selector": "0x84d52b7a",
        "selectorBytes": [
          132,
          213,
          43,
          122
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "createWallet_0",
        "description": "Derives a private key from the name, labels the account with that name, and returns the wallet.",
        "declaration": "function createWallet(string calldata walletLabel) external returns (Wallet memory wallet);",
        "visibility": "external",
        "mutability": "",
        "signature": "createWallet(string)",
        "selector": "0x7404f1d2",
        "selectorBytes": [
          116,
          4,
          241,
          210
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "createWallet_1",
        "description": "Generates a wallet from the private key and returns the wallet.",
        "declaration": "function createWallet(uint256 privateKey) external returns (Wallet memory wallet);",
        "visibility": "external",
        "mutability": "",
        "signature": "createWallet(uint256)",
        "selector": "0x7a675bb6",
        "selectorBytes": [
          122,
          103,
          91,
          182
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "createWallet_2",
        "description": "Generates a wallet from the private key, labels the account with that name, and returns the wallet.",
        "declaration": "function createWallet(uint256 privateKey, string calldata walletLabel) external returns (Wallet memory wallet);",
        "visibility": "external",
        "mutability": "",
        "signature": "createWallet(uint256,string)",
        "selector": "0xed7c5462",
        "selectorBytes": [
          237,
          124,
          84,
          98
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "deal",
        "description": "Sets an address' balance.",
        "declaration": "function deal(address account, uint256 newBalance) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "deal(address,uint256)",
        "selector": "0xc88a5e6d",
        "selectorBytes": [
          200,
          138,
          94,
          109
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "deleteSnapshot",
        "description": "Removes the snapshot with the given ID created by `snapshot`.\nTakes the snapshot ID to delete.\nReturns `true` if the snapshot was successfully deleted.\nReturns `false` if the snapshot does not exist.",
        "declaration": "function deleteSnapshot(uint256 snapshotId) external returns (bool success);",
        "visibility": "external",
        "mutability": "",
        "signature": "deleteSnapshot(uint256)",
        "selector": "0xa6368557",
        "selectorBytes": [
          166,
          54,
          133,
          87
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "deleteSnapshots",
        "description": "Removes _all_ snapshots previously created by `snapshot`.",
        "declaration": "function deleteSnapshots() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "deleteSnapshots()",
        "selector": "0x421ae469",
        "selectorBytes": [
          66,
          26,
          228,
          105
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "deriveKey_0",
        "description": "Derive a private key from a provided mnenomic string (or mnenomic file path)\nat the derivation path `m/44'/60'/0'/0/{index}`.",
        "declaration": "function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "deriveKey(string,uint32)",
        "selector": "0x6229498b",
        "selectorBytes": [
          98,
          41,
          73,
          139
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "deriveKey_1",
        "description": "Derive a private key from a provided mnenomic string (or mnenomic file path)\nat `{derivationPath}{index}`.",
        "declaration": "function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index) external pure returns (uint256 privateKey);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "deriveKey(string,string,uint32)",
        "selector": "0x6bcb2c1b",
        "selectorBytes": [
          107,
          203,
          44,
          27
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "deriveKey_2",
        "description": "Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\nat the derivation path `m/44'/60'/0'/0/{index}`.",
        "declaration": "function deriveKey(string calldata mnemonic, uint32 index, string calldata language) external pure returns (uint256 privateKey);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "deriveKey(string,uint32,string)",
        "selector": "0x32c8176d",
        "selectorBytes": [
          50,
          200,
          23,
          109
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "deriveKey_3",
        "description": "Derive a private key from a provided mnenomic string (or mnenomic file path) in the specified language\nat `{derivationPath}{index}`.",
        "declaration": "function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index, string calldata language) external pure returns (uint256 privateKey);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "deriveKey(string,string,uint32,string)",
        "selector": "0x29233b1f",
        "selectorBytes": [
          41,
          35,
          59,
          31
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "difficulty",
        "description": "Sets `block.difficulty`.\nNot available on EVM versions from Paris onwards. Use `prevrandao` instead.\nReverts if used on unsupported EVM versions.",
        "declaration": "function difficulty(uint256 newDifficulty) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "difficulty(uint256)",
        "selector": "0x46cc92d9",
        "selectorBytes": [
          70,
          204,
          146,
          217
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "dumpState",
        "description": "Dump a genesis JSON file's `allocs` to disk.",
        "declaration": "function dumpState(string calldata pathToStateJson) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "dumpState(string)",
        "selector": "0x709ecd3f",
        "selectorBytes": [
          112,
          158,
          205,
          63
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "envAddress_0",
        "description": "Gets the environment variable `name` and parses it as `address`.\nReverts if the variable was not found or could not be parsed.",
        "declaration": "function envAddress(string calldata name) external view returns (address value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envAddress(string)",
        "selector": "0x350d56bf",
        "selectorBytes": [
          53,
          13,
          86,
          191
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envAddress_1",
        "description": "Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\nReverts if the variable was not found or could not be parsed.",
        "declaration": "function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envAddress(string,string)",
        "selector": "0xad31b9fa",
        "selectorBytes": [
          173,
          49,
          185,
          250
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envBool_0",
        "description": "Gets the environment variable `name` and parses it as `bool`.\nReverts if the variable was not found or could not be parsed.",
        "declaration": "function envBool(string calldata name) external view returns (bool value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envBool(string)",
        "selector": "0x7ed1ec7d",
        "selectorBytes": [
          126,
          209,
          236,
          125
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envBool_1",
        "description": "Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\nReverts if the variable was not found or could not be parsed.",
        "declaration": "function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envBool(string,string)",
        "selector": "0xaaaddeaf",
        "selectorBytes": [
          170,
          173,
          222,
          175
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envBytes32_0",
        "description": "Gets the environment variable `name` and parses it as `bytes32`.\nReverts if the variable was not found or could not be parsed.",
        "declaration": "function envBytes32(string calldata name) external view returns (bytes32 value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envBytes32(string)",
        "selector": "0x97949042",
        "selectorBytes": [
          151,
          148,
          144,
          66
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envBytes32_1",
        "description": "Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\nReverts if the variable was not found or could not be parsed.",
        "declaration": "function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envBytes32(string,string)",
        "selector": "0x5af231c1",
        "selectorBytes": [
          90,
          242,
          49,
          193
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envBytes_0",
        "description": "Gets the environment variable `name` and parses it as `bytes`.\nReverts if the variable was not found or could not be parsed.",
        "declaration": "function envBytes(string calldata name) external view returns (bytes memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envBytes(string)",
        "selector": "0x4d7baf06",
        "selectorBytes": [
          77,
          123,
          175,
          6
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envBytes_1",
        "description": "Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\nReverts if the variable was not found or could not be parsed.",
        "declaration": "function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envBytes(string,string)",
        "selector": "0xddc2651b",
        "selectorBytes": [
          221,
          194,
          101,
          27
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envInt_0",
        "description": "Gets the environment variable `name` and parses it as `int256`.\nReverts if the variable was not found or could not be parsed.",
        "declaration": "function envInt(string calldata name) external view returns (int256 value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envInt(string)",
        "selector": "0x892a0c61",
        "selectorBytes": [
          137,
          42,
          12,
          97
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envInt_1",
        "description": "Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\nReverts if the variable was not found or could not be parsed.",
        "declaration": "function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envInt(string,string)",
        "selector": "0x42181150",
        "selectorBytes": [
          66,
          24,
          17,
          80
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envOr_0",
        "description": "Gets the environment variable `name` and parses it as `bool`.\nReverts if the variable could not be parsed.\nReturns `defaultValue` if the variable was not found.",
        "declaration": "function envOr(string calldata name, bool defaultValue) external view returns (bool value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envOr(string,bool)",
        "selector": "0x4777f3cf",
        "selectorBytes": [
          71,
          119,
          243,
          207
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envOr_1",
        "description": "Gets the environment variable `name` and parses it as `uint256`.\nReverts if the variable could not be parsed.\nReturns `defaultValue` if the variable was not found.",
        "declaration": "function envOr(string calldata name, uint256 defaultValue) external view returns (uint256 value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envOr(string,uint256)",
        "selector": "0x5e97348f",
        "selectorBytes": [
          94,
          151,
          52,
          143
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envOr_10",
        "description": "Gets the environment variable `name` and parses it as an array of `address`, delimited by `delim`.\nReverts if the variable could not be parsed.\nReturns `defaultValue` if the variable was not found.",
        "declaration": "function envOr(string calldata name, string calldata delim, address[] calldata defaultValue) external view returns (address[] memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envOr(string,string,address[])",
        "selector": "0xc74e9deb",
        "selectorBytes": [
          199,
          78,
          157,
          235
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envOr_11",
        "description": "Gets the environment variable `name` and parses it as an array of `bytes32`, delimited by `delim`.\nReverts if the variable could not be parsed.\nReturns `defaultValue` if the variable was not found.",
        "declaration": "function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue) external view returns (bytes32[] memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envOr(string,string,bytes32[])",
        "selector": "0x2281f367",
        "selectorBytes": [
          34,
          129,
          243,
          103
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envOr_12",
        "description": "Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\nReverts if the variable could not be parsed.\nReturns `defaultValue` if the variable was not found.",
        "declaration": "function envOr(string calldata name, string calldata delim, string[] calldata defaultValue) external view returns (string[] memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envOr(string,string,string[])",
        "selector": "0x859216bc",
        "selectorBytes": [
          133,
          146,
          22,
          188
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envOr_13",
        "description": "Gets the environment variable `name` and parses it as an array of `bytes`, delimited by `delim`.\nReverts if the variable could not be parsed.\nReturns `defaultValue` if the variable was not found.",
        "declaration": "function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue) external view returns (bytes[] memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envOr(string,string,bytes[])",
        "selector": "0x64bc3e64",
        "selectorBytes": [
          100,
          188,
          62,
          100
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envOr_2",
        "description": "Gets the environment variable `name` and parses it as `int256`.\nReverts if the variable could not be parsed.\nReturns `defaultValue` if the variable was not found.",
        "declaration": "function envOr(string calldata name, int256 defaultValue) external view returns (int256 value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envOr(string,int256)",
        "selector": "0xbbcb713e",
        "selectorBytes": [
          187,
          203,
          113,
          62
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envOr_3",
        "description": "Gets the environment variable `name` and parses it as `address`.\nReverts if the variable could not be parsed.\nReturns `defaultValue` if the variable was not found.",
        "declaration": "function envOr(string calldata name, address defaultValue) external view returns (address value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envOr(string,address)",
        "selector": "0x561fe540",
        "selectorBytes": [
          86,
          31,
          229,
          64
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envOr_4",
        "description": "Gets the environment variable `name` and parses it as `bytes32`.\nReverts if the variable could not be parsed.\nReturns `defaultValue` if the variable was not found.",
        "declaration": "function envOr(string calldata name, bytes32 defaultValue) external view returns (bytes32 value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envOr(string,bytes32)",
        "selector": "0xb4a85892",
        "selectorBytes": [
          180,
          168,
          88,
          146
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envOr_5",
        "description": "Gets the environment variable `name` and parses it as `string`.\nReverts if the variable could not be parsed.\nReturns `defaultValue` if the variable was not found.",
        "declaration": "function envOr(string calldata name, string calldata defaultValue) external view returns (string memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envOr(string,string)",
        "selector": "0xd145736c",
        "selectorBytes": [
          209,
          69,
          115,
          108
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envOr_6",
        "description": "Gets the environment variable `name` and parses it as `bytes`.\nReverts if the variable could not be parsed.\nReturns `defaultValue` if the variable was not found.",
        "declaration": "function envOr(string calldata name, bytes calldata defaultValue) external view returns (bytes memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envOr(string,bytes)",
        "selector": "0xb3e47705",
        "selectorBytes": [
          179,
          228,
          119,
          5
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envOr_7",
        "description": "Gets the environment variable `name` and parses it as an array of `bool`, delimited by `delim`.\nReverts if the variable could not be parsed.\nReturns `defaultValue` if the variable was not found.",
        "declaration": "function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue) external view returns (bool[] memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envOr(string,string,bool[])",
        "selector": "0xeb85e83b",
        "selectorBytes": [
          235,
          133,
          232,
          59
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envOr_8",
        "description": "Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\nReverts if the variable could not be parsed.\nReturns `defaultValue` if the variable was not found.",
        "declaration": "function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue) external view returns (uint256[] memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envOr(string,string,uint256[])",
        "selector": "0x74318528",
        "selectorBytes": [
          116,
          49,
          133,
          40
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envOr_9",
        "description": "Gets the environment variable `name` and parses it as an array of `int256`, delimited by `delim`.\nReverts if the variable could not be parsed.\nReturns `defaultValue` if the variable was not found.",
        "declaration": "function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue) external view returns (int256[] memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envOr(string,string,int256[])",
        "selector": "0x4700d74b",
        "selectorBytes": [
          71,
          0,
          215,
          75
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envString_0",
        "description": "Gets the environment variable `name` and parses it as `string`.\nReverts if the variable was not found or could not be parsed.",
        "declaration": "function envString(string calldata name) external view returns (string memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envString(string)",
        "selector": "0xf877cb19",
        "selectorBytes": [
          248,
          119,
          203,
          25
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envString_1",
        "description": "Gets the environment variable `name` and parses it as an array of `string`, delimited by `delim`.\nReverts if the variable was not found or could not be parsed.",
        "declaration": "function envString(string calldata name, string calldata delim) external view returns (string[] memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envString(string,string)",
        "selector": "0x14b02bc9",
        "selectorBytes": [
          20,
          176,
          43,
          201
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envUint_0",
        "description": "Gets the environment variable `name` and parses it as `uint256`.\nReverts if the variable was not found or could not be parsed.",
        "declaration": "function envUint(string calldata name) external view returns (uint256 value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envUint(string)",
        "selector": "0xc1978d1f",
        "selectorBytes": [
          193,
          151,
          141,
          31
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "envUint_1",
        "description": "Gets the environment variable `name` and parses it as an array of `uint256`, delimited by `delim`.\nReverts if the variable was not found or could not be parsed.",
        "declaration": "function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);",
        "visibility": "external",
        "mutability": "view",
        "signature": "envUint(string,string)",
        "selector": "0xf3dec099",
        "selectorBytes": [
          243,
          222,
          192,
          153
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "etch",
        "description": "Sets an address' code.",
        "declaration": "function etch(address target, bytes calldata newRuntimeBytecode) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "etch(address,bytes)",
        "selector": "0xb4d6c782",
        "selectorBytes": [
          180,
          214,
          199,
          130
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "eth_getLogs",
        "description": "Gets all the logs according to specified filter.",
        "declaration": "function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] memory topics) external returns (EthGetLogs[] memory logs);",
        "visibility": "external",
        "mutability": "",
        "signature": "eth_getLogs(uint256,uint256,address,bytes32[])",
        "selector": "0x35e1349b",
        "selectorBytes": [
          53,
          225,
          52,
          155
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "exists",
        "description": "Returns true if the given path points to an existing entity, else returns false.",
        "declaration": "function exists(string calldata path) external returns (bool result);",
        "visibility": "external",
        "mutability": "",
        "signature": "exists(string)",
        "selector": "0x261a323e",
        "selectorBytes": [
          38,
          26,
          50,
          62
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "expectCallMinGas_0",
        "description": "Expect a call to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.",
        "declaration": "function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectCallMinGas(address,uint256,uint64,bytes)",
        "selector": "0x08e4e116",
        "selectorBytes": [
          8,
          228,
          225,
          22
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectCallMinGas_1",
        "description": "Expect given number of calls to an address with the specified `msg.value` and calldata, and a *minimum* amount of gas.",
        "declaration": "function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectCallMinGas(address,uint256,uint64,bytes,uint64)",
        "selector": "0xe13a1834",
        "selectorBytes": [
          225,
          58,
          24,
          52
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectCall_0",
        "description": "Expects a call to an address with the specified calldata.\nCalldata can either be a strict or a partial match.",
        "declaration": "function expectCall(address callee, bytes calldata data) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectCall(address,bytes)",
        "selector": "0xbd6af434",
        "selectorBytes": [
          189,
          106,
          244,
          52
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectCall_1",
        "description": "Expects given number of calls to an address with the specified calldata.",
        "declaration": "function expectCall(address callee, bytes calldata data, uint64 count) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectCall(address,bytes,uint64)",
        "selector": "0xc1adbbff",
        "selectorBytes": [
          193,
          173,
          187,
          255
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectCall_2",
        "description": "Expects a call to an address with the specified `msg.value` and calldata.",
        "declaration": "function expectCall(address callee, uint256 msgValue, bytes calldata data) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectCall(address,uint256,bytes)",
        "selector": "0xf30c7ba3",
        "selectorBytes": [
          243,
          12,
          123,
          163
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectCall_3",
        "description": "Expects given number of calls to an address with the specified `msg.value` and calldata.",
        "declaration": "function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectCall(address,uint256,bytes,uint64)",
        "selector": "0xa2b1a1ae",
        "selectorBytes": [
          162,
          177,
          161,
          174
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectCall_4",
        "description": "Expect a call to an address with the specified `msg.value`, gas, and calldata.",
        "declaration": "function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectCall(address,uint256,uint64,bytes)",
        "selector": "0x23361207",
        "selectorBytes": [
          35,
          54,
          18,
          7
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectCall_5",
        "description": "Expects given number of calls to an address with the specified `msg.value`, gas, and calldata.",
        "declaration": "function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectCall(address,uint256,uint64,bytes,uint64)",
        "selector": "0x65b7b7cc",
        "selectorBytes": [
          101,
          183,
          183,
          204
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectEmit_0",
        "description": "Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData.).\nCall this function, then emit an event, then call a function. Internally after the call, we check if\nlogs were emitted in the expected order with the expected topics and data (as specified by the booleans).",
        "declaration": "function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectEmit(bool,bool,bool,bool)",
        "selector": "0x491cc7c2",
        "selectorBytes": [
          73,
          28,
          199,
          194
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectEmit_1",
        "description": "Same as the previous method, but also checks supplied address against emitting contract.",
        "declaration": "function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectEmit(bool,bool,bool,bool,address)",
        "selector": "0x81bad6f3",
        "selectorBytes": [
          129,
          186,
          214,
          243
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectEmit_2",
        "description": "Prepare an expected log with all topic and data checks enabled.\nCall this function, then emit an event, then call a function. Internally after the call, we check if\nlogs were emitted in the expected order with the expected topics and data.",
        "declaration": "function expectEmit() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectEmit()",
        "selector": "0x440ed10d",
        "selectorBytes": [
          68,
          14,
          209,
          13
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectEmit_3",
        "description": "Same as the previous method, but also checks supplied address against emitting contract.",
        "declaration": "function expectEmit(address emitter) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectEmit(address)",
        "selector": "0x86b9620d",
        "selectorBytes": [
          134,
          185,
          98,
          13
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectRevert_0",
        "description": "Expects an error on next call with any revert data.",
        "declaration": "function expectRevert() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectRevert()",
        "selector": "0xf4844814",
        "selectorBytes": [
          244,
          132,
          72,
          20
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectRevert_1",
        "description": "Expects an error on next call that starts with the revert data.",
        "declaration": "function expectRevert(bytes4 revertData) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectRevert(bytes4)",
        "selector": "0xc31eb0e0",
        "selectorBytes": [
          195,
          30,
          176,
          224
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectRevert_2",
        "description": "Expects an error on next call that exactly matches the revert data.",
        "declaration": "function expectRevert(bytes calldata revertData) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectRevert(bytes)",
        "selector": "0xf28dceb3",
        "selectorBytes": [
          242,
          141,
          206,
          179
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectSafeMemory",
        "description": "Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other\nmemory is written to, the test will fail. Can be called multiple times to add more ranges to the set.",
        "declaration": "function expectSafeMemory(uint64 min, uint64 max) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectSafeMemory(uint64,uint64)",
        "selector": "0x6d016688",
        "selectorBytes": [
          109,
          1,
          102,
          136
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "expectSafeMemoryCall",
        "description": "Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext.\nIf any other memory is written to, the test will fail. Can be called multiple times to add more ranges\nto the set.",
        "declaration": "function expectSafeMemoryCall(uint64 min, uint64 max) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "expectSafeMemoryCall(uint64,uint64)",
        "selector": "0x05838bf4",
        "selectorBytes": [
          5,
          131,
          139,
          244
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "fee",
        "description": "Sets `block.basefee`.",
        "declaration": "function fee(uint256 newBasefee) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "fee(uint256)",
        "selector": "0x39b37ab0",
        "selectorBytes": [
          57,
          179,
          122,
          176
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "ffi",
        "description": "Performs a foreign function call via the terminal.",
        "declaration": "function ffi(string[] calldata commandInput) external returns (bytes memory result);",
        "visibility": "external",
        "mutability": "",
        "signature": "ffi(string[])",
        "selector": "0x89160467",
        "selectorBytes": [
          137,
          22,
          4,
          103
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "fsMetadata",
        "description": "Given a path, query the file system to get information about a file, directory, etc.",
        "declaration": "function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);",
        "visibility": "external",
        "mutability": "view",
        "signature": "fsMetadata(string)",
        "selector": "0xaf368a08",
        "selectorBytes": [
          175,
          54,
          138,
          8
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "getBlobBaseFee",
        "description": "Gets the current `block.blobbasefee`.\nYou should use this instead of `block.blobbasefee` if you use `vm.blobBaseFee`, as `block.blobbasefee` is assumed to be constant across a transaction,\nand as a result will get optimized out by the compiler.\nSee https://github.com/foundry-rs/foundry/issues/6180",
        "declaration": "function getBlobBaseFee() external view returns (uint256 blobBaseFee);",
        "visibility": "external",
        "mutability": "view",
        "signature": "getBlobBaseFee()",
        "selector": "0x1f6d6ef7",
        "selectorBytes": [
          31,
          109,
          110,
          247
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "getBlockNumber",
        "description": "Gets the current `block.number`.\nYou should use this instead of `block.number` if you use `vm.roll`, as `block.number` is assumed to be constant across a transaction,\nand as a result will get optimized out by the compiler.\nSee https://github.com/foundry-rs/foundry/issues/6180",
        "declaration": "function getBlockNumber() external view returns (uint256 height);",
        "visibility": "external",
        "mutability": "view",
        "signature": "getBlockNumber()",
        "selector": "0x42cbb15c",
        "selectorBytes": [
          66,
          203,
          177,
          92
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "getBlockTimestamp",
        "description": "Gets the current `block.timestamp`.\nYou should use this instead of `block.timestamp` if you use `vm.warp`, as `block.timestamp` is assumed to be constant across a transaction,\nand as a result will get optimized out by the compiler.\nSee https://github.com/foundry-rs/foundry/issues/6180",
        "declaration": "function getBlockTimestamp() external view returns (uint256 timestamp);",
        "visibility": "external",
        "mutability": "view",
        "signature": "getBlockTimestamp()",
        "selector": "0x796b89b9",
        "selectorBytes": [
          121,
          107,
          137,
          185
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "getCode",
        "description": "Gets the creation bytecode from an artifact file. Takes in the relative path to the json file or the path to the\nartifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.",
        "declaration": "function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);",
        "visibility": "external",
        "mutability": "view",
        "signature": "getCode(string)",
        "selector": "0x8d1cc925",
        "selectorBytes": [
          141,
          28,
          201,
          37
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "getDeployedCode",
        "description": "Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file or the path to the\nartifact in the form of <path>:<contract>:<version> where <contract> and <version> parts are optional.",
        "declaration": "function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);",
        "visibility": "external",
        "mutability": "view",
        "signature": "getDeployedCode(string)",
        "selector": "0x3ebf73b4",
        "selectorBytes": [
          62,
          191,
          115,
          180
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "getLabel",
        "description": "Gets the label for the specified address.",
        "declaration": "function getLabel(address account) external view returns (string memory currentLabel);",
        "visibility": "external",
        "mutability": "view",
        "signature": "getLabel(address)",
        "selector": "0x28a249b0",
        "selectorBytes": [
          40,
          162,
          73,
          176
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "getMappingKeyAndParentOf",
        "description": "Gets the map key and parent of a mapping at a given slot, for a given address.",
        "declaration": "function getMappingKeyAndParentOf(address target, bytes32 elementSlot) external returns (bool found, bytes32 key, bytes32 parent);",
        "visibility": "external",
        "mutability": "",
        "signature": "getMappingKeyAndParentOf(address,bytes32)",
        "selector": "0x876e24e6",
        "selectorBytes": [
          135,
          110,
          36,
          230
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "getMappingLength",
        "description": "Gets the number of elements in the mapping at the given slot, for a given address.",
        "declaration": "function getMappingLength(address target, bytes32 mappingSlot) external returns (uint256 length);",
        "visibility": "external",
        "mutability": "",
        "signature": "getMappingLength(address,bytes32)",
        "selector": "0x2f2fd63f",
        "selectorBytes": [
          47,
          47,
          214,
          63
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "getMappingSlotAt",
        "description": "Gets the elements at index idx of the mapping at the given slot, for a given address. The\nindex must be less than the length of the mapping (i.e. the number of keys in the mapping).",
        "declaration": "function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) external returns (bytes32 value);",
        "visibility": "external",
        "mutability": "",
        "signature": "getMappingSlotAt(address,bytes32,uint256)",
        "selector": "0xebc73ab4",
        "selectorBytes": [
          235,
          199,
          58,
          180
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "getNonce_0",
        "description": "Gets the nonce of an account.",
        "declaration": "function getNonce(address account) external view returns (uint64 nonce);",
        "visibility": "external",
        "mutability": "view",
        "signature": "getNonce(address)",
        "selector": "0x2d0335ab",
        "selectorBytes": [
          45,
          3,
          53,
          171
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "getNonce_1",
        "description": "Get a `Wallet`'s nonce.",
        "declaration": "function getNonce(Wallet calldata wallet) external returns (uint64 nonce);",
        "visibility": "external",
        "mutability": "",
        "signature": "getNonce((address,uint256,uint256,uint256))",
        "selector": "0xa5748aad",
        "selectorBytes": [
          165,
          116,
          138,
          173
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "getRecordedLogs",
        "description": "Gets all the recorded logs.",
        "declaration": "function getRecordedLogs() external returns (Log[] memory logs);",
        "visibility": "external",
        "mutability": "",
        "signature": "getRecordedLogs()",
        "selector": "0x191553a4",
        "selectorBytes": [
          25,
          21,
          83,
          164
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "indexOf",
        "description": "Returns the index of the first occurrence of a `key` in an `input` string.\nReturns `NOT_FOUND` (i.e. `type(uint256).max`) if the `key` is not found.\nReturns 0 in case of an empty `key`.",
        "declaration": "function indexOf(string calldata input, string calldata key) external pure returns (uint256);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "indexOf(string,string)",
        "selector": "0x8a0807b7",
        "selectorBytes": [
          138,
          8,
          7,
          183
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "isContext",
        "description": "Returns true if `forge` command was executed in given context.",
        "declaration": "function isContext(ForgeContext context) external view returns (bool result);",
        "visibility": "external",
        "mutability": "view",
        "signature": "isContext(uint8)",
        "selector": "0x64af255d",
        "selectorBytes": [
          100,
          175,
          37,
          93
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "isDir",
        "description": "Returns true if the path exists on disk and is pointing at a directory, else returns false.",
        "declaration": "function isDir(string calldata path) external returns (bool result);",
        "visibility": "external",
        "mutability": "",
        "signature": "isDir(string)",
        "selector": "0x7d15d019",
        "selectorBytes": [
          125,
          21,
          208,
          25
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "isFile",
        "description": "Returns true if the path exists on disk and is pointing at a regular file, else returns false.",
        "declaration": "function isFile(string calldata path) external returns (bool result);",
        "visibility": "external",
        "mutability": "",
        "signature": "isFile(string)",
        "selector": "0xe0eb04d4",
        "selectorBytes": [
          224,
          235,
          4,
          212
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "isPersistent",
        "description": "Returns true if the account is marked as persistent.",
        "declaration": "function isPersistent(address account) external view returns (bool persistent);",
        "visibility": "external",
        "mutability": "view",
        "signature": "isPersistent(address)",
        "selector": "0xd92d8efd",
        "selectorBytes": [
          217,
          45,
          142,
          253
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "keyExists",
        "description": "Checks if `key` exists in a JSON object\n`keyExists` is being deprecated in favor of `keyExistsJson`. It will be removed in future versions.",
        "declaration": "function keyExists(string calldata json, string calldata key) external view returns (bool);",
        "visibility": "external",
        "mutability": "view",
        "signature": "keyExists(string,string)",
        "selector": "0x528a683c",
        "selectorBytes": [
          82,
          138,
          104,
          60
        ]
      },
      "group": "json",
      "status": "deprecated",
      "safety": "safe"
    },
    {
      "func": {
        "id": "keyExistsJson",
        "description": "Checks if `key` exists in a JSON object.",
        "declaration": "function keyExistsJson(string calldata json, string calldata key) external view returns (bool);",
        "visibility": "external",
        "mutability": "view",
        "signature": "keyExistsJson(string,string)",
        "selector": "0xdb4235f6",
        "selectorBytes": [
          219,
          66,
          53,
          246
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "keyExistsToml",
        "description": "Checks if `key` exists in a TOML table.",
        "declaration": "function keyExistsToml(string calldata toml, string calldata key) external view returns (bool);",
        "visibility": "external",
        "mutability": "view",
        "signature": "keyExistsToml(string,string)",
        "selector": "0x600903ad",
        "selectorBytes": [
          96,
          9,
          3,
          173
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "label",
        "description": "Labels an address in call traces.",
        "declaration": "function label(address account, string calldata newLabel) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "label(address,string)",
        "selector": "0xc657c718",
        "selectorBytes": [
          198,
          87,
          199,
          24
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "lastCallGas",
        "description": "Gets the gas used in the last call.",
        "declaration": "function lastCallGas() external view returns (Gas memory gas);",
        "visibility": "external",
        "mutability": "view",
        "signature": "lastCallGas()",
        "selector": "0x2b589b28",
        "selectorBytes": [
          43,
          88,
          155,
          40
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "load",
        "description": "Loads a storage slot from an address.",
        "declaration": "function load(address target, bytes32 slot) external view returns (bytes32 data);",
        "visibility": "external",
        "mutability": "view",
        "signature": "load(address,bytes32)",
        "selector": "0x667f9d70",
        "selectorBytes": [
          102,
          127,
          157,
          112
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "loadAllocs",
        "description": "Load a genesis JSON file's `allocs` into the in-memory revm state.",
        "declaration": "function loadAllocs(string calldata pathToAllocsJson) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "loadAllocs(string)",
        "selector": "0xb3a056d7",
        "selectorBytes": [
          179,
          160,
          86,
          215
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "makePersistent_0",
        "description": "Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\nMeaning, changes made to the state of this account will be kept when switching forks.",
        "declaration": "function makePersistent(address account) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "makePersistent(address)",
        "selector": "0x57e22dde",
        "selectorBytes": [
          87,
          226,
          45,
          222
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "makePersistent_1",
        "description": "See `makePersistent(address)`.",
        "declaration": "function makePersistent(address account0, address account1) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "makePersistent(address,address)",
        "selector": "0x4074e0a8",
        "selectorBytes": [
          64,
          116,
          224,
          168
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "makePersistent_2",
        "description": "See `makePersistent(address)`.",
        "declaration": "function makePersistent(address account0, address account1, address account2) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "makePersistent(address,address,address)",
        "selector": "0xefb77a75",
        "selectorBytes": [
          239,
          183,
          122,
          117
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "makePersistent_3",
        "description": "See `makePersistent(address)`.",
        "declaration": "function makePersistent(address[] calldata accounts) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "makePersistent(address[])",
        "selector": "0x1d9e269e",
        "selectorBytes": [
          29,
          158,
          38,
          158
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "mockCallRevert_0",
        "description": "Reverts a call to an address with specified revert data.",
        "declaration": "function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "mockCallRevert(address,bytes,bytes)",
        "selector": "0xdbaad147",
        "selectorBytes": [
          219,
          170,
          209,
          71
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "mockCallRevert_1",
        "description": "Reverts a call to an address with a specific `msg.value`, with specified revert data.",
        "declaration": "function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "mockCallRevert(address,uint256,bytes,bytes)",
        "selector": "0xd23cd037",
        "selectorBytes": [
          210,
          60,
          208,
          55
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "mockCall_0",
        "description": "Mocks a call to an address, returning specified data.\nCalldata can either be strict or a partial match, e.g. if you only\npass a Solidity selector to the expected calldata, then the entire Solidity\nfunction will be mocked.",
        "declaration": "function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "mockCall(address,bytes,bytes)",
        "selector": "0xb96213e4",
        "selectorBytes": [
          185,
          98,
          19,
          228
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "mockCall_1",
        "description": "Mocks a call to an address with a specific `msg.value`, returning specified data.\nCalldata match takes precedence over `msg.value` in case of ambiguity.",
        "declaration": "function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "mockCall(address,uint256,bytes,bytes)",
        "selector": "0x81409b91",
        "selectorBytes": [
          129,
          64,
          155,
          145
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "parseAddress",
        "description": "Parses the given `string` into an `address`.",
        "declaration": "function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseAddress(string)",
        "selector": "0xc6ce059d",
        "selectorBytes": [
          198,
          206,
          5,
          157
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseBool",
        "description": "Parses the given `string` into a `bool`.",
        "declaration": "function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseBool(string)",
        "selector": "0x974ef924",
        "selectorBytes": [
          151,
          78,
          249,
          36
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseBytes",
        "description": "Parses the given `string` into `bytes`.",
        "declaration": "function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseBytes(string)",
        "selector": "0x8f5d232d",
        "selectorBytes": [
          143,
          93,
          35,
          45
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseBytes32",
        "description": "Parses the given `string` into a `bytes32`.",
        "declaration": "function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseBytes32(string)",
        "selector": "0x087e6e81",
        "selectorBytes": [
          8,
          126,
          110,
          129
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseInt",
        "description": "Parses the given `string` into a `int256`.",
        "declaration": "function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseInt(string)",
        "selector": "0x42346c5e",
        "selectorBytes": [
          66,
          52,
          108,
          94
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJsonAddress",
        "description": "Parses a string of JSON data at `key` and coerces it to `address`.",
        "declaration": "function parseJsonAddress(string calldata json, string calldata key) external pure returns (address);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJsonAddress(string,string)",
        "selector": "0x1e19e657",
        "selectorBytes": [
          30,
          25,
          230,
          87
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJsonAddressArray",
        "description": "Parses a string of JSON data at `key` and coerces it to `address[]`.",
        "declaration": "function parseJsonAddressArray(string calldata json, string calldata key) external pure returns (address[] memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJsonAddressArray(string,string)",
        "selector": "0x2fce7883",
        "selectorBytes": [
          47,
          206,
          120,
          131
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJsonBool",
        "description": "Parses a string of JSON data at `key` and coerces it to `bool`.",
        "declaration": "function parseJsonBool(string calldata json, string calldata key) external pure returns (bool);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJsonBool(string,string)",
        "selector": "0x9f86dc91",
        "selectorBytes": [
          159,
          134,
          220,
          145
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJsonBoolArray",
        "description": "Parses a string of JSON data at `key` and coerces it to `bool[]`.",
        "declaration": "function parseJsonBoolArray(string calldata json, string calldata key) external pure returns (bool[] memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJsonBoolArray(string,string)",
        "selector": "0x91f3b94f",
        "selectorBytes": [
          145,
          243,
          185,
          79
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJsonBytes",
        "description": "Parses a string of JSON data at `key` and coerces it to `bytes`.",
        "declaration": "function parseJsonBytes(string calldata json, string calldata key) external pure returns (bytes memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJsonBytes(string,string)",
        "selector": "0xfd921be8",
        "selectorBytes": [
          253,
          146,
          27,
          232
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJsonBytes32",
        "description": "Parses a string of JSON data at `key` and coerces it to `bytes32`.",
        "declaration": "function parseJsonBytes32(string calldata json, string calldata key) external pure returns (bytes32);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJsonBytes32(string,string)",
        "selector": "0x1777e59d",
        "selectorBytes": [
          23,
          119,
          229,
          157
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJsonBytes32Array",
        "description": "Parses a string of JSON data at `key` and coerces it to `bytes32[]`.",
        "declaration": "function parseJsonBytes32Array(string calldata json, string calldata key) external pure returns (bytes32[] memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJsonBytes32Array(string,string)",
        "selector": "0x91c75bc3",
        "selectorBytes": [
          145,
          199,
          91,
          195
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJsonBytesArray",
        "description": "Parses a string of JSON data at `key` and coerces it to `bytes[]`.",
        "declaration": "function parseJsonBytesArray(string calldata json, string calldata key) external pure returns (bytes[] memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJsonBytesArray(string,string)",
        "selector": "0x6631aa99",
        "selectorBytes": [
          102,
          49,
          170,
          153
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJsonInt",
        "description": "Parses a string of JSON data at `key` and coerces it to `int256`.",
        "declaration": "function parseJsonInt(string calldata json, string calldata key) external pure returns (int256);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJsonInt(string,string)",
        "selector": "0x7b048ccd",
        "selectorBytes": [
          123,
          4,
          140,
          205
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJsonIntArray",
        "description": "Parses a string of JSON data at `key` and coerces it to `int256[]`.",
        "declaration": "function parseJsonIntArray(string calldata json, string calldata key) external pure returns (int256[] memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJsonIntArray(string,string)",
        "selector": "0x9983c28a",
        "selectorBytes": [
          153,
          131,
          194,
          138
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJsonKeys",
        "description": "Returns an array of all the keys in a JSON object.",
        "declaration": "function parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJsonKeys(string,string)",
        "selector": "0x213e4198",
        "selectorBytes": [
          33,
          62,
          65,
          152
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJsonString",
        "description": "Parses a string of JSON data at `key` and coerces it to `string`.",
        "declaration": "function parseJsonString(string calldata json, string calldata key) external pure returns (string memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJsonString(string,string)",
        "selector": "0x49c4fac8",
        "selectorBytes": [
          73,
          196,
          250,
          200
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJsonStringArray",
        "description": "Parses a string of JSON data at `key` and coerces it to `string[]`.",
        "declaration": "function parseJsonStringArray(string calldata json, string calldata key) external pure returns (string[] memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJsonStringArray(string,string)",
        "selector": "0x498fdcf4",
        "selectorBytes": [
          73,
          143,
          220,
          244
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJsonUint",
        "description": "Parses a string of JSON data at `key` and coerces it to `uint256`.",
        "declaration": "function parseJsonUint(string calldata json, string calldata key) external pure returns (uint256);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJsonUint(string,string)",
        "selector": "0xaddde2b6",
        "selectorBytes": [
          173,
          221,
          226,
          182
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJsonUintArray",
        "description": "Parses a string of JSON data at `key` and coerces it to `uint256[]`.",
        "declaration": "function parseJsonUintArray(string calldata json, string calldata key) external pure returns (uint256[] memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJsonUintArray(string,string)",
        "selector": "0x522074ab",
        "selectorBytes": [
          82,
          32,
          116,
          171
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJson_0",
        "description": "ABI-encodes a JSON object.",
        "declaration": "function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJson(string)",
        "selector": "0x6a82600a",
        "selectorBytes": [
          106,
          130,
          96,
          10
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseJson_1",
        "description": "ABI-encodes a JSON object at `key`.",
        "declaration": "function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseJson(string,string)",
        "selector": "0x85940ef1",
        "selectorBytes": [
          133,
          148,
          14,
          241
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseTomlAddress",
        "description": "Parses a string of TOML data at `key` and coerces it to `address`.",
        "declaration": "function parseTomlAddress(string calldata toml, string calldata key) external pure returns (address);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseTomlAddress(string,string)",
        "selector": "0x65e7c844",
        "selectorBytes": [
          101,
          231,
          200,
          68
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseTomlAddressArray",
        "description": "Parses a string of TOML data at `key` and coerces it to `address[]`.",
        "declaration": "function parseTomlAddressArray(string calldata toml, string calldata key) external pure returns (address[] memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseTomlAddressArray(string,string)",
        "selector": "0x65c428e7",
        "selectorBytes": [
          101,
          196,
          40,
          231
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseTomlBool",
        "description": "Parses a string of TOML data at `key` and coerces it to `bool`.",
        "declaration": "function parseTomlBool(string calldata toml, string calldata key) external pure returns (bool);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseTomlBool(string,string)",
        "selector": "0xd30dced6",
        "selectorBytes": [
          211,
          13,
          206,
          214
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseTomlBoolArray",
        "description": "Parses a string of TOML data at `key` and coerces it to `bool[]`.",
        "declaration": "function parseTomlBoolArray(string calldata toml, string calldata key) external pure returns (bool[] memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseTomlBoolArray(string,string)",
        "selector": "0x127cfe9a",
        "selectorBytes": [
          18,
          124,
          254,
          154
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseTomlBytes",
        "description": "Parses a string of TOML data at `key` and coerces it to `bytes`.",
        "declaration": "function parseTomlBytes(string calldata toml, string calldata key) external pure returns (bytes memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseTomlBytes(string,string)",
        "selector": "0xd77bfdb9",
        "selectorBytes": [
          215,
          123,
          253,
          185
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseTomlBytes32",
        "description": "Parses a string of TOML data at `key` and coerces it to `bytes32`.",
        "declaration": "function parseTomlBytes32(string calldata toml, string calldata key) external pure returns (bytes32);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseTomlBytes32(string,string)",
        "selector": "0x8e214810",
        "selectorBytes": [
          142,
          33,
          72,
          16
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseTomlBytes32Array",
        "description": "Parses a string of TOML data at `key` and coerces it to `bytes32[]`.",
        "declaration": "function parseTomlBytes32Array(string calldata toml, string calldata key) external pure returns (bytes32[] memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseTomlBytes32Array(string,string)",
        "selector": "0x3e716f81",
        "selectorBytes": [
          62,
          113,
          111,
          129
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseTomlBytesArray",
        "description": "Parses a string of TOML data at `key` and coerces it to `bytes[]`.",
        "declaration": "function parseTomlBytesArray(string calldata toml, string calldata key) external pure returns (bytes[] memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseTomlBytesArray(string,string)",
        "selector": "0xb197c247",
        "selectorBytes": [
          177,
          151,
          194,
          71
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseTomlInt",
        "description": "Parses a string of TOML data at `key` and coerces it to `int256`.",
        "declaration": "function parseTomlInt(string calldata toml, string calldata key) external pure returns (int256);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseTomlInt(string,string)",
        "selector": "0xc1350739",
        "selectorBytes": [
          193,
          53,
          7,
          57
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseTomlIntArray",
        "description": "Parses a string of TOML data at `key` and coerces it to `int256[]`.",
        "declaration": "function parseTomlIntArray(string calldata toml, string calldata key) external pure returns (int256[] memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseTomlIntArray(string,string)",
        "selector": "0xd3522ae6",
        "selectorBytes": [
          211,
          82,
          42,
          230
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseTomlKeys",
        "description": "Returns an array of all the keys in a TOML table.",
        "declaration": "function parseTomlKeys(string calldata toml, string calldata key) external pure returns (string[] memory keys);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseTomlKeys(string,string)",
        "selector": "0x812a44b2",
        "selectorBytes": [
          129,
          42,
          68,
          178
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseTomlString",
        "description": "Parses a string of TOML data at `key` and coerces it to `string`.",
        "declaration": "function parseTomlString(string calldata toml, string calldata key) external pure returns (string memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseTomlString(string,string)",
        "selector": "0x8bb8dd43",
        "selectorBytes": [
          139,
          184,
          221,
          67
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseTomlStringArray",
        "description": "Parses a string of TOML data at `key` and coerces it to `string[]`.",
        "declaration": "function parseTomlStringArray(string calldata toml, string calldata key) external pure returns (string[] memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseTomlStringArray(string,string)",
        "selector": "0x9f629281",
        "selectorBytes": [
          159,
          98,
          146,
          129
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseTomlUint",
        "description": "Parses a string of TOML data at `key` and coerces it to `uint256`.",
        "declaration": "function parseTomlUint(string calldata toml, string calldata key) external pure returns (uint256);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseTomlUint(string,string)",
        "selector": "0xcc7b0487",
        "selectorBytes": [
          204,
          123,
          4,
          135
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseTomlUintArray",
        "description": "Parses a string of TOML data at `key` and coerces it to `uint256[]`.",
        "declaration": "function parseTomlUintArray(string calldata toml, string calldata key) external pure returns (uint256[] memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseTomlUintArray(string,string)",
        "selector": "0xb5df27c8",
        "selectorBytes": [
          181,
          223,
          39,
          200
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseToml_0",
        "description": "ABI-encodes a TOML table.",
        "declaration": "function parseToml(string calldata toml) external pure returns (bytes memory abiEncodedData);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseToml(string)",
        "selector": "0x592151f0",
        "selectorBytes": [
          89,
          33,
          81,
          240
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseToml_1",
        "description": "ABI-encodes a TOML table at `key`.",
        "declaration": "function parseToml(string calldata toml, string calldata key) external pure returns (bytes memory abiEncodedData);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseToml(string,string)",
        "selector": "0x37736e08",
        "selectorBytes": [
          55,
          115,
          110,
          8
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "parseUint",
        "description": "Parses the given `string` into a `uint256`.",
        "declaration": "function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "parseUint(string)",
        "selector": "0xfa91454d",
        "selectorBytes": [
          250,
          145,
          69,
          77
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "pauseGasMetering",
        "description": "Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.",
        "declaration": "function pauseGasMetering() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "pauseGasMetering()",
        "selector": "0xd1a5b36f",
        "selectorBytes": [
          209,
          165,
          179,
          111
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "prank_0",
        "description": "Sets the *next* call's `msg.sender` to be the input address.",
        "declaration": "function prank(address msgSender) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "prank(address)",
        "selector": "0xca669fa7",
        "selectorBytes": [
          202,
          102,
          159,
          167
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "prank_1",
        "description": "Sets the *next* call's `msg.sender` to be the input address, and the `tx.origin` to be the second input.",
        "declaration": "function prank(address msgSender, address txOrigin) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "prank(address,address)",
        "selector": "0x47e50cce",
        "selectorBytes": [
          71,
          229,
          12,
          206
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "prevrandao",
        "description": "Sets `block.prevrandao`.\nNot available on EVM versions before Paris. Use `difficulty` instead.\nIf used on unsupported EVM versions it will revert.",
        "declaration": "function prevrandao(bytes32 newPrevrandao) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "prevrandao(bytes32)",
        "selector": "0x3b925549",
        "selectorBytes": [
          59,
          146,
          85,
          73
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "projectRoot",
        "description": "Get the path of the current project root.",
        "declaration": "function projectRoot() external view returns (string memory path);",
        "visibility": "external",
        "mutability": "view",
        "signature": "projectRoot()",
        "selector": "0xd930a0e6",
        "selectorBytes": [
          217,
          48,
          160,
          230
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "prompt",
        "description": "Prompts the user for a string value in the terminal.",
        "declaration": "function prompt(string calldata promptText) external returns (string memory input);",
        "visibility": "external",
        "mutability": "",
        "signature": "prompt(string)",
        "selector": "0x47eaf474",
        "selectorBytes": [
          71,
          234,
          244,
          116
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "promptAddress",
        "description": "Prompts the user for an address in the terminal.",
        "declaration": "function promptAddress(string calldata promptText) external returns (address);",
        "visibility": "external",
        "mutability": "",
        "signature": "promptAddress(string)",
        "selector": "0x62ee05f4",
        "selectorBytes": [
          98,
          238,
          5,
          244
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "promptSecret",
        "description": "Prompts the user for a hidden string value in the terminal.",
        "declaration": "function promptSecret(string calldata promptText) external returns (string memory input);",
        "visibility": "external",
        "mutability": "",
        "signature": "promptSecret(string)",
        "selector": "0x1e279d41",
        "selectorBytes": [
          30,
          39,
          157,
          65
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "promptUint",
        "description": "Prompts the user for uint256 in the terminal.",
        "declaration": "function promptUint(string calldata promptText) external returns (uint256);",
        "visibility": "external",
        "mutability": "",
        "signature": "promptUint(string)",
        "selector": "0x652fd489",
        "selectorBytes": [
          101,
          47,
          212,
          137
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "readCallers",
        "description": "Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification.",
        "declaration": "function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);",
        "visibility": "external",
        "mutability": "",
        "signature": "readCallers()",
        "selector": "0x4ad0bac9",
        "selectorBytes": [
          74,
          208,
          186,
          201
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "readDir_0",
        "description": "Reads the directory at the given path recursively, up to `maxDepth`.\n`maxDepth` defaults to 1, meaning only the direct children of the given directory will be returned.\nFollows symbolic links if `followLinks` is true.",
        "declaration": "function readDir(string calldata path) external view returns (DirEntry[] memory entries);",
        "visibility": "external",
        "mutability": "view",
        "signature": "readDir(string)",
        "selector": "0xc4bc59e0",
        "selectorBytes": [
          196,
          188,
          89,
          224
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "readDir_1",
        "description": "See `readDir(string)`.",
        "declaration": "function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);",
        "visibility": "external",
        "mutability": "view",
        "signature": "readDir(string,uint64)",
        "selector": "0x1497876c",
        "selectorBytes": [
          20,
          151,
          135,
          108
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "readDir_2",
        "description": "See `readDir(string)`.",
        "declaration": "function readDir(string calldata path, uint64 maxDepth, bool followLinks) external view returns (DirEntry[] memory entries);",
        "visibility": "external",
        "mutability": "view",
        "signature": "readDir(string,uint64,bool)",
        "selector": "0x8102d70d",
        "selectorBytes": [
          129,
          2,
          215,
          13
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "readFile",
        "description": "Reads the entire content of file to string. `path` is relative to the project root.",
        "declaration": "function readFile(string calldata path) external view returns (string memory data);",
        "visibility": "external",
        "mutability": "view",
        "signature": "readFile(string)",
        "selector": "0x60f9bb11",
        "selectorBytes": [
          96,
          249,
          187,
          17
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "readFileBinary",
        "description": "Reads the entire content of file as binary. `path` is relative to the project root.",
        "declaration": "function readFileBinary(string calldata path) external view returns (bytes memory data);",
        "visibility": "external",
        "mutability": "view",
        "signature": "readFileBinary(string)",
        "selector": "0x16ed7bc4",
        "selectorBytes": [
          22,
          237,
          123,
          196
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "readLine",
        "description": "Reads next line of file to string.",
        "declaration": "function readLine(string calldata path) external view returns (string memory line);",
        "visibility": "external",
        "mutability": "view",
        "signature": "readLine(string)",
        "selector": "0x70f55728",
        "selectorBytes": [
          112,
          245,
          87,
          40
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "readLink",
        "description": "Reads a symbolic link, returning the path that the link points to.\nThis cheatcode will revert in the following situations, but is not limited to just these cases:\n- `path` is not a symbolic link.\n- `path` does not exist.",
        "declaration": "function readLink(string calldata linkPath) external view returns (string memory targetPath);",
        "visibility": "external",
        "mutability": "view",
        "signature": "readLink(string)",
        "selector": "0x9f5684a2",
        "selectorBytes": [
          159,
          86,
          132,
          162
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "record",
        "description": "Records all storage reads and writes.",
        "declaration": "function record() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "record()",
        "selector": "0x266cf109",
        "selectorBytes": [
          38,
          108,
          241,
          9
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "recordLogs",
        "description": "Record all the transaction logs.",
        "declaration": "function recordLogs() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "recordLogs()",
        "selector": "0x41af2f52",
        "selectorBytes": [
          65,
          175,
          47,
          82
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "rememberKey",
        "description": "Adds a private key to the local forge wallet and returns the address.",
        "declaration": "function rememberKey(uint256 privateKey) external returns (address keyAddr);",
        "visibility": "external",
        "mutability": "",
        "signature": "rememberKey(uint256)",
        "selector": "0x22100064",
        "selectorBytes": [
          34,
          16,
          0,
          100
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "removeDir",
        "description": "Removes a directory at the provided path.\nThis cheatcode will revert in the following situations, but is not limited to just these cases:\n- `path` doesn't exist.\n- `path` isn't a directory.\n- User lacks permissions to modify `path`.\n- The directory is not empty and `recursive` is false.\n`path` is relative to the project root.",
        "declaration": "function removeDir(string calldata path, bool recursive) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "removeDir(string,bool)",
        "selector": "0x45c62011",
        "selectorBytes": [
          69,
          198,
          32,
          17
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "removeFile",
        "description": "Removes a file from the filesystem.\nThis cheatcode will revert in the following situations, but is not limited to just these cases:\n- `path` points to a directory.\n- The file doesn't exist.\n- The user lacks permissions to remove the file.\n`path` is relative to the project root.",
        "declaration": "function removeFile(string calldata path) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "removeFile(string)",
        "selector": "0xf1afe04d",
        "selectorBytes": [
          241,
          175,
          224,
          77
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "replace",
        "description": "Replaces occurrences of `from` in the given `string` with `to`.",
        "declaration": "function replace(string calldata input, string calldata from, string calldata to) external pure returns (string memory output);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "replace(string,string,string)",
        "selector": "0xe00ad03e",
        "selectorBytes": [
          224,
          10,
          208,
          62
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "resetNonce",
        "description": "Resets the nonce of an account to 0 for EOAs and 1 for contract accounts.",
        "declaration": "function resetNonce(address account) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "resetNonce(address)",
        "selector": "0x1c72346d",
        "selectorBytes": [
          28,
          114,
          52,
          109
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "resumeGasMetering",
        "description": "Resumes gas metering (i.e. gas usage is counted again). Noop if already on.",
        "declaration": "function resumeGasMetering() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "resumeGasMetering()",
        "selector": "0x2bcd50e0",
        "selectorBytes": [
          43,
          205,
          80,
          224
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "revertTo",
        "description": "Revert the state of the EVM to a previous snapshot\nTakes the snapshot ID to revert to.\nReturns `true` if the snapshot was successfully reverted.\nReturns `false` if the snapshot does not exist.\n**Note:** This does not automatically delete the snapshot. To delete the snapshot use `deleteSnapshot`.",
        "declaration": "function revertTo(uint256 snapshotId) external returns (bool success);",
        "visibility": "external",
        "mutability": "",
        "signature": "revertTo(uint256)",
        "selector": "0x44d7f0a4",
        "selectorBytes": [
          68,
          215,
          240,
          164
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "revertToAndDelete",
        "description": "Revert the state of the EVM to a previous snapshot and automatically deletes the snapshots\nTakes the snapshot ID to revert to.\nReturns `true` if the snapshot was successfully reverted and deleted.\nReturns `false` if the snapshot does not exist.",
        "declaration": "function revertToAndDelete(uint256 snapshotId) external returns (bool success);",
        "visibility": "external",
        "mutability": "",
        "signature": "revertToAndDelete(uint256)",
        "selector": "0x03e0aca9",
        "selectorBytes": [
          3,
          224,
          172,
          169
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "revokePersistent_0",
        "description": "Revokes persistent status from the address, previously added via `makePersistent`.",
        "declaration": "function revokePersistent(address account) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "revokePersistent(address)",
        "selector": "0x997a0222",
        "selectorBytes": [
          153,
          122,
          2,
          34
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "revokePersistent_1",
        "description": "See `revokePersistent(address)`.",
        "declaration": "function revokePersistent(address[] calldata accounts) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "revokePersistent(address[])",
        "selector": "0x3ce969e6",
        "selectorBytes": [
          60,
          233,
          105,
          230
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "roll",
        "description": "Sets `block.height`.",
        "declaration": "function roll(uint256 newHeight) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "roll(uint256)",
        "selector": "0x1f7b4f30",
        "selectorBytes": [
          31,
          123,
          79,
          48
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "rollFork_0",
        "description": "Updates the currently active fork to given block number\nThis is similar to `roll` but for the currently active fork.",
        "declaration": "function rollFork(uint256 blockNumber) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "rollFork(uint256)",
        "selector": "0xd9bbf3a1",
        "selectorBytes": [
          217,
          187,
          243,
          161
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "rollFork_1",
        "description": "Updates the currently active fork to given transaction. This will `rollFork` with the number\nof the block the transaction was mined in and replays all transaction mined before it in the block.",
        "declaration": "function rollFork(bytes32 txHash) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "rollFork(bytes32)",
        "selector": "0x0f29772b",
        "selectorBytes": [
          15,
          41,
          119,
          43
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "rollFork_2",
        "description": "Updates the given fork to given block number.",
        "declaration": "function rollFork(uint256 forkId, uint256 blockNumber) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "rollFork(uint256,uint256)",
        "selector": "0xd74c83a4",
        "selectorBytes": [
          215,
          76,
          131,
          164
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "rollFork_3",
        "description": "Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block.",
        "declaration": "function rollFork(uint256 forkId, bytes32 txHash) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "rollFork(uint256,bytes32)",
        "selector": "0xf2830f7b",
        "selectorBytes": [
          242,
          131,
          15,
          123
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "rpc",
        "description": "Performs an Ethereum JSON-RPC request to the current fork URL.",
        "declaration": "function rpc(string calldata method, string calldata params) external returns (bytes memory data);",
        "visibility": "external",
        "mutability": "",
        "signature": "rpc(string,string)",
        "selector": "0x1206c8a8",
        "selectorBytes": [
          18,
          6,
          200,
          168
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "rpcUrl",
        "description": "Returns the RPC url for the given alias.",
        "declaration": "function rpcUrl(string calldata rpcAlias) external view returns (string memory json);",
        "visibility": "external",
        "mutability": "view",
        "signature": "rpcUrl(string)",
        "selector": "0x975a6ce9",
        "selectorBytes": [
          151,
          90,
          108,
          233
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "rpcUrlStructs",
        "description": "Returns all rpc urls and their aliases as structs.",
        "declaration": "function rpcUrlStructs() external view returns (Rpc[] memory urls);",
        "visibility": "external",
        "mutability": "view",
        "signature": "rpcUrlStructs()",
        "selector": "0x9d2ad72a",
        "selectorBytes": [
          157,
          42,
          215,
          42
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "rpcUrls",
        "description": "Returns all rpc urls and their aliases `[alias, url][]`.",
        "declaration": "function rpcUrls() external view returns (string[2][] memory urls);",
        "visibility": "external",
        "mutability": "view",
        "signature": "rpcUrls()",
        "selector": "0xa85a8418",
        "selectorBytes": [
          168,
          90,
          132,
          24
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "selectFork",
        "description": "Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.",
        "declaration": "function selectFork(uint256 forkId) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "selectFork(uint256)",
        "selector": "0x9ebf6827",
        "selectorBytes": [
          158,
          191,
          104,
          39
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "serializeAddress_0",
        "description": "See `serializeJson`.",
        "declaration": "function serializeAddress(string calldata objectKey, string calldata valueKey, address value) external returns (string memory json);",
        "visibility": "external",
        "mutability": "",
        "signature": "serializeAddress(string,string,address)",
        "selector": "0x972c6062",
        "selectorBytes": [
          151,
          44,
          96,
          98
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "serializeAddress_1",
        "description": "See `serializeJson`.",
        "declaration": "function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values) external returns (string memory json);",
        "visibility": "external",
        "mutability": "",
        "signature": "serializeAddress(string,string,address[])",
        "selector": "0x1e356e1a",
        "selectorBytes": [
          30,
          53,
          110,
          26
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "serializeBool_0",
        "description": "See `serializeJson`.",
        "declaration": "function serializeBool(string calldata objectKey, string calldata valueKey, bool value) external returns (string memory json);",
        "visibility": "external",
        "mutability": "",
        "signature": "serializeBool(string,string,bool)",
        "selector": "0xac22e971",
        "selectorBytes": [
          172,
          34,
          233,
          113
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "serializeBool_1",
        "description": "See `serializeJson`.",
        "declaration": "function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values) external returns (string memory json);",
        "visibility": "external",
        "mutability": "",
        "signature": "serializeBool(string,string,bool[])",
        "selector": "0x92925aa1",
        "selectorBytes": [
          146,
          146,
          90,
          161
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "serializeBytes32_0",
        "description": "See `serializeJson`.",
        "declaration": "function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value) external returns (string memory json);",
        "visibility": "external",
        "mutability": "",
        "signature": "serializeBytes32(string,string,bytes32)",
        "selector": "0x2d812b44",
        "selectorBytes": [
          45,
          129,
          43,
          68
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "serializeBytes32_1",
        "description": "See `serializeJson`.",
        "declaration": "function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values) external returns (string memory json);",
        "visibility": "external",
        "mutability": "",
        "signature": "serializeBytes32(string,string,bytes32[])",
        "selector": "0x201e43e2",
        "selectorBytes": [
          32,
          30,
          67,
          226
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "serializeBytes_0",
        "description": "See `serializeJson`.",
        "declaration": "function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value) external returns (string memory json);",
        "visibility": "external",
        "mutability": "",
        "signature": "serializeBytes(string,string,bytes)",
        "selector": "0xf21d52c7",
        "selectorBytes": [
          242,
          29,
          82,
          199
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "serializeBytes_1",
        "description": "See `serializeJson`.",
        "declaration": "function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values) external returns (string memory json);",
        "visibility": "external",
        "mutability": "",
        "signature": "serializeBytes(string,string,bytes[])",
        "selector": "0x9884b232",
        "selectorBytes": [
          152,
          132,
          178,
          50
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "serializeInt_0",
        "description": "See `serializeJson`.",
        "declaration": "function serializeInt(string calldata objectKey, string calldata valueKey, int256 value) external returns (string memory json);",
        "visibility": "external",
        "mutability": "",
        "signature": "serializeInt(string,string,int256)",
        "selector": "0x3f33db60",
        "selectorBytes": [
          63,
          51,
          219,
          96
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "serializeInt_1",
        "description": "See `serializeJson`.",
        "declaration": "function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values) external returns (string memory json);",
        "visibility": "external",
        "mutability": "",
        "signature": "serializeInt(string,string,int256[])",
        "selector": "0x7676e127",
        "selectorBytes": [
          118,
          118,
          225,
          39
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "serializeJson",
        "description": "Serializes a key and value to a JSON object stored in-memory that can be later written to a file.\nReturns the stringified version of the specific JSON file up to that moment.",
        "declaration": "function serializeJson(string calldata objectKey, string calldata value) external returns (string memory json);",
        "visibility": "external",
        "mutability": "",
        "signature": "serializeJson(string,string)",
        "selector": "0x9b3358b0",
        "selectorBytes": [
          155,
          51,
          88,
          176
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "serializeString_0",
        "description": "See `serializeJson`.",
        "declaration": "function serializeString(string calldata objectKey, string calldata valueKey, string calldata value) external returns (string memory json);",
        "visibility": "external",
        "mutability": "",
        "signature": "serializeString(string,string,string)",
        "selector": "0x88da6d35",
        "selectorBytes": [
          136,
          218,
          109,
          53
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "serializeString_1",
        "description": "See `serializeJson`.",
        "declaration": "function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values) external returns (string memory json);",
        "visibility": "external",
        "mutability": "",
        "signature": "serializeString(string,string,string[])",
        "selector": "0x561cd6f3",
        "selectorBytes": [
          86,
          28,
          214,
          243
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "serializeUint_0",
        "description": "See `serializeJson`.",
        "declaration": "function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value) external returns (string memory json);",
        "visibility": "external",
        "mutability": "",
        "signature": "serializeUint(string,string,uint256)",
        "selector": "0x129e9002",
        "selectorBytes": [
          18,
          158,
          144,
          2
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "serializeUint_1",
        "description": "See `serializeJson`.",
        "declaration": "function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values) external returns (string memory json);",
        "visibility": "external",
        "mutability": "",
        "signature": "serializeUint(string,string,uint256[])",
        "selector": "0xfee9a469",
        "selectorBytes": [
          254,
          233,
          164,
          105
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "setEnv",
        "description": "Sets environment variables.",
        "declaration": "function setEnv(string calldata name, string calldata value) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "setEnv(string,string)",
        "selector": "0x3d5923ee",
        "selectorBytes": [
          61,
          89,
          35,
          238
        ]
      },
      "group": "environment",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "setNonce",
        "description": "Sets the nonce of an account. Must be higher than the current nonce of the account.",
        "declaration": "function setNonce(address account, uint64 newNonce) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "setNonce(address,uint64)",
        "selector": "0xf8e18b57",
        "selectorBytes": [
          248,
          225,
          139,
          87
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "setNonceUnsafe",
        "description": "Sets the nonce of an account to an arbitrary value.",
        "declaration": "function setNonceUnsafe(address account, uint64 newNonce) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "setNonceUnsafe(address,uint64)",
        "selector": "0x9b67b21c",
        "selectorBytes": [
          155,
          103,
          178,
          28
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "signP256",
        "description": "Signs `digest` with `privateKey` using the secp256r1 curve.",
        "declaration": "function signP256(uint256 privateKey, bytes32 digest) external pure returns (bytes32 r, bytes32 s);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "signP256(uint256,bytes32)",
        "selector": "0x83211b40",
        "selectorBytes": [
          131,
          33,
          27,
          64
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "sign_0",
        "description": "Signs `digest` with `privateKey` using the secp256k1 curve.",
        "declaration": "function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "sign(uint256,bytes32)",
        "selector": "0xe341eaa4",
        "selectorBytes": [
          227,
          65,
          234,
          164
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "sign_1",
        "description": "Signs `digest` with signer provided to script using the secp256k1 curve.\nIf `--sender` is provided, the signer with provided address is used, otherwise,\nif exactly one signer is provided to the script, that signer is used.\nRaises error if signer passed through `--sender` does not match any unlocked signers or\nif `--sender` is not provided and not exactly one signer is passed to the script.",
        "declaration": "function sign(bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "sign(bytes32)",
        "selector": "0x799cd333",
        "selectorBytes": [
          121,
          156,
          211,
          51
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "sign_2",
        "description": "Signs `digest` with signer provided to script using the secp256k1 curve.\nRaises error if none of the signers passed into the script have provided address.",
        "declaration": "function sign(address signer, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "sign(address,bytes32)",
        "selector": "0x8c1aa205",
        "selectorBytes": [
          140,
          26,
          162,
          5
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "sign_3",
        "description": "Signs data with a `Wallet`.",
        "declaration": "function sign(Wallet calldata wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);",
        "visibility": "external",
        "mutability": "",
        "signature": "sign((address,uint256,uint256,uint256),bytes32)",
        "selector": "0xb25c5a25",
        "selectorBytes": [
          178,
          92,
          90,
          37
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "skip",
        "description": "Marks a test as skipped. Must be called at the top of the test.",
        "declaration": "function skip(bool skipTest) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "skip(bool)",
        "selector": "0xdd82d13e",
        "selectorBytes": [
          221,
          130,
          209,
          62
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "sleep",
        "description": "Suspends execution of the main thread for `duration` milliseconds.",
        "declaration": "function sleep(uint256 duration) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "sleep(uint256)",
        "selector": "0xfa9d8713",
        "selectorBytes": [
          250,
          157,
          135,
          19
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "snapshot",
        "description": "Snapshot the current state of the evm.\nReturns the ID of the snapshot that was created.\nTo revert a snapshot use `revertTo`.",
        "declaration": "function snapshot() external returns (uint256 snapshotId);",
        "visibility": "external",
        "mutability": "",
        "signature": "snapshot()",
        "selector": "0x9711715a",
        "selectorBytes": [
          151,
          17,
          113,
          90
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "split",
        "description": "Splits the given `string` into an array of strings divided by the `delimiter`.",
        "declaration": "function split(string calldata input, string calldata delimiter) external pure returns (string[] memory outputs);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "split(string,string)",
        "selector": "0x8bb75533",
        "selectorBytes": [
          139,
          183,
          85,
          51
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "startBroadcast_0",
        "description": "Has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain.\nBroadcasting address is determined by checking the following in order:\n1. If `--sender` argument was provided, that address is used.\n2. If exactly one signer (e.g. private key, hw wallet, keystore) is set when `forge broadcast` is invoked, that signer is used.\n3. Otherwise, default foundry sender (1804c8AB1F12E6bbf3894d4083f33e07309d1f38) is used.",
        "declaration": "function startBroadcast() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "startBroadcast()",
        "selector": "0x7fb5297f",
        "selectorBytes": [
          127,
          181,
          41,
          127
        ]
      },
      "group": "scripting",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "startBroadcast_1",
        "description": "Has all subsequent calls (at this call depth only) create transactions with the address\nprovided that can later be signed and sent onchain.",
        "declaration": "function startBroadcast(address signer) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "startBroadcast(address)",
        "selector": "0x7fec2a8d",
        "selectorBytes": [
          127,
          236,
          42,
          141
        ]
      },
      "group": "scripting",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "startBroadcast_2",
        "description": "Has all subsequent calls (at this call depth only) create transactions with the private key\nprovided that can later be signed and sent onchain.",
        "declaration": "function startBroadcast(uint256 privateKey) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "startBroadcast(uint256)",
        "selector": "0xce817d47",
        "selectorBytes": [
          206,
          129,
          125,
          71
        ]
      },
      "group": "scripting",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "startMappingRecording",
        "description": "Starts recording all map SSTOREs for later retrieval.",
        "declaration": "function startMappingRecording() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "startMappingRecording()",
        "selector": "0x3e9705c0",
        "selectorBytes": [
          62,
          151,
          5,
          192
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "startPrank_0",
        "description": "Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called.",
        "declaration": "function startPrank(address msgSender) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "startPrank(address)",
        "selector": "0x06447d56",
        "selectorBytes": [
          6,
          68,
          125,
          86
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "startPrank_1",
        "description": "Sets all subsequent calls' `msg.sender` to be the input address until `stopPrank` is called, and the `tx.origin` to be the second input.",
        "declaration": "function startPrank(address msgSender, address txOrigin) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "startPrank(address,address)",
        "selector": "0x45b56078",
        "selectorBytes": [
          69,
          181,
          96,
          120
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "startStateDiffRecording",
        "description": "Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order,\nalong with the context of the calls",
        "declaration": "function startStateDiffRecording() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "startStateDiffRecording()",
        "selector": "0xcf22e3c9",
        "selectorBytes": [
          207,
          34,
          227,
          201
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "stopAndReturnStateDiff",
        "description": "Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session.",
        "declaration": "function stopAndReturnStateDiff() external returns (AccountAccess[] memory accountAccesses);",
        "visibility": "external",
        "mutability": "",
        "signature": "stopAndReturnStateDiff()",
        "selector": "0xaa5cf90e",
        "selectorBytes": [
          170,
          92,
          249,
          14
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "stopBroadcast",
        "description": "Stops collecting onchain transactions.",
        "declaration": "function stopBroadcast() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "stopBroadcast()",
        "selector": "0x76eadd36",
        "selectorBytes": [
          118,
          234,
          221,
          54
        ]
      },
      "group": "scripting",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "stopExpectSafeMemory",
        "description": "Stops all safe memory expectation in the current subcontext.",
        "declaration": "function stopExpectSafeMemory() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "stopExpectSafeMemory()",
        "selector": "0x0956441b",
        "selectorBytes": [
          9,
          86,
          68,
          27
        ]
      },
      "group": "testing",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "stopMappingRecording",
        "description": "Stops recording all map SSTOREs for later retrieval and clears the recorded data.",
        "declaration": "function stopMappingRecording() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "stopMappingRecording()",
        "selector": "0x0d4aae9b",
        "selectorBytes": [
          13,
          74,
          174,
          155
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "stopPrank",
        "description": "Resets subsequent calls' `msg.sender` to be `address(this)`.",
        "declaration": "function stopPrank() external;",
        "visibility": "external",
        "mutability": "",
        "signature": "stopPrank()",
        "selector": "0x90c5013b",
        "selectorBytes": [
          144,
          197,
          1,
          59
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "store",
        "description": "Stores a value to an address' storage slot.",
        "declaration": "function store(address target, bytes32 slot, bytes32 value) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "store(address,bytes32,bytes32)",
        "selector": "0x70ca10bb",
        "selectorBytes": [
          112,
          202,
          16,
          187
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "toBase64URL_0",
        "description": "Encodes a `bytes` value to a base64url string.",
        "declaration": "function toBase64URL(bytes calldata data) external pure returns (string memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "toBase64URL(bytes)",
        "selector": "0xc8bd0e4a",
        "selectorBytes": [
          200,
          189,
          14,
          74
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "toBase64URL_1",
        "description": "Encodes a `string` value to a base64url string.",
        "declaration": "function toBase64URL(string calldata data) external pure returns (string memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "toBase64URL(string)",
        "selector": "0xae3165b3",
        "selectorBytes": [
          174,
          49,
          101,
          179
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "toBase64_0",
        "description": "Encodes a `bytes` value to a base64 string.",
        "declaration": "function toBase64(bytes calldata data) external pure returns (string memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "toBase64(bytes)",
        "selector": "0xa5cbfe65",
        "selectorBytes": [
          165,
          203,
          254,
          101
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "toBase64_1",
        "description": "Encodes a `string` value to a base64 string.",
        "declaration": "function toBase64(string calldata data) external pure returns (string memory);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "toBase64(string)",
        "selector": "0x3f8be2c8",
        "selectorBytes": [
          63,
          139,
          226,
          200
        ]
      },
      "group": "utilities",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "toLowercase",
        "description": "Converts the given `string` value to Lowercase.",
        "declaration": "function toLowercase(string calldata input) external pure returns (string memory output);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "toLowercase(string)",
        "selector": "0x50bb0884",
        "selectorBytes": [
          80,
          187,
          8,
          132
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "toString_0",
        "description": "Converts the given value to a `string`.",
        "declaration": "function toString(address value) external pure returns (string memory stringifiedValue);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "toString(address)",
        "selector": "0x56ca623e",
        "selectorBytes": [
          86,
          202,
          98,
          62
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "toString_1",
        "description": "Converts the given value to a `string`.",
        "declaration": "function toString(bytes calldata value) external pure returns (string memory stringifiedValue);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "toString(bytes)",
        "selector": "0x71aad10d",
        "selectorBytes": [
          113,
          170,
          209,
          13
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "toString_2",
        "description": "Converts the given value to a `string`.",
        "declaration": "function toString(bytes32 value) external pure returns (string memory stringifiedValue);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "toString(bytes32)",
        "selector": "0xb11a19e8",
        "selectorBytes": [
          177,
          26,
          25,
          232
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "toString_3",
        "description": "Converts the given value to a `string`.",
        "declaration": "function toString(bool value) external pure returns (string memory stringifiedValue);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "toString(bool)",
        "selector": "0x71dce7da",
        "selectorBytes": [
          113,
          220,
          231,
          218
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "toString_4",
        "description": "Converts the given value to a `string`.",
        "declaration": "function toString(uint256 value) external pure returns (string memory stringifiedValue);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "toString(uint256)",
        "selector": "0x6900a3ae",
        "selectorBytes": [
          105,
          0,
          163,
          174
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "toString_5",
        "description": "Converts the given value to a `string`.",
        "declaration": "function toString(int256 value) external pure returns (string memory stringifiedValue);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "toString(int256)",
        "selector": "0xa322c40e",
        "selectorBytes": [
          163,
          34,
          196,
          14
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "toUppercase",
        "description": "Converts the given `string` value to Uppercase.",
        "declaration": "function toUppercase(string calldata input) external pure returns (string memory output);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "toUppercase(string)",
        "selector": "0x074ae3d7",
        "selectorBytes": [
          7,
          74,
          227,
          215
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "transact_0",
        "description": "Fetches the given transaction from the active fork and executes it on the current state.",
        "declaration": "function transact(bytes32 txHash) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "transact(bytes32)",
        "selector": "0xbe646da1",
        "selectorBytes": [
          190,
          100,
          109,
          161
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "transact_1",
        "description": "Fetches the given transaction from the given fork and executes it on the current state.",
        "declaration": "function transact(uint256 forkId, bytes32 txHash) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "transact(uint256,bytes32)",
        "selector": "0x4d8abc4b",
        "selectorBytes": [
          77,
          138,
          188,
          75
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "trim",
        "description": "Trims leading and trailing whitespace from the given `string` value.",
        "declaration": "function trim(string calldata input) external pure returns (string memory output);",
        "visibility": "external",
        "mutability": "pure",
        "signature": "trim(string)",
        "selector": "0xb2dad155",
        "selectorBytes": [
          178,
          218,
          209,
          85
        ]
      },
      "group": "string",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "tryFfi",
        "description": "Performs a foreign function call via terminal and returns the exit code, stdout, and stderr.",
        "declaration": "function tryFfi(string[] calldata commandInput) external returns (FfiResult memory result);",
        "visibility": "external",
        "mutability": "",
        "signature": "tryFfi(string[])",
        "selector": "0xf45c1ce7",
        "selectorBytes": [
          244,
          92,
          28,
          231
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "txGasPrice",
        "description": "Sets `tx.gasprice`.",
        "declaration": "function txGasPrice(uint256 newGasPrice) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "txGasPrice(uint256)",
        "selector": "0x48f50c0f",
        "selectorBytes": [
          72,
          245,
          12,
          15
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "unixTime",
        "description": "Returns the time since unix epoch in milliseconds.",
        "declaration": "function unixTime() external returns (uint256 milliseconds);",
        "visibility": "external",
        "mutability": "",
        "signature": "unixTime()",
        "selector": "0x625387dc",
        "selectorBytes": [
          98,
          83,
          135,
          220
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "warp",
        "description": "Sets `block.timestamp`.",
        "declaration": "function warp(uint256 newTimestamp) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "warp(uint256)",
        "selector": "0xe5d6bf02",
        "selectorBytes": [
          229,
          214,
          191,
          2
        ]
      },
      "group": "evm",
      "status": "stable",
      "safety": "unsafe"
    },
    {
      "func": {
        "id": "writeFile",
        "description": "Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\n`path` is relative to the project root.",
        "declaration": "function writeFile(string calldata path, string calldata data) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "writeFile(string,string)",
        "selector": "0x897e0a97",
        "selectorBytes": [
          137,
          126,
          10,
          151
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "writeFileBinary",
        "description": "Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\n`path` is relative to the project root.",
        "declaration": "function writeFileBinary(string calldata path, bytes calldata data) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "writeFileBinary(string,bytes)",
        "selector": "0x1f21fc80",
        "selectorBytes": [
          31,
          33,
          252,
          128
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "writeJson_0",
        "description": "Write a serialized JSON object to a file. If the file exists, it will be overwritten.",
        "declaration": "function writeJson(string calldata json, string calldata path) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "writeJson(string,string)",
        "selector": "0xe23cd19f",
        "selectorBytes": [
          226,
          60,
          209,
          159
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "writeJson_1",
        "description": "Write a serialized JSON object to an **existing** JSON file, replacing a value with key = <value_key.>\nThis is useful to replace a specific value of a JSON file, without having to parse the entire thing.",
        "declaration": "function writeJson(string calldata json, string calldata path, string calldata valueKey) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "writeJson(string,string,string)",
        "selector": "0x35d6ad46",
        "selectorBytes": [
          53,
          214,
          173,
          70
        ]
      },
      "group": "json",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "writeLine",
        "description": "Writes line to file, creating a file if it does not exist.\n`path` is relative to the project root.",
        "declaration": "function writeLine(string calldata path, string calldata data) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "writeLine(string,string)",
        "selector": "0x619d897f",
        "selectorBytes": [
          97,
          157,
          137,
          127
        ]
      },
      "group": "filesystem",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "writeToml_0",
        "description": "Takes serialized JSON, converts to TOML and write a serialized TOML to a file.",
        "declaration": "function writeToml(string calldata json, string calldata path) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "writeToml(string,string)",
        "selector": "0xc0865ba7",
        "selectorBytes": [
          192,
          134,
          91,
          167
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    },
    {
      "func": {
        "id": "writeToml_1",
        "description": "Takes serialized JSON, converts to TOML and write a serialized TOML table to an **existing** TOML file, replacing a value with key = <value_key.>\nThis is useful to replace a specific value of a TOML file, without having to parse the entire thing.",
        "declaration": "function writeToml(string calldata json, string calldata path, string calldata valueKey) external;",
        "visibility": "external",
        "mutability": "",
        "signature": "writeToml(string,string,string)",
        "selector": "0x51ac6a33",
        "selectorBytes": [
          81,
          172,
          106,
          51
        ]
      },
      "group": "toml",
      "status": "stable",
      "safety": "safe"
    }
  ]
}