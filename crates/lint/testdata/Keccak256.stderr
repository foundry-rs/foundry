note[mixed-case-variable]: mutable variables should use mixedCase
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
16 |         uint256 MixedCase_Variable = 1;
   |                 ------------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
22 |         uint256 Another_MixedCase = 2;
   |                 -----------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
32 |         uint256 YetAnother_MixedCase = 3;
   |                 --------------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
61 |     uint256 Enabled_MixedCase_Variable;
   |             --------------------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[mixed-case-variable]: mutable variables should use mixedCase
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
81 |         uint256 Enabled_MixedCase_Variable = 1;
   |                 --------------------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#mixed-case-variable

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
15 |         bytes32 hash = keccak256(abi.encodePacked(a, b, bytes32(c)));
   |                        ---------------------------------------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
31 |         bytes32 afterDisabledBlock = keccak256(abi.encode(a, b, c));
   |                                      ------------------------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
37 |         bytes32 hash = keccak256(a);
   |                        ------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
38 |         return keccak256(abi.encodePacked(a, b));
   |                ---------------------------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
42 |         bytes32 loadsFromCalldata = keccak256(z);
   |                                     ------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
44 |         bytes32 loadsFromMemory = keccak256(y);
   |                                   ------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
45 |         bytes32 lintWithoutFix = keccak256(abi.encodePacked(a, b, c));
   |                                  ------------------------------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
46 |         return keccak256(abi.encode(a, b, c));
   |                ------------------------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
64 |         return keccak256(abi.encode(a, b));
   |                ---------------------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
68 |         return keccak256(abi.encodePacked(a, b));
   |                ---------------------------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
74 |         bytes32 doesNotUseScratchSpace = keccak256(abi.encode(x, y, x, y, x, y));
   |                                          ---------------------------------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
75 |         bytes32 doesUseScratchSpace = keccak256(abi.encode(x));
   |                                       ------------------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
76 |         return keccak256(abi.encode(doesUseScratchSpace, doesNotUseScratchSpace));
   |                ------------------------------------------------------------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

note[asm-keccak256]: use of inefficient hashing mechanism; consider using inline assembly
  --> ROOT/testdata/Keccak256.sol:LL:CC
   |
82 |         return keccak256(abi.encodePacked(a, b));
   |                ---------------------------------
   |
   = help: https://book.getfoundry.sh/reference/forge/forge-lint#asm-keccak256

