name: Publish NPM

on:
  workflow_dispatch:
  #
  # Temporarily disabled 
  #
  # workflow_run:
  #   types: [completed]
  #   workflows: [release]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  ACTIONS_RUNNER_DEBUG: true
  NPM_CONFIG_PROVENANCE: true

jobs:
  publish-arch:
    permissions:
      actions: read
      contents: read
      id-token: write
    name: ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 3
      fail-fast: false
      matrix:
        # we don't need a specific runner for any of these
        # because they've all been built already. We're just publishing
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: win32
            arch: amd64
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      RELEASE_VERSION: ${{ steps.release-version.outputs.RELEASE_VERSION }}
    env:
      NPM_REGISTRY_URL: "https://registry.npmjs.org"
    steps:
      - name: Download Release Assets
        uses: actions/download-artifact@v5
        with:
          merge-multiple: true
          # Download all foundry artifacts from the triggering release run
          pattern: "foundry_*"
          repository: foundry-rs/foundry
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # run-id: ${{ github.event.workflow_run.id }}
          path: foundry_artifacts

      - name: Setup Bun
        uses: oven-sh/setup-bun@main
        with:
          bun-version: latest
          registries: |
            https://registry.npmjs.org

      - name: Setup Node (for npm publish auth)
        uses: actions/setup-node@v4
        with:
          node-version: lts
          registry-url: "https://registry.npmjs.org"

      - name: Install Dependencies
        working-directory: npm
        run: bun install --frozen-lockfile

      - name: Derive RELEASE_VERSION
        id: release-version
        run: |
          set -euo pipefail

          # Derive RELEASE_VERSION from any foundry artifact we downloaded
          # Expected names: foundry_<VERSION>_<platform>_<arch>.{tar.gz,zip}

          first_file=$(ls ../foundry_artifacts/foundry_* 2>/dev/null | head -n1 || true)
          if [[ -z "${first_file}" ]]; then
            echo "No foundry artifacts found to publish" >&2
            exit 1
          fi

          version_part=$(basename "$first_file")
          version_part=${version_part#foundry_}

          export RELEASE_VERSION=${version_part%%_*}

          echo "Detected RELEASE_VERSION=$RELEASE_VERSION"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"

      - name: Publish Binaries
        working-directory: npm
        env:
          PROVENANCE: true
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_REGISTRY_URL: ${{ env.NPM_REGISTRY_URL }}
        run: |
          set -euo pipefail

          echo "Artifacts in foundry_artifacts:"
          ls -la ../foundry_artifacts || true

          # Derive RELEASE_VERSION from any foundry artifact we downloaded
          # Expected names: foundry_<VERSION>_<platform>_<arch>.{tar.gz,zip}
          first_file=$(ls ../foundry_artifacts/foundry_* 2>/dev/null | head -n1 || true)
          if [[ -z "${first_file}" ]]; then
            echo "No foundry artifacts found to publish" >&2
            exit 1
          fi
          version_part=$(basename "$first_file")
          version_part=${version_part#foundry_}
          export RELEASE_VERSION=${version_part%%_*}
          echo "Detected RELEASE_VERSION=$RELEASE_VERSION"

  publish-meta:
    needs: publish-arch
    runs-on: ubuntu-latest
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    env:
      RELEASE_VERSION: ${{ needs.publish-arch.outputs.RELEASE_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Bun
        uses: oven-sh/setup-bun@main
        with:
          bun-version: latest
          registries: |
            https://registry.npmjs.org

      - name: Setup Node (for npm publish auth)
        uses: actions/setup-node@v4
        with:
          node-version: lts
          registry-url: "https://registry.npmjs.org"

      - name: Install Dependencies
        working-directory: npm
        run: bun install --frozen-lockfile

      - name: Publish @foundry-rs/foundry
        working-directory: npm
        env:
          PROVENANCE: true
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -euo pipefail

          bun ./scripts/publish.ts ./@foundry-rs/foundry
          echo "Published @foundry-rs/foundry"
