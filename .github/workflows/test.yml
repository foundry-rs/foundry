on:
  push:
    branches:
      - master
  pull_request:

name: test

jobs:
#  unit:
#    name: unit tests
#    runs-on: ubuntu-latest
#    env:
#      ETH_RPC_URL: https://eth-mainnet.alchemyapi.io/v2/Lc7oIGYeL_QvInzI0Wiu_pOZZDEKBrdf
#    steps:
#      - name: Checkout sources
#        uses: actions/checkout@v2
#
#      - name: Clone testdata for fmt tests
#        run: make fmt-testdata
#
#      - name: Install toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          profile: minimal
#          override: true
#      - uses: Swatinem/rust-cache@v1
#        with:
#          cache-on-failure: true
#
#      - name: cargo test
#        run: cargo test --locked --workspace --all-features --lib --bins
#
#  doc:
#    name: doc tests
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout sources
#        uses: actions/checkout@v2
#      - name: Install toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          profile: minimal
#          override: true
#      - uses: Swatinem/rust-cache@v1
#        with:
#          cache-on-failure: true
#
#      - name: cargo test
#        run: cargo test --locked --workspace --all-features --doc
#
#  integration:
#    name: integration tests
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout sources
#        uses: actions/checkout@v2
#      - name: Clone testdata for fmt tests
#        run: make fmt-testdata
#      - name: Install toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          profile: minimal
#          override: true
#      - name: Rust cache
#        uses: Swatinem/rust-cache@v1
#        with:
#          cache-on-failure: true
#
#      - name: cargo test
#        run: cargo test --locked --workspace --test '*'
#
#  external-integration:
#    name: external integration tests
#    runs-on: ubuntu-latest
#    env:
#      ETH_RPC_URL: https://eth-mainnet.alchemyapi.io/v2/Lc7oIGYeL_QvInzI0Wiu_pOZZDEKBrdf
#    steps:
#      - name: Checkout sources
#        uses: actions/checkout@v2
#      - name: Clone testdata for fmt tests
#        run: make fmt-testdata
#      - name: Install toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#          profile: minimal
#          override: true
#      - uses: Swatinem/rust-cache@v1
#        with:
#          cache-on-failure: true
#      - name: Forge RPC cache
#        uses: actions/cache@v3
#        with:
#          path: ~/.foundry/cache
#          key: rpc-cache-${{ hashFiles('cli/tests/it/integration.rs') }}
#
#      - name: Force use of HTTPS for submodules
#        run: git config --global url."https://github.com/".insteadOf "git@github.com:"
#
#      - name: cargo test
#        run: cargo test --locked --workspace --features external-integration-tests --test '*'
#
#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout sources
#        uses: actions/checkout@v2
#
#      - name: Install toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          # nightly regression https://github.com/rust-lang/rust/issues/95267
#          toolchain: nightly-2022-03-20
#          profile: minimal
#          components: rustfmt, clippy
#          override: true
#
#      - uses: Swatinem/rust-cache@v1
#        with:
#          cache-on-failure: true
#
#      - name: cargo fmt
#        run: cargo +nightly-2022-03-20 fmt --all -- --check
#
#      - name: cargo clippy
#        run: cargo +nightly-2022-03-20 clippy --all --all-features -- -D warnings
#
#  cross-platform:
#    name: Cross-platform tests
#    if: github.event_name != 'pull_request'
#    needs: [integration, lint, doc, unit]
#    uses: ./.github/workflows/cross-platform.yml

#  prepare:
#    name: Prepare release
#    runs-on: ubuntu-latest
#
#    outputs:
#      tag_name: ${{ steps.release_info.outputs.tag_name }}
#      release_name: ${{ steps.release_info.outputs.release_name }}
#      changelog: ${{ steps.build_changelog.outputs.changelog }}
#
#    steps:
#      - name: Checkout sources
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#
#      - name: Compute release name and tag
#        id: release_info
#        run: |
#          if [[ $IS_NIGHTLY ]]; then
#            echo "::set-output name=tag_name::nightly-${GITHUB_SHA}"
#            echo "::set-output name=release_name::Nightly ($(date '+%Y-%m-%d'))"
#          else
#            echo "::set-output name=tag_name::${GITHUB_REF_NAME}"
#            echo "::set-output name=release_name::${GITHUB_REF_NAME}"
#          fi
#
#      # Creates a `nightly-SHA` tag for this specific nightly
#      # This tag is used for this specific nightly version's release
#      # which allows users to roll back. It is also used to build
#      # the changelog.
#      - name: Create build-specific nightly tag
#        if: ${{ env.IS_NIGHTLY }}
#        uses: actions/github-script@v5
#        env:
#          TAG_NAME: ${{ steps.release_info.outputs.tag_name }}
#        with:
#          script: |
#            const createTag = require('./.github/scripts/create-tag.js')
#            await createTag({ github, context }, process.env.TAG_NAME)
#
#      - name: Build changelog
#        id: build_changelog
#        uses: mikepenz/release-changelog-builder-action@v2
#        with:
#          configuration: "./.github/changelog.json"
#          fromTag: ${{ env.IS_NIGHTLY && 'nightly' || '' }}
#          toTag: ${{ steps.release_info.outputs.tag_name }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  check-platform:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      matrix:
        job:
          # The OS is used for the runner
          # The platform is a generic platform name
          # The target is used by Cargo
          # The arch is either 386, arm64 or amd64
#          - os: ubuntu-latest
#            platform: linux
#            target: x86_64-unknown-linux-gnu
#            arch: amd64
#          - os: ubuntu-latest
#            platform: linux
#            target: aarch64-unknown-linux-gnu
#            arch: arm64
#          - os: macos-latest
#            platform: darwin
#            target: x86_64-apple-darwin
#            arch: amd64
          - os: macos-latest
            platform: darwin
            target: aarch64-apple-darwin
            arch: arm64
          #- os: windows-latest
          #  platform: win32
          #  target: x86_64-pc-windows-msvc
          #  arch: amd64

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: emit platform ${{ matrix.job.target == 'aarch64-apple-darwin' }}
        run: cd cli && cargo b --target ${{ matrix.job.target }}

