name: Release version

on:
  push:
    tags:
      - 'v*.*.*'
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  IS_NIGHTLY: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}

jobs:
  prepare:
    name: Prepare release
    runs-on: ubuntu-latest

    outputs:
      tag_name: ${{ steps.release_info.outputs.tag_name }}
      release_name: ${{ steps.release_info.outputs.release_name }}
      changelog: ${{ steps.build_changelog.outputs.changelog }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Move nightly tag
        if: ${{ env.IS_NIGHTLY }}
        uses: actions/github-script@v5
        with:
          script: |
            const moveTag = require('./.github/scripts/move-tag.js')
            await moveTag({ github, context }, 'nightly')

      - name: Compute release name and tag
        id: release_info
        run: |
          if [[ $IS_NIGHTLY ]]; then
            echo "::set-output name=tag_name::nightly-${GITHUB_SHA}"
            echo "::set-output name=release_name::Nightly ($(date '+%Y-%m-%d'))"
          else
            echo "::set-output name=tag_name::${GITHUB_REF_NAME}"
            echo "::set-output name=release_name::${GITHUB_REF_NAME}"
          fi

      - name: Build changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    needs: prepare
    strategy:
      matrix:
        job:
          # The OS is used for the runner
          # The platform is a generic platform name
          # The target is used by Cargo
          # The arch is either 386 or amd64
          - os: ubuntu-latest
            platform: linux
            target: x86_64-unknown-linux-gnu
            arch: amd64
          - os: macos-latest
            platform: darwin
            target: x86_64-apple-darwin
            arch: amd64
          - os: macos-latest
            platform: darwin
            target: aarch64-apple-darwin
            arch: arm64
          - os: windows-latest
            platform: win32
            target: x86_64-pc-windows-msvc
            arch: amd64

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: Apple M1 setup
        if: ${{ matrix.job.target == 'aarch64-apple-darwin' }}
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV

      - name: Build binaries
        env:
          RUSTFLAGS: -C link-args=-s
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --bins --target ${{ matrix.job.target }}

      - name: Archive binaries
        id: artifacts
        env:
          PLATFORM_NAME: ${{ matrix.job.platform }}
          TARGET: ${{ matrix.job.target }}
          ARCH: ${{ matrix.job.arch }}
          VERSION_NAME: ${{ (env.IS_NIGHTLY && 'nightly') || needs.prepare.outputs.tag_name }}
        run: |
          if [ "$PLATFORM_NAME" == "linux" ]; then
            tar -czvf "foundry_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C ./target/${TARGET}/release forge cast
            echo "::set-output name=file_name::foundry_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz"
          elif [ "$PLATFORM_NAME" == "darwin" ]; then
            # We need to use gtar here otherwise the archive is corrupt.
            # See: https://github.com/actions/virtual-environments/issues/2619
            gtar -czvf "foundry_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C ./target/${TARGET}/release forge cast
            echo "::set-output name=file_name::foundry_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz"
          else
            cd ./target/${TARGET}/release
            7z a -tzip "foundry_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" forge.exe cast.exe
            mv "foundry_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" ../../../
            echo "::set-output name=file_name::foundry_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip"
          fi
        shell: bash

      - name: Build man page
        id: man
        if: ${{ matrix.job.platform == 'linux' }}
        env:
          PLATFORM_NAME: ${{ matrix.job.platform }}
          TARGET: ${{ matrix.job.target }}
        run: |
          sudo apt-get -y install help2man
          help2man -N ./target/${TARGET}/release/forge > forge.1
          help2man -N ./target/${TARGET}/release/cast > cast.1
          gzip forge.1
          gzip cast.1
          tar -czvf "foundry_man_${TAG_NAME}.tar.gz" forge.1.gz cast.1.gz
          echo "::set-output name=foundry_man::foundry_man_${TAG_NAME}.tar.gz"
        shell: bash

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.prepare.outputs.release_name }}
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          prerelease: ${{ env.IS_NIGHTLY }}
          body: ${{ needs.prepare.outputs.changelog }}
          files: |
            ${{ steps.artifacts.outputs.file_name }}
            ${{ steps.man.outputs.foundry_man }}
  cleanup:
    name: Release cleanup
    runs-on: ubuntu-latest
    needs: release

    steps:
      - name: Delete old nightlies
        uses: actions/github-script@v5
        with:
          script: |
            const prunePrereleases = require('./.github/scripts/prune-prereleases.js')
            await prunePrereleases({github, context})
