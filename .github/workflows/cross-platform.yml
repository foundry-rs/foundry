on:
  workflow_dispatch:
  workflow_call:

name: cross-platform

env:
  CARGO_TERM_COLOR: always
  CI: true
  COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
  PULL_NUMBER: ${{ github.event.pull_request.number }}
  RUN_ID: ${{ github.run_id }}
  CARGO_UNSTABLE_SPARSE_REGISTRY: true
  CARGO_INCREMENTAL: 0

jobs:
  build:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        job:
          # The OS is used for the runner
          # The target is used by Cargo
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: cache-ci-
          cache-on-failure: true

      # Required for forge commands that use git
      - name: Setup git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "<>"

      - name: Apple M1 setup
        if: ${{ matrix.job.target == 'aarch64-apple-darwin' }}
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV

      - name: Linux ARM setup
        if: ${{ matrix.job.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      # For some reason the FFI cheatcode uses WSL bash instead of Git bash, so we need to install a WSL distribution
      - name: Windows setup
        if: ${{ matrix.job.target == 'x86_64-pc-windows-msvc' }}
        run: |
          wsl --install --distribution Ubuntu
        shell: pwsh

      - name: Build
        uses: ClementTsang/cargo-action@v0.0.2
        with:
          use-cross: ${{ matrix.job.use-cross }}
          command: build
          args: --verbose --locked --bins --tests

      - name: Run forge
        uses: ClementTsang/cargo-action@v0.0.2
        with:
          use-cross: ${{ matrix.job.use-cross }}
          command: run
          args: --locked --bin forge -- --help

      - name: Run tests
        uses: ClementTsang/cargo-action@v0.0.2
        if: ${{ matrix.job.target != 'aarch64-apple-darwin' }}
        with:
          use-cross: ${{ matrix.job.use-cross }}
          command: test
          args: --locked --workspace -- --skip fork
