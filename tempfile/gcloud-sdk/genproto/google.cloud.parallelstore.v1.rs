// This file is @generated by prost-build.
/// A Parallelstore instance.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instance {
    /// Identifier. The resource name of the instance, in the format
    /// `projects/{project}/locations/{location}/instances/{instance_id}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. The description of the instance. 2048 characters or less.
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// Output only. The instance state.
    #[prost(enumeration = "instance::State", tag = "3")]
    pub state: i32,
    /// Output only. The time when the instance was created.
    #[prost(message, optional, tag = "4")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time when the instance was updated.
    #[prost(message, optional, tag = "5")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Optional. Cloud Labels are a flexible and lightweight mechanism for
    /// organizing cloud resources into groups that reflect a customer's
    /// organizational needs and deployment strategies. See
    /// <https://cloud.google.com/resource-manager/docs/labels-overview> for details.
    #[prost(map = "string, string", tag = "6")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Required. Immutable. The instance's storage capacity in Gibibytes (GiB).
    /// Allowed values are between 12000 and 100000, in multiples of 4000; e.g.,
    /// 12000, 16000, 20000, ...
    #[prost(int64, tag = "8")]
    pub capacity_gib: i64,
    /// Output only. The version of DAOS software running in the instance.
    #[prost(string, tag = "9")]
    pub daos_version: ::prost::alloc::string::String,
    /// Output only. A list of IPv4 addresses used for client side configuration.
    #[prost(string, repeated, tag = "10")]
    pub access_points: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Optional. Immutable. The name of the Compute Engine
    /// [VPC network](<https://cloud.google.com/vpc/docs/vpc>) to which the
    /// instance is connected.
    #[prost(string, tag = "11")]
    pub network: ::prost::alloc::string::String,
    /// Optional. Immutable. The ID of the IP address range being used by the
    /// instance's VPC network. See [Configure a VPC
    /// network](<https://cloud.google.com/parallelstore/docs/vpc#create_and_configure_the_vpc>).
    /// If no ID is provided, all ranges are considered.
    #[prost(string, tag = "12")]
    pub reserved_ip_range: ::prost::alloc::string::String,
    /// Output only. Immutable. The ID of the IP address range being used by the
    /// instance's VPC network. This field is populated by the service and contains
    /// the value currently used by the service.
    #[prost(string, tag = "14")]
    pub effective_reserved_ip_range: ::prost::alloc::string::String,
    /// Optional. Stripe level for files. Allowed values are:
    ///
    /// * `FILE_STRIPE_LEVEL_MIN`: offers the best performance for small size
    ///    files.
    /// * `FILE_STRIPE_LEVEL_BALANCED`: balances performance for workloads
    ///    involving a mix of small and large files.
    /// * `FILE_STRIPE_LEVEL_MAX`: higher throughput performance for larger files.
    #[prost(enumeration = "FileStripeLevel", tag = "15")]
    pub file_stripe_level: i32,
    /// Optional. Stripe level for directories. Allowed values are:
    ///
    /// * `DIRECTORY_STRIPE_LEVEL_MIN`: recommended when directories contain a
    ///    small number of files.
    /// * `DIRECTORY_STRIPE_LEVEL_BALANCED`: balances performance for workloads
    ///    involving a mix of small and large directories.
    /// * `DIRECTORY_STRIPE_LEVEL_MAX`: recommended for directories with a large
    ///    number of files.
    #[prost(enumeration = "DirectoryStripeLevel", tag = "16")]
    pub directory_stripe_level: i32,
}
/// Nested message and enum types in `Instance`.
pub mod instance {
    /// The possible states of a Parallelstore instance.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// Not set.
        Unspecified = 0,
        /// The instance is being created.
        Creating = 1,
        /// The instance is available for use.
        Active = 2,
        /// The instance is being deleted.
        Deleting = 3,
        /// The instance is not usable.
        Failed = 4,
        /// The instance is being upgraded.
        Upgrading = 5,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATE_UNSPECIFIED",
                Self::Creating => "CREATING",
                Self::Active => "ACTIVE",
                Self::Deleting => "DELETING",
                Self::Failed => "FAILED",
                Self::Upgrading => "UPGRADING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "CREATING" => Some(Self::Creating),
                "ACTIVE" => Some(Self::Active),
                "DELETING" => Some(Self::Deleting),
                "FAILED" => Some(Self::Failed),
                "UPGRADING" => Some(Self::Upgrading),
                _ => None,
            }
        }
    }
}
/// List instances request.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInstancesRequest {
    /// Required. The project and location for which to retrieve instance
    /// information, in the format `projects/{project_id}/locations/{location}`.
    ///
    /// To retrieve instance information for all locations, use "-" as the value of
    /// `{location}`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, the server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results.
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results.
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Response from
/// [ListInstances][google.cloud.parallelstore.v1.Parallelstore.ListInstances].
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInstancesResponse {
    /// The list of Parallelstore instances.
    #[prost(message, repeated, tag = "1")]
    pub instances: ::prost::alloc::vec::Vec<Instance>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Get an instance's details.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInstanceRequest {
    /// Required. The instance resource name, in the format
    /// `projects/{project_id}/locations/{location}/instances/{instance_id}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Create a new Parallelstore instance.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateInstanceRequest {
    /// Required. The instance's project and location, in the format
    /// `projects/{project}/locations/{location}`.
    /// Locations map to Google Cloud zones; for example, `us-west1-b`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The name of the Parallelstore instance.
    ///
    /// * Must contain only lowercase letters, numbers, and hyphens.
    /// * Must start with a letter.
    /// * Must be between 1-63 characters.
    /// * Must end with a number or a letter.
    /// * Must be unique within the customer project / location
    #[prost(string, tag = "2")]
    pub instance_id: ::prost::alloc::string::String,
    /// Required. The instance to create.
    #[prost(message, optional, tag = "3")]
    pub instance: ::core::option::Option<Instance>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
/// Update an instance.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateInstanceRequest {
    /// Required. Mask of fields to update. Field mask is used to specify the
    /// fields to be overwritten in the Instance resource by the update. At least
    /// one path must be supplied in this field. The fields specified in the
    /// update_mask are relative to the resource, not the full request.
    #[prost(message, optional, tag = "1")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    /// Required. The instance to update.
    #[prost(message, optional, tag = "2")]
    pub instance: ::core::option::Option<Instance>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
}
/// Delete an instance.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteInstanceRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
/// Long-running operation metadata.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[prost(message, optional, tag = "1")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time the operation finished running.
    #[prost(message, optional, tag = "2")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Server-defined resource path for the target of the operation.
    #[prost(string, tag = "3")]
    pub target: ::prost::alloc::string::String,
    /// Output only. Name of the verb executed by the operation.
    #[prost(string, tag = "4")]
    pub verb: ::prost::alloc::string::String,
    /// Output only. Human-readable status of the operation, if any.
    #[prost(string, tag = "5")]
    pub status_message: ::prost::alloc::string::String,
    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have been cancelled successfully
    /// have [Operation.error][google.longrunning.Operation.error] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    #[prost(bool, tag = "6")]
    pub requested_cancellation: bool,
    /// Output only. API version used to start the operation.
    #[prost(string, tag = "7")]
    pub api_version: ::prost::alloc::string::String,
}
/// Cloud Storage as the source of a data transfer.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SourceGcsBucket {
    /// Required. URI to a Cloud Storage bucket in the format:
    /// `gs://<bucket_name>/<path_inside_bucket>`. The path inside the bucket is
    /// optional.
    #[prost(string, tag = "1")]
    pub uri: ::prost::alloc::string::String,
}
/// Cloud Storage as the destination of a data transfer.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DestinationGcsBucket {
    /// Required. URI to a Cloud Storage bucket in the format:
    /// `gs://<bucket_name>/<path_inside_bucket>`. The path inside the bucket is
    /// optional.
    #[prost(string, tag = "1")]
    pub uri: ::prost::alloc::string::String,
}
/// Parallelstore as the source of a data transfer.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SourceParallelstore {
    /// Optional. Root directory path to the Paralellstore filesystem, starting
    /// with `/`. Defaults to `/` if unset.
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
/// Parallelstore as the destination of a data transfer.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DestinationParallelstore {
    /// Optional. Root directory path to the Paralellstore filesystem, starting
    /// with `/`. Defaults to `/` if unset.
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
/// Import data from Cloud Storage into a Parallelstore instance.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportDataRequest {
    /// Required. Name of the resource.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. User-specified service account credentials to be used when
    /// performing the transfer.
    ///
    /// Use one of the following formats:
    ///
    /// * `{EMAIL_ADDRESS_OR_UNIQUE_ID}`
    /// * `projects/{PROJECT_ID_OR_NUMBER}/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}`
    /// * `projects/-/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}`
    ///
    /// If unspecified, the Parallelstore service agent is used:
    /// `service-<PROJECT_NUMBER>@gcp-sa-parallelstore.iam.gserviceaccount.com`
    #[prost(string, tag = "5")]
    pub service_account: ::prost::alloc::string::String,
    /// The source of the data being imported into the Parallelstore instance.
    #[prost(oneof = "import_data_request::Source", tags = "2")]
    pub source: ::core::option::Option<import_data_request::Source>,
    /// The Parallelstore instance into which to import data.
    #[prost(oneof = "import_data_request::Destination", tags = "3")]
    pub destination: ::core::option::Option<import_data_request::Destination>,
}
/// Nested message and enum types in `ImportDataRequest`.
pub mod import_data_request {
    /// The source of the data being imported into the Parallelstore instance.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Source {
        /// The Cloud Storage source bucket and, optionally, path inside the bucket.
        #[prost(message, tag = "2")]
        SourceGcsBucket(super::SourceGcsBucket),
    }
    /// The Parallelstore instance into which to import data.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Destination {
        /// Parallelstore destination.
        #[prost(message, tag = "3")]
        DestinationParallelstore(super::DestinationParallelstore),
    }
}
/// Export data from Parallelstore to Cloud Storage.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportDataRequest {
    /// Required. Name of the resource.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. User-specified Service Account (SA) credentials to be used when
    /// performing the transfer.
    /// Use one of the following formats:
    ///
    /// * `{EMAIL_ADDRESS_OR_UNIQUE_ID}`
    /// * `projects/{PROJECT_ID_OR_NUMBER}/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}`
    /// * `projects/-/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}`
    ///
    /// If unspecified, the Parallelstore service agent is used:
    /// `service-<PROJECT_NUMBER>@gcp-sa-parallelstore.iam.gserviceaccount.com`
    #[prost(string, tag = "5")]
    pub service_account: ::prost::alloc::string::String,
    /// The Parallelstore instance to export from.
    #[prost(oneof = "export_data_request::Source", tags = "2")]
    pub source: ::core::option::Option<export_data_request::Source>,
    /// The Cloud Storage bucket to export to.
    #[prost(oneof = "export_data_request::Destination", tags = "3")]
    pub destination: ::core::option::Option<export_data_request::Destination>,
}
/// Nested message and enum types in `ExportDataRequest`.
pub mod export_data_request {
    /// The Parallelstore instance to export from.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Source {
        /// Parallelstore source.
        #[prost(message, tag = "2")]
        SourceParallelstore(super::SourceParallelstore),
    }
    /// The Cloud Storage bucket to export to.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Destination {
        /// Cloud Storage destination.
        #[prost(message, tag = "3")]
        DestinationGcsBucket(super::DestinationGcsBucket),
    }
}
/// The response to a request to import data to Parallelstore.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ImportDataResponse {}
/// Metadata related to the data import operation.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportDataMetadata {
    /// Data transfer operation metadata.
    #[prost(message, optional, tag = "1")]
    pub operation_metadata: ::core::option::Option<TransferOperationMetadata>,
    /// Output only. The time the operation was created.
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time the operation finished running.
    #[prost(message, optional, tag = "3")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Server-defined resource path for the target of the operation.
    #[prost(string, tag = "4")]
    pub target: ::prost::alloc::string::String,
    /// Output only. Name of the verb executed by the operation.
    #[prost(string, tag = "5")]
    pub verb: ::prost::alloc::string::String,
    /// Output only. Human-readable status of the operation, if any.
    #[prost(string, tag = "6")]
    pub status_message: ::prost::alloc::string::String,
    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have successfully been cancelled
    /// have [Operation.error][google.longrunning.Operation.error] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    #[prost(bool, tag = "7")]
    pub requested_cancellation: bool,
    /// Output only. API version used to start the operation.
    #[prost(string, tag = "8")]
    pub api_version: ::prost::alloc::string::String,
}
/// The response to a request to export data from Parallelstore.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ExportDataResponse {}
/// Metadata related to the data export operation.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportDataMetadata {
    /// Data transfer operation metadata.
    #[prost(message, optional, tag = "1")]
    pub operation_metadata: ::core::option::Option<TransferOperationMetadata>,
    /// Output only. The time the operation was created.
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time the operation finished running.
    #[prost(message, optional, tag = "3")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Server-defined resource path for the target of the operation.
    #[prost(string, tag = "4")]
    pub target: ::prost::alloc::string::String,
    /// Output only. Name of the verb executed by the operation.
    #[prost(string, tag = "5")]
    pub verb: ::prost::alloc::string::String,
    /// Output only. Human-readable status of the operation, if any.
    #[prost(string, tag = "6")]
    pub status_message: ::prost::alloc::string::String,
    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have successfully been cancelled
    /// have [Operation.error][google.longrunning.Operation.error] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    #[prost(bool, tag = "7")]
    pub requested_cancellation: bool,
    /// Output only. API version used to start the operation.
    #[prost(string, tag = "8")]
    pub api_version: ::prost::alloc::string::String,
}
/// Long-running operation metadata related to a data transfer.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferOperationMetadata {
    /// Output only. The progress of the transfer operation.
    #[prost(message, optional, tag = "3")]
    pub counters: ::core::option::Option<TransferCounters>,
    /// Output only. The type of transfer occurring.
    #[prost(enumeration = "TransferType", tag = "6")]
    pub transfer_type: i32,
    /// The source of transfer operation.
    #[prost(oneof = "transfer_operation_metadata::Source", tags = "7, 8")]
    pub source: ::core::option::Option<transfer_operation_metadata::Source>,
    /// The destination of transfer operation.
    #[prost(oneof = "transfer_operation_metadata::Destination", tags = "9, 10")]
    pub destination: ::core::option::Option<transfer_operation_metadata::Destination>,
}
/// Nested message and enum types in `TransferOperationMetadata`.
pub mod transfer_operation_metadata {
    /// The source of transfer operation.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Source {
        /// Output only. Parallelstore source.
        #[prost(message, tag = "7")]
        SourceParallelstore(super::SourceParallelstore),
        /// Output only. Cloud Storage source.
        #[prost(message, tag = "8")]
        SourceGcsBucket(super::SourceGcsBucket),
    }
    /// The destination of transfer operation.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Destination {
        /// Output only. Cloud Storage destination.
        #[prost(message, tag = "9")]
        DestinationGcsBucket(super::DestinationGcsBucket),
        /// Output only. Parallelstore destination.
        #[prost(message, tag = "10")]
        DestinationParallelstore(super::DestinationParallelstore),
    }
}
/// A collection of counters that report the progress of a transfer operation.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TransferCounters {
    /// Objects found in the data source that are scheduled to be transferred,
    /// excluding any that are filtered based on object conditions or skipped due
    /// to sync.
    #[prost(int64, tag = "1")]
    pub objects_found: i64,
    /// Bytes found in the data source that are scheduled to be transferred,
    /// excluding any that are filtered based on object conditions or skipped due
    /// to sync.
    #[prost(int64, tag = "2")]
    pub bytes_found: i64,
    /// Objects in the data source that are not transferred because they already
    /// exist in the data destination.
    #[prost(int64, tag = "3")]
    pub objects_skipped: i64,
    /// Bytes in the data source that are not transferred because they already
    /// exist in the data destination.
    #[prost(int64, tag = "4")]
    pub bytes_skipped: i64,
    /// Objects that are copied to the data destination.
    #[prost(int64, tag = "5")]
    pub objects_copied: i64,
    /// Bytes that are copied to the data destination.
    #[prost(int64, tag = "6")]
    pub bytes_copied: i64,
}
/// Type of transfer that occurred.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TransferType {
    /// Zero is an illegal value.
    Unspecified = 0,
    /// Imports to Parallelstore.
    Import = 1,
    /// Exports from Parallelstore.
    Export = 2,
}
impl TransferType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "TRANSFER_TYPE_UNSPECIFIED",
            Self::Import => "IMPORT",
            Self::Export => "EXPORT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRANSFER_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "IMPORT" => Some(Self::Import),
            "EXPORT" => Some(Self::Export),
            _ => None,
        }
    }
}
/// Represents the striping options for files.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FileStripeLevel {
    /// If not set, FileStripeLevel will default to FILE_STRIPE_LEVEL_BALANCED
    Unspecified = 0,
    /// Minimum file striping
    Min = 1,
    /// Medium file striping
    Balanced = 2,
    /// Maximum file striping
    Max = 3,
}
impl FileStripeLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "FILE_STRIPE_LEVEL_UNSPECIFIED",
            Self::Min => "FILE_STRIPE_LEVEL_MIN",
            Self::Balanced => "FILE_STRIPE_LEVEL_BALANCED",
            Self::Max => "FILE_STRIPE_LEVEL_MAX",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FILE_STRIPE_LEVEL_UNSPECIFIED" => Some(Self::Unspecified),
            "FILE_STRIPE_LEVEL_MIN" => Some(Self::Min),
            "FILE_STRIPE_LEVEL_BALANCED" => Some(Self::Balanced),
            "FILE_STRIPE_LEVEL_MAX" => Some(Self::Max),
            _ => None,
        }
    }
}
/// Represents the striping options for directories.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DirectoryStripeLevel {
    /// If not set, DirectoryStripeLevel will default to DIRECTORY_STRIPE_LEVEL_MAX
    Unspecified = 0,
    /// Minimum directory striping
    Min = 1,
    /// Medium directory striping
    Balanced = 2,
    /// Maximum directory striping
    Max = 3,
}
impl DirectoryStripeLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "DIRECTORY_STRIPE_LEVEL_UNSPECIFIED",
            Self::Min => "DIRECTORY_STRIPE_LEVEL_MIN",
            Self::Balanced => "DIRECTORY_STRIPE_LEVEL_BALANCED",
            Self::Max => "DIRECTORY_STRIPE_LEVEL_MAX",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DIRECTORY_STRIPE_LEVEL_UNSPECIFIED" => Some(Self::Unspecified),
            "DIRECTORY_STRIPE_LEVEL_MIN" => Some(Self::Min),
            "DIRECTORY_STRIPE_LEVEL_BALANCED" => Some(Self::Balanced),
            "DIRECTORY_STRIPE_LEVEL_MAX" => Some(Self::Max),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod parallelstore_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service describing handlers for resources
    /// Configures and manages parallelstore resources.
    ///
    /// Parallelstore service.
    ///
    /// The `parallelstore.googleapis.com` service implements the parallelstore API
    /// and defines the following resource model for managing instances:
    /// * The service works with a collection of cloud projects, named: `/projects/*`
    /// * Each project has a collection of available locations, named: `/locations/*`
    /// * Each location has a collection of instances named `/instances/*`.
    /// * Parallelstore instances are resources of the form:
    ///   `/projects/{project_id}/locations/{location_id}/instances/{instance_id}`
    ///
    /// Note that location_id must be a Google Cloud `zone`; for example:
    /// * `projects/12345/locations/us-central1-c/instances/my-parallelstore-share`
    #[derive(Debug, Clone)]
    pub struct ParallelstoreClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ParallelstoreClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ParallelstoreClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ParallelstoreClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ParallelstoreClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Lists all instances in a given project and location.
        pub async fn list_instances(
            &mut self,
            request: impl tonic::IntoRequest<super::ListInstancesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListInstancesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parallelstore.v1.Parallelstore/ListInstances",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parallelstore.v1.Parallelstore",
                        "ListInstances",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single instance.
        pub async fn get_instance(
            &mut self,
            request: impl tonic::IntoRequest<super::GetInstanceRequest>,
        ) -> std::result::Result<tonic::Response<super::Instance>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parallelstore.v1.Parallelstore/GetInstance",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parallelstore.v1.Parallelstore",
                        "GetInstance",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a Parallelstore instance in a given project and location.
        pub async fn create_instance(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateInstanceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parallelstore.v1.Parallelstore/CreateInstance",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parallelstore.v1.Parallelstore",
                        "CreateInstance",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates the parameters of a single instance.
        pub async fn update_instance(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateInstanceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parallelstore.v1.Parallelstore/UpdateInstance",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parallelstore.v1.Parallelstore",
                        "UpdateInstance",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single instance.
        pub async fn delete_instance(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteInstanceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parallelstore.v1.Parallelstore/DeleteInstance",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parallelstore.v1.Parallelstore",
                        "DeleteInstance",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Copies data from Cloud Storage to Parallelstore.
        pub async fn import_data(
            &mut self,
            request: impl tonic::IntoRequest<super::ImportDataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parallelstore.v1.Parallelstore/ImportData",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parallelstore.v1.Parallelstore",
                        "ImportData",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Copies data from Parallelstore to Cloud Storage.
        pub async fn export_data(
            &mut self,
            request: impl tonic::IntoRequest<super::ExportDataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parallelstore.v1.Parallelstore/ExportData",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parallelstore.v1.Parallelstore",
                        "ExportData",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
