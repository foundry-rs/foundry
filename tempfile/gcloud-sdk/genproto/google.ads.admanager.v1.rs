// This file is @generated by prost-build.
/// Wrapper message for
/// [AdUnitStatus][google.ads.admanager.v1.AdUnitStatusEnum.AdUnitStatus]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdUnitStatusEnum {}
/// Nested message and enum types in `AdUnitStatusEnum`.
pub mod ad_unit_status_enum {
    /// The status of an AdUnit.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum AdUnitStatus {
        /// Default value. This value is unused.
        Unspecified = 0,
        /// The ad unit is active, available for targeting, and serving.
        Active = 1,
        /// The ad unit will be visible in the UI, but ignored by serving.
        Inactive = 2,
        /// The ad unit will be hidden in the UI and ignored by serving.
        Archived = 3,
    }
    impl AdUnitStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "AD_UNIT_STATUS_UNSPECIFIED",
                Self::Active => "ACTIVE",
                Self::Inactive => "INACTIVE",
                Self::Archived => "ARCHIVED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "AD_UNIT_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
                "ACTIVE" => Some(Self::Active),
                "INACTIVE" => Some(Self::Inactive),
                "ARCHIVED" => Some(Self::Archived),
                _ => None,
            }
        }
    }
}
/// Wrapper message for
/// [SmartSizeMode][google.ads.admanager.v1.SmartSizeModeEnum.SmartSizeMode].
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SmartSizeModeEnum {}
/// Nested message and enum types in `SmartSizeModeEnum`.
pub mod smart_size_mode_enum {
    /// The smart size mode for this ad unit. This attribute is optional and
    /// defaults to SmartSizeMode.NONE for fixed sizes.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum SmartSizeMode {
        /// Default value. This value is unused.
        Unspecified = 0,
        /// Fixed size mode (default).
        None = 1,
        /// The height is fixed for the request, the width is a range.
        SmartBanner = 2,
        /// Height and width are ranges.
        DynamicSize = 3,
    }
    impl SmartSizeMode {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "SMART_SIZE_MODE_UNSPECIFIED",
                Self::None => "NONE",
                Self::SmartBanner => "SMART_BANNER",
                Self::DynamicSize => "DYNAMIC_SIZE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SMART_SIZE_MODE_UNSPECIFIED" => Some(Self::Unspecified),
                "NONE" => Some(Self::None),
                "SMART_BANNER" => Some(Self::SmartBanner),
                "DYNAMIC_SIZE" => Some(Self::DynamicSize),
                _ => None,
            }
        }
    }
}
/// Wrapper message for
/// [TargetWindow][google.ads.admanager.v1.TargetWindowEnum.TargetWindow].
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TargetWindowEnum {}
/// Nested message and enum types in `TargetWindowEnum`.
pub mod target_window_enum {
    /// Corresponds to an HTML link's target attribute.
    /// See <http://www.w3.org/TR/html401/present/frames.html#adef-target>
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum TargetWindow {
        /// Default value. This value is unused.
        Unspecified = 0,
        /// Specifies that the link should open in the full body of the page.
        Top = 1,
        /// Specifies that the link should open in a new window.
        Blank = 2,
    }
    impl TargetWindow {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "TARGET_WINDOW_UNSPECIFIED",
                Self::Top => "TOP",
                Self::Blank => "BLANK",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "TARGET_WINDOW_UNSPECIFIED" => Some(Self::Unspecified),
                "TOP" => Some(Self::Top),
                "BLANK" => Some(Self::Blank),
                _ => None,
            }
        }
    }
}
/// Represents a Label that can be applied to an entity.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppliedLabel {
    /// Required. The label to be applied.
    /// Format: "networks/{network_code}/labels/{label_id}"
    #[prost(string, tag = "1")]
    pub label: ::prost::alloc::string::String,
    /// Specifies whether or not to negate the effects of the label.
    #[prost(bool, tag = "2")]
    pub negated: bool,
}
/// Wrapper message for
/// [EnvironmentType][google.ads.admanager.v1.EnvironmentTypeEnum.EnvironmentType].
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnvironmentTypeEnum {}
/// Nested message and enum types in `EnvironmentTypeEnum`.
pub mod environment_type_enum {
    /// The different environments in which an ad can be shown.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum EnvironmentType {
        /// No value specified
        Unspecified = 0,
        /// A regular web browser.
        Browser = 1,
        /// Video players.
        VideoPlayer = 2,
    }
    impl EnvironmentType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "ENVIRONMENT_TYPE_UNSPECIFIED",
                Self::Browser => "BROWSER",
                Self::VideoPlayer => "VIDEO_PLAYER",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ENVIRONMENT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "BROWSER" => Some(Self::Browser),
                "VIDEO_PLAYER" => Some(Self::VideoPlayer),
                _ => None,
            }
        }
    }
}
/// Wrapper message for TimeUnit.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TimeUnitEnum {}
/// Nested message and enum types in `TimeUnitEnum`.
pub mod time_unit_enum {
    /// Unit of time for the frequency cap.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum TimeUnit {
        /// Default value. This value is unused.
        Unspecified = 0,
        /// Minute
        Minute = 1,
        /// Hour
        Hour = 2,
        /// Day
        Day = 3,
        /// Week
        Week = 4,
        /// Month
        Month = 5,
        /// Lifetime
        Lifetime = 6,
        /// Per pod of ads in a video stream. Only valid for entities in a
        /// VIDEO_PLAYER environment.
        Pod = 7,
        /// Per video stream. Only valid for entities in a VIDEO_PLAYER environment.
        Stream = 8,
    }
    impl TimeUnit {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "TIME_UNIT_UNSPECIFIED",
                Self::Minute => "MINUTE",
                Self::Hour => "HOUR",
                Self::Day => "DAY",
                Self::Week => "WEEK",
                Self::Month => "MONTH",
                Self::Lifetime => "LIFETIME",
                Self::Pod => "POD",
                Self::Stream => "STREAM",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "TIME_UNIT_UNSPECIFIED" => Some(Self::Unspecified),
                "MINUTE" => Some(Self::Minute),
                "HOUR" => Some(Self::Hour),
                "DAY" => Some(Self::Day),
                "WEEK" => Some(Self::Week),
                "MONTH" => Some(Self::Month),
                "LIFETIME" => Some(Self::Lifetime),
                "POD" => Some(Self::Pod),
                "STREAM" => Some(Self::Stream),
                _ => None,
            }
        }
    }
}
/// Represents a Frequency Cap that can be applied to an entity.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FrequencyCap {
    /// The maximum number of impressions for this frequency cap.
    #[prost(int64, optional, tag = "1")]
    pub max_impressions: ::core::option::Option<i64>,
    /// The number of time units over which the frequency cap is effective.
    #[prost(int64, optional, tag = "2")]
    pub time_amount: ::core::option::Option<i64>,
    /// The units of time of this frequency cap.
    #[prost(enumeration = "time_unit_enum::TimeUnit", optional, tag = "3")]
    pub time_unit: ::core::option::Option<i32>,
}
/// Wrapper message for
/// [SizeType][google.ads.admanager.v1.SizeTypeEnum.SizeType].
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SizeTypeEnum {}
/// Nested message and enum types in `SizeTypeEnum`.
pub mod size_type_enum {
    /// The different Size types for an ad.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum SizeType {
        /// Default value. This value is unused.
        Unspecified = 0,
        /// Dimension based size, an actual height and width in pixels.
        Pixel = 1,
        /// Size is expressed as a ratio. For example, 4:1 could be
        /// met by a 100 x 25 sized image.
        AspectRatio = 2,
        /// Out-of-page (Interstitial) size that is not related to the slot it is
        /// served. This must be used with 1x1 size.
        Interstitial = 3,
        /// Size is ignored. This must be used with 1x1
        /// size.
        Ignored = 4,
        /// Native size, which is a function of the how the client renders the
        /// creative. This must be used with 1x1 size.
        Native = 5,
        /// Fluid size. Automatically sizes the ad by filling the width of the
        /// enclosing column and adjusting the height as appropriate. This must be
        /// used with 1x1 size.
        Fluid = 6,
        /// Audio size. Used with audio ads. This must be used with 1x1 size.
        Audio = 7,
    }
    impl SizeType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "SIZE_TYPE_UNSPECIFIED",
                Self::Pixel => "PIXEL",
                Self::AspectRatio => "ASPECT_RATIO",
                Self::Interstitial => "INTERSTITIAL",
                Self::Ignored => "IGNORED",
                Self::Native => "NATIVE",
                Self::Fluid => "FLUID",
                Self::Audio => "AUDIO",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "SIZE_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "PIXEL" => Some(Self::Pixel),
                "ASPECT_RATIO" => Some(Self::AspectRatio),
                "INTERSTITIAL" => Some(Self::Interstitial),
                "IGNORED" => Some(Self::Ignored),
                "NATIVE" => Some(Self::Native),
                "FLUID" => Some(Self::Fluid),
                "AUDIO" => Some(Self::Audio),
                _ => None,
            }
        }
    }
}
/// Represents the dimensions of an AdUnit, LineItem, or Creative.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Size {
    /// Required. The width of the [Creative](google.ads.admanager.v1.Creative),
    /// [AdUnit](google.ads.admanager.v1.AdUnit), or
    /// [LineItem](google.ads.admanager.v1.LineItem).
    #[prost(int32, tag = "1")]
    pub width: i32,
    /// Required. The height of the [Creative](google.ads.admanager.v1.Creative),
    /// [AdUnit](google.ads.admanager.v1.AdUnit), or
    /// [LineItem](google.ads.admanager.v1.LineItem).
    #[prost(int32, tag = "2")]
    pub height: i32,
    /// Required. The SizeType of the
    /// [Creative](google.ads.admanager.v1.Creative),
    /// [AdUnit](google.ads.admanager.v1.AdUnit), or
    /// [LineItem](google.ads.admanager.v1.LineItem).
    #[prost(enumeration = "size_type_enum::SizeType", tag = "3")]
    pub size_type: i32,
}
/// The AdUnit resource.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdUnit {
    /// Identifier. The resource name of the AdUnit.
    /// Format: `networks/{network_code}/adUnits/{ad_unit_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. AdUnit ID.
    #[prost(int64, tag = "15")]
    pub ad_unit_id: i64,
    /// Required. Immutable. The AdUnit's parent. Every ad unit has a parent except
    /// for the root ad unit, which is created by Google. Format:
    /// "networks/{network_code}/adUnits/{ad_unit_id}"
    #[prost(string, tag = "10")]
    pub parent_ad_unit: ::prost::alloc::string::String,
    /// Output only. The path to this AdUnit in the ad unit hierarchy represented
    /// as a list from the root to this ad unit's parent. For root ad units, this
    /// list is empty.
    #[prost(message, repeated, tag = "11")]
    pub parent_path: ::prost::alloc::vec::Vec<AdUnitParent>,
    /// Required. The display name of the ad unit. Its maximum length is 255
    /// characters.
    #[prost(string, tag = "9")]
    pub display_name: ::prost::alloc::string::String,
    /// Immutable. A string used to uniquely identify the ad unit for the purposes
    /// of serving the ad. This attribute is optional and can be set during ad unit
    /// creation. If it is not provided, it will be assigned by Google based on the
    /// ad unit ID.
    #[prost(string, tag = "2")]
    pub ad_unit_code: ::prost::alloc::string::String,
    /// Output only. The status of this ad unit.  It defaults to ACTIVE.
    #[prost(enumeration = "ad_unit_status_enum::AdUnitStatus", tag = "13")]
    pub status: i32,
    /// Optional. The target window directly applied to this AdUnit.
    /// If this field is not set, this AdUnit uses the target window specified in
    /// effectiveTargetWindow.
    #[prost(enumeration = "target_window_enum::TargetWindow", tag = "44")]
    pub applied_target_window: i32,
    /// Output only. Non-empty default. The target window of this AdUnit. This
    /// value is inherited from ancestor AdUnits and defaults to TOP if no AdUnit
    /// in the hierarchy specifies it.
    #[prost(enumeration = "target_window_enum::TargetWindow", tag = "45")]
    pub effective_target_window: i32,
    /// Optional. The resource names of Teams directly applied to this AdUnit.
    /// Format: "networks/{network_code}/teams/{team_id}"
    #[prost(string, repeated, tag = "3")]
    pub applied_teams: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Output only. The resource names of all Teams that this AdUnit is on as well
    /// as those inherited from parent AdUnits. Format:
    /// "networks/{network_code}/teams/{team_id}"
    #[prost(string, repeated, tag = "4")]
    pub teams: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Optional. A description of the ad unit. The maximum length is 65,535
    /// characters.
    #[prost(string, tag = "5")]
    pub description: ::prost::alloc::string::String,
    /// Optional. If this field is set to true, then the AdUnit will not be
    /// implicitly targeted when its parent is. Traffickers must explicitly
    /// target such an AdUnit or else no line items will serve to it. This
    /// feature is only available for Ad Manager 360 accounts.
    #[prost(bool, tag = "6")]
    pub explicitly_targeted: bool,
    /// Output only. This field is set to true if the ad unit has any children.
    #[prost(bool, tag = "7")]
    pub has_children: bool,
    /// Output only. The time this AdUnit was last modified.
    #[prost(message, optional, tag = "8")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Optional. The sizes that can be served inside this ad unit.
    #[prost(message, repeated, tag = "14")]
    pub ad_unit_sizes: ::prost::alloc::vec::Vec<AdUnitSize>,
    /// Optional. Determines what set top box video on demand channel this ad unit
    /// corresponds to in an external set top box ad campaign system.
    #[prost(string, tag = "17")]
    pub external_set_top_box_channel_id: ::prost::alloc::string::String,
    /// Optional. The duration after which an Ad Unit will automatically refresh.
    /// This is only valid for ad units in mobile apps. If not set, the ad unit
    /// will not refresh.
    #[prost(message, optional, tag = "19")]
    pub refresh_delay: ::core::option::Option<::prost_types::Duration>,
    /// Optional. The set of labels applied directly to this ad unit.
    #[prost(message, repeated, tag = "21")]
    pub applied_labels: ::prost::alloc::vec::Vec<AppliedLabel>,
    /// Output only. Contains the set of labels applied directly to the ad unit as
    /// well as those inherited from the parent ad units. If a label has been
    /// negated, only the negated label is returned. This field is readonly and is
    /// assigned by Google.
    #[prost(message, repeated, tag = "22")]
    pub effective_applied_labels: ::prost::alloc::vec::Vec<AppliedLabel>,
    /// Optional. The set of label frequency caps applied directly to this ad unit.
    /// There is a limit of 10 label frequency caps per ad unit.
    #[prost(message, repeated, tag = "23")]
    pub applied_label_frequency_caps: ::prost::alloc::vec::Vec<LabelFrequencyCap>,
    /// Output only. The label frequency caps applied directly to the ad unit as
    /// well as those inherited from parent ad units.
    #[prost(message, repeated, tag = "24")]
    pub effective_label_frequency_caps: ::prost::alloc::vec::Vec<LabelFrequencyCap>,
    /// Optional. The smart size mode for this ad unit. This attribute is optional
    /// and defaults to SmartSizeMode.NONE for fixed sizes.
    #[prost(enumeration = "smart_size_mode_enum::SmartSizeMode", tag = "25")]
    pub smart_size_mode: i32,
    /// Optional. The value of AdSense enabled directly applied to this ad unit.
    /// This attribute is optional and if not specified this ad unit will inherit
    /// the value of effectiveAdsenseEnabled from its ancestors.
    #[prost(bool, optional, tag = "26")]
    pub applied_adsense_enabled: ::core::option::Option<bool>,
    /// Output only. Specifies whether or not the AdUnit is enabled for serving ads
    /// from the AdSense content network. This attribute defaults to the ad unit's
    /// parent or ancestor's setting if one has been set. If no ancestor of the ad
    /// unit has set appliedAdsenseEnabled, the attribute is defaulted to true.
    #[prost(bool, tag = "27")]
    pub effective_adsense_enabled: bool,
}
/// Represents the size, environment, and companions of an ad in an ad unit.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdUnitSize {
    /// Required. The Size of the AdUnit.
    #[prost(message, optional, tag = "1")]
    pub size: ::core::option::Option<Size>,
    /// Required. The EnvironmentType of the AdUnit
    #[prost(enumeration = "environment_type_enum::EnvironmentType", tag = "2")]
    pub environment_type: i32,
    /// The companions for this ad unit size. Companions are only valid if the
    /// environment is
    /// [VIDEO_PLAYER][google.ads.admanager.v1.EnvironmentTypeEnum.EnvironmentType].
    #[prost(message, repeated, tag = "3")]
    pub companions: ::prost::alloc::vec::Vec<Size>,
}
/// The summary of a parent AdUnit.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdUnitParent {
    /// Output only. The parent of the current AdUnit
    /// Format: `networks/{network_code}/adUnits/{ad_unit_id}`
    #[prost(string, tag = "1")]
    pub parent_ad_unit: ::prost::alloc::string::String,
    /// Output only. The display name of the parent AdUnit.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// Output only. A string used to uniquely identify the ad unit for the
    /// purposes of serving the ad.
    #[prost(string, tag = "3")]
    pub ad_unit_code: ::prost::alloc::string::String,
}
/// Frequency cap using a label.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LabelFrequencyCap {
    /// Required. The label to used for frequency capping.
    /// Format: "networks/{network_code}/labels/{label_id}"
    #[prost(string, tag = "1")]
    pub label: ::prost::alloc::string::String,
    /// The frequency cap.
    #[prost(message, optional, tag = "2")]
    pub frequency_cap: ::core::option::Option<FrequencyCap>,
}
/// Request object for GetAdUnit method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAdUnitRequest {
    /// Required. The resource name of the AdUnit.
    /// Format: `networks/{network_code}/adUnits/{ad_unit_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request object for ListAdUnits method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAdUnitsRequest {
    /// Required. The parent, which owns this collection of AdUnits.
    /// Format: `networks/{network_code}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. The maximum number of AdUnits to return. The service may return
    /// fewer than this value. If unspecified, at most 50 ad units will be
    /// returned. The maximum value is 1000; values above 1000 will be coerced to
    /// 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A page token, received from a previous `ListAdUnits` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListAdUnits` must match
    /// the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Expression to filter the response.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters>
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Expression to specify sorting order.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters#order>
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
    /// Optional. Number of individual resources to skip while paginating.
    #[prost(int32, tag = "6")]
    pub skip: i32,
}
/// Response object for ListAdUnitsRequest containing matching AdUnit resources.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAdUnitsResponse {
    /// The AdUnit from the specified network.
    #[prost(message, repeated, tag = "1")]
    pub ad_units: ::prost::alloc::vec::Vec<AdUnit>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Total number of AdUnits.
    /// If a filter was included in the request, this reflects the total number
    /// after the filtering is applied.
    ///
    /// `total_size` will not be calculated in the response unless it has been
    /// included in a response field mask. The response field mask can be provided
    /// to the method by using the URL parameter `$fields` or `fields`, or by using
    /// the HTTP/gRPC header `X-Goog-FieldMask`.
    ///
    /// For more information, see
    /// <https://developers.google.com/ad-manager/api/beta/field-masks>
    #[prost(int32, tag = "3")]
    pub total_size: i32,
}
/// Request object for ListAdUnitSizes method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAdUnitSizesRequest {
    /// Required. The parent, which owns this collection of AdUnitSizes.
    /// Format: `networks/{network_code}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. The maximum number of AdUnitSizes to return. The service may
    /// return fewer than this value. If unspecified, at most 50 ad unit sizes will
    /// be returned. The maximum value is 1000; values above 1000 will be coerced
    /// to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A page token, received from a previous `ListAdUnitSizes` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListAdUnitSizes` must
    /// match the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Expression to filter the response.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters>
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Expression to specify sorting order.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters#order>
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
    /// Optional. Number of individual resources to skip while paginating.
    #[prost(int32, tag = "6")]
    pub skip: i32,
}
/// Response object for ListAdUnitSizesRequest containing matching AdUnitSizes.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListAdUnitSizesResponse {
    /// The AdUnitSizes from the specified network.
    #[prost(message, repeated, tag = "1")]
    pub ad_unit_sizes: ::prost::alloc::vec::Vec<AdUnitSize>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Total number of AdUnitSizes.
    /// If a filter was included in the request, this reflects the total number
    /// after the filtering is applied.
    ///
    /// `total_size` will not be calculated in the response unless it has been
    /// included in a response field mask. The response field mask can be provided
    /// to the method by using the URL parameter `$fields` or `fields`, or by using
    /// the HTTP/gRPC header `X-Goog-FieldMask`.
    ///
    /// For more information, see
    /// <https://developers.google.com/ad-manager/api/beta/field-masks>
    #[prost(int32, tag = "3")]
    pub total_size: i32,
}
/// Generated client implementations.
pub mod ad_unit_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provides methods for handling AdUnit objects.
    #[derive(Debug, Clone)]
    pub struct AdUnitServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl AdUnitServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> AdUnitServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AdUnitServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            AdUnitServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// API to retrieve an AdUnit object.
        pub async fn get_ad_unit(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAdUnitRequest>,
        ) -> std::result::Result<tonic::Response<super::AdUnit>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.AdUnitService/GetAdUnit",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.ads.admanager.v1.AdUnitService", "GetAdUnit"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to retrieve a list of AdUnit objects.
        pub async fn list_ad_units(
            &mut self,
            request: impl tonic::IntoRequest<super::ListAdUnitsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListAdUnitsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.AdUnitService/ListAdUnits",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.AdUnitService",
                        "ListAdUnits",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to retrieve a list of AdUnitSize objects.
        pub async fn list_ad_unit_sizes(
            &mut self,
            request: impl tonic::IntoRequest<super::ListAdUnitSizesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListAdUnitSizesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.AdUnitService/ListAdUnitSizes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.AdUnitService",
                        "ListAdUnitSizes",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// / AdManagerError contains all the information required for processing a
/// / particular error thrown by the AdManager API.
/// /
/// / At least one AdManagerError should be included in all error messages sent
/// to / the client.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdManagerError {
    /// The unique identifying string for this error.
    #[prost(string, tag = "1")]
    pub error_code: ::prost::alloc::string::String,
    /// A publisher appropriate explanation of this error.
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// The field path that triggered this error.
    #[prost(string, tag = "3")]
    pub field_path: ::prost::alloc::string::String,
    /// The value that triggered this error.
    #[prost(string, tag = "4")]
    pub trigger: ::prost::alloc::string::String,
    /// The stack trace that accompanies this error.
    #[prost(string, tag = "5")]
    pub stack_trace: ::prost::alloc::string::String,
    /// A list of messages that carry any additional error details.
    #[prost(message, repeated, tag = "6")]
    pub details: ::prost::alloc::vec::Vec<::prost_types::Any>,
}
/// Wrapper message for
/// [CompanyCreditStatus][google.ads.admanager.v1.CompanyCreditStatusEnum.CompanyCreditStatus]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CompanyCreditStatusEnum {}
/// Nested message and enum types in `CompanyCreditStatusEnum`.
pub mod company_credit_status_enum {
    /// The credit status of a company.
    ///
    /// Credit statuses specify the credit-worthiness of a company and affect the
    /// ad serving of campaigns belonging to the company.
    ///
    /// In basic settings, only the
    /// [ACTIVE][google.ads.admanager.v1.CompanyCreditStatusEnum.CompanyCreditStatus.ACTIVE]
    /// and
    /// [INACTIVE][google.ads.admanager.v1.CompanyCreditStatusEnum.CompanyCreditStatus.INACTIVE]
    /// credit statuses are applicable. In advance settings, all credit statuses
    /// are applicable.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CompanyCreditStatus {
        /// No value specified
        Unspecified = 0,
        /// The company's credit status is active.
        ///
        /// Line items belonging to the company can serve.
        ///
        /// This credit status is the default for basic settings and is available in
        /// both basic and advance settings.
        Active = 1,
        /// The company's credit status is inactive.
        ///
        /// Line items belonging to the company cannot be activated. However, line
        /// items that were activated before the credit status changed will remain
        /// active. New orders or line items belonging to the company cannot be
        /// created.
        ///
        /// Companies with this credit status will be hidden by default in company
        /// search results.
        ///
        /// This credit status is available in both basic and advance settings.
        Inactive = 2,
        /// The company's credit status is on hold.
        ///
        /// Line items belonging to the company cannot be activated. However, line
        /// items that were activated before the credit status changed will remain
        /// active. New orders or line items belonging to the company can be
        /// created.
        ///
        /// This credit status is the default in advance settings and is only
        /// available in advance settings.
        OnHold = 3,
        /// The company's credit status is stopped.
        ///
        /// Line items belonging to the company cannot be activated. However, line
        /// items that were activated before the credit status changed will remain
        /// active. New orders or line items belonging to the company cannot be
        /// created.
        ///
        /// This credit status is only available in advance settings.
        Stop = 4,
        /// The company's credit status is blocked.
        ///
        /// All active line items belonging to the company will stop serving with
        /// immediate effect. Line items belonging to the company cannot be
        /// activated, and new orders or line items belonging to the company cannot
        /// be created.
        ///
        /// This credit status is only available in advance settings.
        Blocked = 5,
    }
    impl CompanyCreditStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "COMPANY_CREDIT_STATUS_UNSPECIFIED",
                Self::Active => "ACTIVE",
                Self::Inactive => "INACTIVE",
                Self::OnHold => "ON_HOLD",
                Self::Stop => "STOP",
                Self::Blocked => "BLOCKED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "COMPANY_CREDIT_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
                "ACTIVE" => Some(Self::Active),
                "INACTIVE" => Some(Self::Inactive),
                "ON_HOLD" => Some(Self::OnHold),
                "STOP" => Some(Self::Stop),
                "BLOCKED" => Some(Self::Blocked),
                _ => None,
            }
        }
    }
}
/// Wrapper message for
/// [CompanyType][google.ads.admanager.v1.CompanyTypeEnum.CompanyType]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CompanyTypeEnum {}
/// Nested message and enum types in `CompanyTypeEnum`.
pub mod company_type_enum {
    /// The type of a company.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CompanyType {
        /// No value specified
        Unspecified = 0,
        /// A business entity that purchases ad inventory.
        Advertiser = 1,
        /// A company representing the publisher's own advertiser for house ads.
        HouseAdvertiser = 2,
        /// An organization that manages ad accounts and offers services, such as ad
        /// creation, placement, and management to advertisers.
        Agency = 3,
        /// A company representing the publisher's own agency.
        HouseAgency = 4,
        /// A company representing multiple advertisers and agencies.
        AdNetwork = 5,
    }
    impl CompanyType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "COMPANY_TYPE_UNSPECIFIED",
                Self::Advertiser => "ADVERTISER",
                Self::HouseAdvertiser => "HOUSE_ADVERTISER",
                Self::Agency => "AGENCY",
                Self::HouseAgency => "HOUSE_AGENCY",
                Self::AdNetwork => "AD_NETWORK",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "COMPANY_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "ADVERTISER" => Some(Self::Advertiser),
                "HOUSE_ADVERTISER" => Some(Self::HouseAdvertiser),
                "AGENCY" => Some(Self::Agency),
                "HOUSE_AGENCY" => Some(Self::HouseAgency),
                "AD_NETWORK" => Some(Self::AdNetwork),
                _ => None,
            }
        }
    }
}
/// The `Company` resource.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Company {
    /// Identifier. The resource name of the `Company`.
    /// Format: `networks/{network_code}/companies/{company_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. `Company` ID.
    #[prost(int64, tag = "2")]
    pub company_id: i64,
    /// Required. The display name of the `Company`.
    ///
    /// This value has a maximum length of 127 characters.
    #[prost(string, tag = "3")]
    pub display_name: ::prost::alloc::string::String,
    /// Required. The type of the `Company`.
    #[prost(enumeration = "company_type_enum::CompanyType", tag = "4")]
    pub r#type: i32,
    /// Optional. The address for the `Company`.
    ///
    /// This value has a maximum length of 1024 characters.
    #[prost(string, tag = "5")]
    pub address: ::prost::alloc::string::String,
    /// Optional. The email for the `Company`.
    ///
    /// This value has a maximum length of 128 characters.
    #[prost(string, tag = "6")]
    pub email: ::prost::alloc::string::String,
    /// Optional. The fax number for the `Company`.
    ///
    /// This value has a maximum length of 63 characters.
    #[prost(string, tag = "7")]
    pub fax: ::prost::alloc::string::String,
    /// Optional. The phone number for the `Company`.
    ///
    /// This value has a maximum length of 63 characters.
    #[prost(string, tag = "8")]
    pub phone: ::prost::alloc::string::String,
    /// Optional. The external ID for the `Company`.
    ///
    /// This value has a maximum length of 255 characters.
    #[prost(string, tag = "9")]
    pub external_id: ::prost::alloc::string::String,
    /// Optional. Comments about the `Company`.
    ///
    /// This value has a maximum length of 1024 characters.
    #[prost(string, tag = "10")]
    pub comment: ::prost::alloc::string::String,
    /// Optional. The credit status of the `Company`.
    ///
    /// This attribute defaults to `ACTIVE` if basic settings are enabled and
    /// `ON_HOLD` if advance settings are enabled.
    #[prost(enumeration = "company_credit_status_enum::CompanyCreditStatus", tag = "11")]
    pub credit_status: i32,
    /// Optional. The labels that are directly applied to the `Company`.
    #[prost(message, repeated, tag = "12")]
    pub applied_labels: ::prost::alloc::vec::Vec<AppliedLabel>,
    /// Optional. The resource names of primary Contact of the `Company`.
    /// Format: "networks/{network_code}/contacts/{contact_id}"
    #[prost(string, optional, tag = "13")]
    pub primary_contact: ::core::option::Option<::prost::alloc::string::String>,
    /// Optional. The resource names of Teams that are directly associated with the
    /// `Company`. Format: "networks/{network_code}/teams/{team_id}"
    #[prost(string, repeated, tag = "14")]
    pub applied_teams: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Output only. The time the `Company` was last modified.
    #[prost(message, optional, tag = "15")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Optional. The ID of the Google-recognized canonicalized form of the
    /// `Company`.
    #[prost(int64, tag = "16")]
    pub third_party_company_id: i64,
}
/// Request object for `GetCompany` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCompanyRequest {
    /// Required. The resource name of the Company.
    /// Format: `networks/{network_code}/companies/{company_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request object for `ListCompanies` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCompaniesRequest {
    /// Required. The parent, which owns this collection of Companies.
    /// Format: `networks/{network_code}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. The maximum number of `Companies` to return. The service may
    /// return fewer than this value. If unspecified, at most 50 `Companies` will
    /// be returned. The maximum value is 1000; values above 1000 will be coerced
    /// to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A page token, received from a previous `ListCompanies` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListCompanies` must
    /// match the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Expression to filter the response.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters>
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Expression to specify sorting order.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters#order>
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
    /// Optional. Number of individual resources to skip while paginating.
    #[prost(int32, tag = "6")]
    pub skip: i32,
}
/// Response object for `ListCompaniesRequest` containing matching `Company`
/// objects.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCompaniesResponse {
    /// The `Company` objects from the specified network.
    #[prost(message, repeated, tag = "1")]
    pub companies: ::prost::alloc::vec::Vec<Company>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Total number of `Company` objects.
    /// If a filter was included in the request, this reflects the total number
    /// after the filtering is applied.
    ///
    /// `total_size` will not be calculated in the response unless it has been
    /// included in a response field mask. The response field mask can be provided
    /// to the method by using the URL parameter `$fields` or `fields`, or by using
    /// the HTTP/gRPC header `X-Goog-FieldMask`.
    ///
    /// For more information, see
    /// <https://developers.google.com/ad-manager/api/beta/field-masks>
    #[prost(int32, tag = "3")]
    pub total_size: i32,
}
/// Generated client implementations.
pub mod company_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provides methods for handling `Company` objects.
    #[derive(Debug, Clone)]
    pub struct CompanyServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl CompanyServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> CompanyServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> CompanyServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            CompanyServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// API to retrieve a `Company` object.
        pub async fn get_company(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCompanyRequest>,
        ) -> std::result::Result<tonic::Response<super::Company>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.CompanyService/GetCompany",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.CompanyService",
                        "GetCompany",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to retrieve a list of `Company` objects.
        pub async fn list_companies(
            &mut self,
            request: impl tonic::IntoRequest<super::ListCompaniesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListCompaniesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.CompanyService/ListCompanies",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.CompanyService",
                        "ListCompanies",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// A contact represents a person who is affiliated with a single company. A
/// contact can have a variety of contact information associated to it, and can
/// be invited to view their company's orders, line items, creatives, and
/// reports.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Contact {
    /// Identifier. The resource name of the `Contact`.
    /// Format: `networks/{network_code}/contacts/{contact_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. The unique ID of the contact. This value is readonly and is
    /// assigned by Google.
    #[prost(int64, tag = "2")]
    pub contact_id: i64,
}
/// Wrapper message for
/// [CustomFieldDataType][google.ads.admanager.v1.CustomFieldDataTypeEnum.CustomFieldDataType]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CustomFieldDataTypeEnum {}
/// Nested message and enum types in `CustomFieldDataTypeEnum`.
pub mod custom_field_data_type_enum {
    /// The data type for a CustomField.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CustomFieldDataType {
        /// No value specified
        Unspecified = 0,
        /// A string field
        ///
        /// The max length is 255 characters.
        String = 1,
        /// A number field.
        Number = 2,
        /// A "Yes" or "No" toggle field.
        Toggle = 3,
        /// A drop-down field.
        DropDown = 4,
    }
    impl CustomFieldDataType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "CUSTOM_FIELD_DATA_TYPE_UNSPECIFIED",
                Self::String => "STRING",
                Self::Number => "NUMBER",
                Self::Toggle => "TOGGLE",
                Self::DropDown => "DROP_DOWN",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CUSTOM_FIELD_DATA_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "STRING" => Some(Self::String),
                "NUMBER" => Some(Self::Number),
                "TOGGLE" => Some(Self::Toggle),
                "DROP_DOWN" => Some(Self::DropDown),
                _ => None,
            }
        }
    }
}
/// Wrapper message for
/// [CustomFieldEntityType][google.ads.admanager.v1.CustomFieldEntityTypeEnum.CustomFieldEntityType]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CustomFieldEntityTypeEnum {}
/// Nested message and enum types in `CustomFieldEntityTypeEnum`.
pub mod custom_field_entity_type_enum {
    /// The types of entities that a CustomField can be applied to.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CustomFieldEntityType {
        /// No value specified
        Unspecified = 0,
        /// The CustomField is applied to LineItems.
        LineItem = 1,
        /// The CustomField is applied to Orders.
        Order = 2,
        /// The CustomField is applied to Creatives.
        Creative = 3,
        /// The CustomField is applied to Proposals.
        Proposal = 4,
        /// The CustomField is applied to ProposalLineItems.
        ProposalLineItem = 5,
    }
    impl CustomFieldEntityType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "CUSTOM_FIELD_ENTITY_TYPE_UNSPECIFIED",
                Self::LineItem => "LINE_ITEM",
                Self::Order => "ORDER",
                Self::Creative => "CREATIVE",
                Self::Proposal => "PROPOSAL",
                Self::ProposalLineItem => "PROPOSAL_LINE_ITEM",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CUSTOM_FIELD_ENTITY_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "LINE_ITEM" => Some(Self::LineItem),
                "ORDER" => Some(Self::Order),
                "CREATIVE" => Some(Self::Creative),
                "PROPOSAL" => Some(Self::Proposal),
                "PROPOSAL_LINE_ITEM" => Some(Self::ProposalLineItem),
                _ => None,
            }
        }
    }
}
/// Wrapper message for
/// [CustomFieldStatus][google.ads.admanager.v1.CustomFieldStatusEnum.CustomFieldStatus]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CustomFieldStatusEnum {}
/// Nested message and enum types in `CustomFieldStatusEnum`.
pub mod custom_field_status_enum {
    /// The status of the CustomField.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CustomFieldStatus {
        /// No value specified
        Unspecified = 0,
        /// The CustomField is active.
        Active = 1,
        /// The CustomField is inactive.
        Inactive = 2,
    }
    impl CustomFieldStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "CUSTOM_FIELD_STATUS_UNSPECIFIED",
                Self::Active => "ACTIVE",
                Self::Inactive => "INACTIVE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CUSTOM_FIELD_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
                "ACTIVE" => Some(Self::Active),
                "INACTIVE" => Some(Self::Inactive),
                _ => None,
            }
        }
    }
}
/// Wrapper message for
/// [CustomFieldVisibility][google.ads.admanager.v1.CustomFieldVisibilityEnum.CustomFieldVisibility]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CustomFieldVisibilityEnum {}
/// Nested message and enum types in `CustomFieldVisibilityEnum`.
pub mod custom_field_visibility_enum {
    /// The visibility level of a CustomField.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CustomFieldVisibility {
        /// No value specified
        Unspecified = 0,
        /// The CustomField is not visible in the UI and only visible through the
        /// API.
        Hidden = 1,
        /// The CustomField is visible in the UI and only editable through the API.
        ReadOnly = 2,
        /// The CustomField is visible and editable in both the API and UI.
        Editable = 3,
    }
    impl CustomFieldVisibility {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "CUSTOM_FIELD_VISIBILITY_UNSPECIFIED",
                Self::Hidden => "HIDDEN",
                Self::ReadOnly => "READ_ONLY",
                Self::Editable => "EDITABLE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CUSTOM_FIELD_VISIBILITY_UNSPECIFIED" => Some(Self::Unspecified),
                "HIDDEN" => Some(Self::Hidden),
                "READ_ONLY" => Some(Self::ReadOnly),
                "EDITABLE" => Some(Self::Editable),
                _ => None,
            }
        }
    }
}
/// An additional, user-created field on an entity.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomField {
    /// Identifier. The resource name of the `CustomField`.
    /// Format: `networks/{network_code}/customFields/{custom_field_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. Unique ID of the CustomField. This value is readonly and is
    /// assigned by Google.
    #[prost(int64, tag = "2")]
    pub custom_field_id: i64,
    /// Required. Name of the CustomField. The max length is 127 characters.
    #[prost(string, tag = "3")]
    pub display_name: ::prost::alloc::string::String,
    /// Optional. A description of the custom field. The maximum length is 511
    /// characters.
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
    /// Output only. The status of the `CustomField`.
    #[prost(enumeration = "custom_field_status_enum::CustomFieldStatus", tag = "5")]
    pub status: i32,
    /// Required. The type of entity the `CustomField` can be applied to.
    #[prost(
        enumeration = "custom_field_entity_type_enum::CustomFieldEntityType",
        tag = "7"
    )]
    pub entity_type: i32,
    /// Required. The data type of the `CustomField`.
    #[prost(enumeration = "custom_field_data_type_enum::CustomFieldDataType", tag = "8")]
    pub data_type: i32,
    /// Required. The visibility of the `CustomField`.
    #[prost(
        enumeration = "custom_field_visibility_enum::CustomFieldVisibility",
        tag = "9"
    )]
    pub visibility: i32,
    /// Optional. The drop-down options for the `CustomField`.
    ///
    /// Only applicable for `CustomField` with the drop-down data type.
    #[prost(message, repeated, tag = "10")]
    pub options: ::prost::alloc::vec::Vec<CustomFieldOption>,
}
/// An option for a drop-down `CustomField`.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomFieldOption {
    /// Output only. `CustomFieldOption` ID.
    #[prost(int64, tag = "1")]
    pub custom_field_option_id: i64,
    /// Required. The display name of the `CustomFieldOption`.
    ///
    /// This value has a maximum length of 127 characters.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
}
/// Request object for `GetCustomField` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCustomFieldRequest {
    /// Required. The resource name of the CustomField.
    /// Format: `networks/{network_code}/customFields/{custom_field_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request object for `ListCustomFields` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCustomFieldsRequest {
    /// Required. The parent, which owns this collection of CustomFields.
    /// Format: `networks/{network_code}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. The maximum number of `CustomFields` to return. The service may
    /// return fewer than this value. If unspecified, at most 50 `CustomFields`
    /// will be returned. The maximum value is 1000; values above 1000 will be
    /// coerced to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A page token, received from a previous `ListCustomFields` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListCustomFields` must
    /// match the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Expression to filter the response.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters>
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Expression to specify sorting order.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters#order>
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
    /// Optional. Number of individual resources to skip while paginating.
    #[prost(int32, tag = "6")]
    pub skip: i32,
}
/// Response object for `ListCustomFieldsRequest` containing matching
/// `CustomField` objects.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCustomFieldsResponse {
    /// The `CustomField` objects from the specified network.
    #[prost(message, repeated, tag = "1")]
    pub custom_fields: ::prost::alloc::vec::Vec<CustomField>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Total number of `CustomField` objects.
    /// If a filter was included in the request, this reflects the total number
    /// after the filtering is applied.
    ///
    /// `total_size` will not be calculated in the response unless it has been
    /// included in a response field mask. The response field mask can be provided
    /// to the method by using the URL parameter `$fields` or `fields`, or by using
    /// the HTTP/gRPC header `X-Goog-FieldMask`.
    ///
    /// For more information, see
    /// <https://developers.google.com/ad-manager/api/beta/field-masks>
    #[prost(int32, tag = "3")]
    pub total_size: i32,
}
/// Generated client implementations.
pub mod custom_field_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provides methods for handling `CustomField` objects.
    #[derive(Debug, Clone)]
    pub struct CustomFieldServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl CustomFieldServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> CustomFieldServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> CustomFieldServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            CustomFieldServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// API to retrieve a `CustomField` object.
        pub async fn get_custom_field(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCustomFieldRequest>,
        ) -> std::result::Result<tonic::Response<super::CustomField>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.CustomFieldService/GetCustomField",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.CustomFieldService",
                        "GetCustomField",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to retrieve a list of `CustomField` objects.
        pub async fn list_custom_fields(
            &mut self,
            request: impl tonic::IntoRequest<super::ListCustomFieldsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListCustomFieldsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.CustomFieldService/ListCustomFields",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.CustomFieldService",
                        "ListCustomFields",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// A value for a CustomField on a resource.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomFieldValue {
    /// Required. The custom field for which this is a value.
    /// Format: "networks/{network_code}/customFields/{custom_field_id}"
    #[prost(string, tag = "1")]
    pub custom_field: ::prost::alloc::string::String,
    /// Required. A typed value representation of the value.
    #[prost(message, optional, tag = "2")]
    pub value: ::core::option::Option<custom_field_value::Value>,
}
/// Nested message and enum types in `CustomFieldValue`.
pub mod custom_field_value {
    /// Represent custom field value type.
    /// Next Id: 5
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Value {
        /// The value of this field.
        #[prost(oneof = "value::Value", tags = "1, 2, 3, 4")]
        pub value: ::core::option::Option<value::Value>,
    }
    /// Nested message and enum types in `Value`.
    pub mod value {
        /// The value of this field.
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Value {
            /// The custom_field_option_id, if the CustomFieldDataType is DROPDOWN.
            #[prost(int64, tag = "1")]
            DropdownValue(i64),
            /// The value, if the CustomFieldDataType is STRING.
            #[prost(string, tag = "2")]
            StringValue(::prost::alloc::string::String),
            /// The value, if the CustomFieldDataType is NUMBER.
            #[prost(double, tag = "3")]
            NumberValue(f64),
            /// The value, if the CustomFieldDataType is TOGGLE.
            #[prost(bool, tag = "4")]
            ToggleValue(bool),
        }
    }
}
/// Wrapper message for
/// [CustomTargetingKeyStatus][google.ads.admanager.v1.CustomTargetingKeyStatusEnum.CustomTargetingKeyStatus]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CustomTargetingKeyStatusEnum {}
/// Nested message and enum types in `CustomTargetingKeyStatusEnum`.
pub mod custom_targeting_key_status_enum {
    /// Status of the custom targeting key.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CustomTargetingKeyStatus {
        /// Not specified value.
        Unspecified = 0,
        /// Custom targeting key is active.
        Active = 1,
        /// Custom targeting key is inactive.
        Inactive = 2,
    }
    impl CustomTargetingKeyStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "CUSTOM_TARGETING_KEY_STATUS_UNSPECIFIED",
                Self::Active => "ACTIVE",
                Self::Inactive => "INACTIVE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CUSTOM_TARGETING_KEY_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
                "ACTIVE" => Some(Self::Active),
                "INACTIVE" => Some(Self::Inactive),
                _ => None,
            }
        }
    }
}
/// Wrapper message for
/// [CustomTargetingKeyType][google.ads.admanager.v1.CustomTargetingKeyTypeEnum.CustomTargetingKeyType]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CustomTargetingKeyTypeEnum {}
/// Nested message and enum types in `CustomTargetingKeyTypeEnum`.
pub mod custom_targeting_key_type_enum {
    /// Type of the custom targeting key.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CustomTargetingKeyType {
        /// Not specified value.
        Unspecified = 0,
        /// Key with a fixed set of values.
        Predefined = 1,
        /// Key without a fixed set of values
        Freeform = 2,
    }
    impl CustomTargetingKeyType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "CUSTOM_TARGETING_KEY_TYPE_UNSPECIFIED",
                Self::Predefined => "PREDEFINED",
                Self::Freeform => "FREEFORM",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CUSTOM_TARGETING_KEY_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "PREDEFINED" => Some(Self::Predefined),
                "FREEFORM" => Some(Self::Freeform),
                _ => None,
            }
        }
    }
}
/// Wrapper message for
/// [CustomTargetingKeyReportableType][google.ads.admanager.v1.CustomTargetingKeyReportableTypeEnum.CustomTargetingKeyReportableType]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CustomTargetingKeyReportableTypeEnum {}
/// Nested message and enum types in `CustomTargetingKeyReportableTypeEnum`.
pub mod custom_targeting_key_reportable_type_enum {
    /// Reportable type of the custom targeting key.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CustomTargetingKeyReportableType {
        /// Not specified value.
        Unspecified = 0,
        /// Not available for reporting in the Ad Manager query tool.
        Off = 1,
        /// Available for reporting in the Ad Manager query tool.
        On = 2,
        /// Custom dimension available for reporting in the AdManager query tool.
        CustomDimension = 3,
    }
    impl CustomTargetingKeyReportableType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "CUSTOM_TARGETING_KEY_REPORTABLE_TYPE_UNSPECIFIED",
                Self::Off => "OFF",
                Self::On => "ON",
                Self::CustomDimension => "CUSTOM_DIMENSION",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CUSTOM_TARGETING_KEY_REPORTABLE_TYPE_UNSPECIFIED" => {
                    Some(Self::Unspecified)
                }
                "OFF" => Some(Self::Off),
                "ON" => Some(Self::On),
                "CUSTOM_DIMENSION" => Some(Self::CustomDimension),
                _ => None,
            }
        }
    }
}
/// The `CustomTargetingKey` resource.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomTargetingKey {
    /// Identifier. The resource name of the `CustomTargetingKey`.
    /// Format:
    /// `networks/{network_code}/customTargetingKeys/{custom_targeting_key_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. `CustomTargetingKey` ID.
    #[prost(int64, tag = "2")]
    pub custom_targeting_key_id: i64,
    /// Immutable. Name of the key. Keys can contain up to 10 characters each. You
    /// can use alphanumeric characters and symbols other than the following:
    /// ", ', =, !, +, #, *, ~, ;, ^, (, ), <, >, \[, \], the white space character.
    #[prost(string, tag = "3")]
    pub ad_tag_name: ::prost::alloc::string::String,
    /// Optional. Descriptive name for the `CustomTargetingKey`.
    #[prost(string, tag = "4")]
    pub display_name: ::prost::alloc::string::String,
    /// Required. Indicates whether users will select from predefined values or
    /// create new targeting values, while specifying targeting criteria for a line
    /// item.
    #[prost(
        enumeration = "custom_targeting_key_type_enum::CustomTargetingKeyType",
        tag = "5"
    )]
    pub r#type: i32,
    /// Output only. Status of the `CustomTargetingKey`.
    #[prost(
        enumeration = "custom_targeting_key_status_enum::CustomTargetingKeyStatus",
        tag = "6"
    )]
    pub status: i32,
    /// Required. Reportable state of the `CustomTargetingKey`.
    #[prost(
        enumeration = "custom_targeting_key_reportable_type_enum::CustomTargetingKeyReportableType",
        tag = "7"
    )]
    pub reportable_type: i32,
}
/// Request object for `GetCustomTargetingKey` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCustomTargetingKeyRequest {
    /// Required. The resource name of the CustomTargetingKey.
    /// Format:
    /// `networks/{network_code}/customTargetingKeys/{custom_targeting_key_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request object for `ListCustomTargetingKeys` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCustomTargetingKeysRequest {
    /// Required. The parent, which owns this collection of CustomTargetingKeys.
    /// Format: `networks/{network_code}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. The maximum number of `CustomTargetingKeys` to return. The
    /// service may return fewer than this value. If unspecified, at most 50
    /// `CustomTargetingKeys` will be returned. The maximum value is 1000; values
    /// above 1000 will be coerced to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A page token, received from a previous `ListCustomTargetingKeys`
    /// call. Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListCustomTargetingKeys`
    /// must match the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Expression to filter the response.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters>
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Expression to specify sorting order.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters#order>
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
    /// Optional. Number of individual resources to skip while paginating.
    #[prost(int32, tag = "6")]
    pub skip: i32,
}
/// Response object for `ListCustomTargetingKeysRequest` containing matching
/// `CustomTargetingKey` objects.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCustomTargetingKeysResponse {
    /// The `CustomTargetingKey` objects from the specified network.
    #[prost(message, repeated, tag = "1")]
    pub custom_targeting_keys: ::prost::alloc::vec::Vec<CustomTargetingKey>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Total number of `CustomTargetingKey` objects.
    /// If a filter was included in the request, this reflects the total number
    /// after the filtering is applied.
    ///
    /// `total_size` will not be calculated in the response unless it has been
    /// included in a response field mask. The response field mask can be provided
    /// to the method by using the URL parameter `$fields` or `fields`, or by using
    /// the HTTP/gRPC header `X-Goog-FieldMask`.
    ///
    /// For more information, see
    /// <https://developers.google.com/ad-manager/api/beta/field-masks>
    #[prost(int32, tag = "3")]
    pub total_size: i32,
}
/// Generated client implementations.
pub mod custom_targeting_key_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provides methods for handling `CustomTargetingKey` objects.
    #[derive(Debug, Clone)]
    pub struct CustomTargetingKeyServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl CustomTargetingKeyServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> CustomTargetingKeyServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> CustomTargetingKeyServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            CustomTargetingKeyServiceClient::new(
                InterceptedService::new(inner, interceptor),
            )
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// API to retrieve a `CustomTargetingKey` object.
        pub async fn get_custom_targeting_key(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCustomTargetingKeyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CustomTargetingKey>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.CustomTargetingKeyService/GetCustomTargetingKey",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.CustomTargetingKeyService",
                        "GetCustomTargetingKey",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to retrieve a list of `CustomTargetingKey` objects.
        pub async fn list_custom_targeting_keys(
            &mut self,
            request: impl tonic::IntoRequest<super::ListCustomTargetingKeysRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListCustomTargetingKeysResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.CustomTargetingKeyService/ListCustomTargetingKeys",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.CustomTargetingKeyService",
                        "ListCustomTargetingKeys",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Wrapper message for
/// [CustomTargetingValueStatus][google.ads.admanager.v1.CustomTargetingValueStatusEnum.CustomTargetingValueStatus]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CustomTargetingValueStatusEnum {}
/// Nested message and enum types in `CustomTargetingValueStatusEnum`.
pub mod custom_targeting_value_status_enum {
    /// Status of the custom targeting value.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CustomTargetingValueStatus {
        /// Not specified value.
        Unspecified = 0,
        /// Custom targeting value is active.
        Active = 1,
        /// Custom targeting value is inactive.
        Inactive = 2,
    }
    impl CustomTargetingValueStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "CUSTOM_TARGETING_VALUE_STATUS_UNSPECIFIED",
                Self::Active => "ACTIVE",
                Self::Inactive => "INACTIVE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CUSTOM_TARGETING_VALUE_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
                "ACTIVE" => Some(Self::Active),
                "INACTIVE" => Some(Self::Inactive),
                _ => None,
            }
        }
    }
}
/// Wrapper message for
/// [CustomTargetingValueMatchType][google.ads.admanager.v1.CustomTargetingValueMatchTypeEnum.CustomTargetingValueMatchType]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CustomTargetingValueMatchTypeEnum {}
/// Nested message and enum types in `CustomTargetingValueMatchTypeEnum`.
pub mod custom_targeting_value_match_type_enum {
    /// Match type of the custom targeting value.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum CustomTargetingValueMatchType {
        /// Not specified value.
        Unspecified = 0,
        /// Used for exact matching. For example, the targeting value car=honda will
        /// only match to the ad request car=honda.
        Exact = 1,
        /// Used for lenient matching when at least one of the words in the ad
        /// request matches the targeted value. The targeting value car=honda will
        /// match to ad requests containing the word honda. So ad requests car=honda
        /// or car=honda civic or car=buy honda or car=how much does a honda cost
        /// will all have the line item delivered.
        /// This match type can not be used within an audience segment rule.
        Broad = 2,
        /// Used for 'starts with' matching when the first few characters in the ad
        /// request match all of the characters in the targeted value. The targeting
        /// value car=honda will match to ad requests car=honda or car=hondas for
        /// sale but not to car=I want a honda.
        Prefix = 3,
        /// This is a combination of MatchType#BROAD and MatchType#PREFIX matching.
        /// The targeting value car=honda will match to ad requests that contain
        /// words that start with the characters in the targeted value, for example
        /// with car=civic hondas.
        /// This match type can not be used within an audience segment rule.
        BroadPrefix = 4,
        /// Used for 'ends with' matching when the last characters in the ad request
        /// match all of the characters in the targeted value. The targeting value
        /// car=honda will match with ad requests car=honda or car=I want a honda but
        /// not to car=hondas for sale.
        /// This match type can not be used within line item targeting.
        Suffix = 5,
        /// Used for 'within' matching when the string in the ad request contains the
        /// string in the targeted value. The targeting value car=honda will match
        /// with ad requests car=honda, car=I want a honda, and also with car=hondas
        /// for sale, but not with car=misspelled hond a. This match type can not be
        /// used within line item targeting.
        Contains = 6,
    }
    impl CustomTargetingValueMatchType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "CUSTOM_TARGETING_VALUE_MATCH_TYPE_UNSPECIFIED",
                Self::Exact => "EXACT",
                Self::Broad => "BROAD",
                Self::Prefix => "PREFIX",
                Self::BroadPrefix => "BROAD_PREFIX",
                Self::Suffix => "SUFFIX",
                Self::Contains => "CONTAINS",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CUSTOM_TARGETING_VALUE_MATCH_TYPE_UNSPECIFIED" => {
                    Some(Self::Unspecified)
                }
                "EXACT" => Some(Self::Exact),
                "BROAD" => Some(Self::Broad),
                "PREFIX" => Some(Self::Prefix),
                "BROAD_PREFIX" => Some(Self::BroadPrefix),
                "SUFFIX" => Some(Self::Suffix),
                "CONTAINS" => Some(Self::Contains),
                _ => None,
            }
        }
    }
}
/// The `CustomTargetingValue` resource.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomTargetingValue {
    /// Identifier. The resource name of the `CustomTargetingValue`.
    /// Format:
    /// `networks/{network_code}/customTargetingKeys/{custom_targeting_key_id}/customTargetingValues/{custom_targeting_value_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Immutable. Name of the `CustomTargetingValue`. Values can contain up to 40
    /// characters each. You can use alphanumeric characters and symbols other than
    /// the following: ", ', =, !, +, #, *, ~, ;, ^, (, ), <, >, \[, \]. Values are
    /// not data-specific; all values are treated as strings. For example, instead
    /// of using "age>=18 AND <=34", try "18-34"
    #[prost(string, tag = "4")]
    pub ad_tag_name: ::prost::alloc::string::String,
    /// Optional. Descriptive name for the `CustomTargetingValue`.
    #[prost(string, tag = "5")]
    pub display_name: ::prost::alloc::string::String,
    /// Required. Immutable. The way in which the CustomTargetingValue.name strings
    /// will be matched.
    #[prost(
        enumeration = "custom_targeting_value_match_type_enum::CustomTargetingValueMatchType",
        tag = "6"
    )]
    pub match_type: i32,
    /// Output only. Status of the `CustomTargetingValue`.
    #[prost(
        enumeration = "custom_targeting_value_status_enum::CustomTargetingValueStatus",
        tag = "7"
    )]
    pub status: i32,
}
/// Request object for `GetCustomTargetingValue` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCustomTargetingValueRequest {
    /// Required. The resource name of the CustomTargetingValue.
    /// Format:
    /// `networks/{network_code}/customTargetingKeys/{custom_targeting_key_id}/customTargetingValues/{custom_targeting_value_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request object for `ListCustomTargetingValues` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCustomTargetingValuesRequest {
    /// Required. The parent, which owns this collection of CustomTargetingValues.
    /// Format:
    /// `networks/{network_code}/customTargetingKeys/{custom_targeting_key_id}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. The maximum number of `CustomTargetingValues` to return. The
    /// service may return fewer than this value. If unspecified, at most 50
    /// `CustomTargetingValues` will be returned. The maximum value is 1000; values
    /// above 1000 will be coerced to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A page token, received from a previous
    /// `ListCustomTargetingValues` call. Provide this to retrieve the subsequent
    /// page.
    ///
    /// When paginating, all other parameters provided to
    /// `ListCustomTargetingValues` must match the call that provided the page
    /// token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Expression to filter the response.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters>
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Expression to specify sorting order.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters#order>
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
    /// Optional. Number of individual resources to skip while paginating.
    #[prost(int32, tag = "6")]
    pub skip: i32,
}
/// Response object for `ListCustomTargetingValuesRequest` containing matching
/// `CustomTargetingValue` objects.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCustomTargetingValuesResponse {
    /// The `CustomTargetingValue` objects from the specified network.
    #[prost(message, repeated, tag = "1")]
    pub custom_targeting_values: ::prost::alloc::vec::Vec<CustomTargetingValue>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Total number of `CustomTargetingValue` objects.
    /// If a filter was included in the request, this reflects the total number
    /// after the filtering is applied.
    ///
    /// `total_size` will not be calculated in the response unless it has been
    /// included in a response field mask. The response field mask can be provided
    /// to the method by using the URL parameter `$fields` or `fields`, or by using
    /// the HTTP/gRPC header `X-Goog-FieldMask`.
    ///
    /// For more information, see
    /// <https://developers.google.com/ad-manager/api/beta/field-masks>
    #[prost(int32, tag = "3")]
    pub total_size: i32,
}
/// Generated client implementations.
pub mod custom_targeting_value_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provides methods for handling `CustomTargetingValue` objects.
    #[derive(Debug, Clone)]
    pub struct CustomTargetingValueServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl CustomTargetingValueServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> CustomTargetingValueServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> CustomTargetingValueServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            CustomTargetingValueServiceClient::new(
                InterceptedService::new(inner, interceptor),
            )
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// API to retrieve a `CustomTargetingValue` object.
        pub async fn get_custom_targeting_value(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCustomTargetingValueRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CustomTargetingValue>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.CustomTargetingValueService/GetCustomTargetingValue",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.CustomTargetingValueService",
                        "GetCustomTargetingValue",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to retrieve a list of `CustomTargetingValue` objects.
        pub async fn list_custom_targeting_values(
            &mut self,
            request: impl tonic::IntoRequest<super::ListCustomTargetingValuesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListCustomTargetingValuesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.CustomTargetingValueService/ListCustomTargetingValues",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.CustomTargetingValueService",
                        "ListCustomTargetingValues",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// The `EntitySignalsMapping` resource.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntitySignalsMapping {
    /// Identifier. The resource name of the `EntitySignalsMapping`.
    /// Format:
    /// `networks/{network_code}/entitySignalsMappings/{entity_signals_mapping_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. `EntitySignalsMapping` ID.
    #[prost(int64, tag = "2")]
    pub entity_signals_mapping_id: i64,
    /// Required. The IDs of the categories that are associated with the
    /// referencing entity.
    #[prost(int64, repeated, packed = "false", tag = "6")]
    pub taxonomy_category_ids: ::prost::alloc::vec::Vec<i64>,
    /// The entity that the mapping belongs to.
    #[prost(oneof = "entity_signals_mapping::Entity", tags = "3, 4, 5")]
    pub entity: ::core::option::Option<entity_signals_mapping::Entity>,
}
/// Nested message and enum types in `EntitySignalsMapping`.
pub mod entity_signals_mapping {
    /// The entity that the mapping belongs to.
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Entity {
        /// ID of an AudienceSegment that this mapping belongs to.
        #[prost(int64, tag = "3")]
        AudienceSegmentId(i64),
        /// ID of a ContentBundle that this mapping belongs to.
        #[prost(int64, tag = "4")]
        ContentBundleId(i64),
        /// ID of a CustomValue that this mapping belongs to.
        #[prost(int64, tag = "5")]
        CustomTargetingValueId(i64),
    }
}
/// Request object for `GetEntitySignalsMapping` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEntitySignalsMappingRequest {
    /// Required. The resource name of the EntitySignalsMapping.
    /// Format:
    /// `networks/{network_code}/entitySignalsMappings/{entity_signals_mapping_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request object for `ListEntitySignalsMappings` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListEntitySignalsMappingsRequest {
    /// Required. The parent, which owns this collection of EntitySignalsMappings.
    /// Format: `networks/{network_code}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. The maximum number of `EntitySignalsMappings` to return. The
    /// service may return fewer than this value. If unspecified, at most 50
    /// `EntitySignalsMappings` will be returned. The maximum value is 1000; values
    /// above 1000 will be coerced to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A page token, received from a previous
    /// `ListEntitySignalsMappings` call. Provide this to retrieve the subsequent
    /// page.
    ///
    /// When paginating, all other parameters provided to
    /// `ListEntitySignalsMappings` must match the call that provided the page
    /// token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Expression to filter the response.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters>
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Expression to specify sorting order.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters#order>
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
    /// Optional. Number of individual resources to skip while paginating.
    #[prost(int32, tag = "6")]
    pub skip: i32,
}
/// Request object for 'CreateEntitySignalsMapping' method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateEntitySignalsMappingRequest {
    /// Required. The parent resource where this EntitySignalsMapping will be
    /// created. Format: `networks/{network_code}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The EntitySignalsMapping object to create.
    #[prost(message, optional, tag = "2")]
    pub entity_signals_mapping: ::core::option::Option<EntitySignalsMapping>,
}
/// Request object for 'UpdateEntitySignalsMapping' method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateEntitySignalsMappingRequest {
    /// Required. The `EntitySignalsMapping` to update.
    ///
    /// The EntitySignalsMapping's name is used to identify the
    /// EntitySignalsMapping to update.
    /// Format:
    /// `networks/{network_code}/entitySignalsMappings/{entity_signals_mapping}`
    #[prost(message, optional, tag = "1")]
    pub entity_signals_mapping: ::core::option::Option<EntitySignalsMapping>,
    /// Required. The list of fields to update.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
/// Response object for `ListEntitySignalsMappingsRequest` containing matching
/// `EntitySignalsMapping` resources.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListEntitySignalsMappingsResponse {
    /// The `EntitySignalsMapping` from the specified network.
    #[prost(message, repeated, tag = "1")]
    pub entity_signals_mappings: ::prost::alloc::vec::Vec<EntitySignalsMapping>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Total number of `EntitySignalsMappings`.
    /// If a filter was included in the request, this reflects the total number
    /// after the filtering is applied.
    ///
    /// `total_size` will not be calculated in the response unless it has been
    /// included in a response field mask. The response field mask can be provided
    /// to the method by using the URL parameter `$fields` or `fields`, or by using
    /// the HTTP/gRPC header `X-Goog-FieldMask`.
    ///
    /// For more information, see
    /// <https://developers.google.com/ad-manager/api/beta/field-masks>
    #[prost(int32, tag = "3")]
    pub total_size: i32,
}
/// Request object for `BatchCreateEntitySignalsMappings` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchCreateEntitySignalsMappingsRequest {
    /// Required. The parent resource where `EntitySignalsMappings` will be
    /// created. Format: `networks/{network_code}` The parent field in the
    /// CreateEntitySignalsMappingRequest must match this field.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The `EntitySignalsMapping` objects to create.
    /// A maximum of 100 objects can be created in a batch.
    #[prost(message, repeated, tag = "2")]
    pub requests: ::prost::alloc::vec::Vec<CreateEntitySignalsMappingRequest>,
}
/// Response object for `BatchCreateEntitySignalsMappings` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchCreateEntitySignalsMappingsResponse {
    /// The `EntitySignalsMapping` objects created.
    #[prost(message, repeated, tag = "1")]
    pub entity_signals_mappings: ::prost::alloc::vec::Vec<EntitySignalsMapping>,
}
/// Request object for `BatchUpdateEntitySignalsMappings` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchUpdateEntitySignalsMappingsRequest {
    /// Required. The parent resource where `EntitySignalsMappings` will be
    /// updated. Format: `networks/{network_code}` The parent field in the
    /// UpdateEntitySignalsMappingRequest must match this field.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The `EntitySignalsMapping` objects to update.
    /// A maximum of 100 objects can be updated in a batch.
    #[prost(message, repeated, tag = "2")]
    pub requests: ::prost::alloc::vec::Vec<UpdateEntitySignalsMappingRequest>,
}
/// Response object for `BatchUpdateEntitySignalsMappings` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchUpdateEntitySignalsMappingsResponse {
    /// The `EntitySignalsMapping` objects updated.
    #[prost(message, repeated, tag = "1")]
    pub entity_signals_mappings: ::prost::alloc::vec::Vec<EntitySignalsMapping>,
}
/// Generated client implementations.
pub mod entity_signals_mapping_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provides methods for handling `EntitySignalsMapping` objects.
    #[derive(Debug, Clone)]
    pub struct EntitySignalsMappingServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl EntitySignalsMappingServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> EntitySignalsMappingServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> EntitySignalsMappingServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            EntitySignalsMappingServiceClient::new(
                InterceptedService::new(inner, interceptor),
            )
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// API to retrieve a `EntitySignalsMapping` object.
        pub async fn get_entity_signals_mapping(
            &mut self,
            request: impl tonic::IntoRequest<super::GetEntitySignalsMappingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::EntitySignalsMapping>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.EntitySignalsMappingService/GetEntitySignalsMapping",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.EntitySignalsMappingService",
                        "GetEntitySignalsMapping",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to retrieve a list of `EntitySignalsMapping` objects.
        pub async fn list_entity_signals_mappings(
            &mut self,
            request: impl tonic::IntoRequest<super::ListEntitySignalsMappingsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListEntitySignalsMappingsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.EntitySignalsMappingService/ListEntitySignalsMappings",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.EntitySignalsMappingService",
                        "ListEntitySignalsMappings",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to create an `EntitySignalsMapping` object.
        pub async fn create_entity_signals_mapping(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateEntitySignalsMappingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::EntitySignalsMapping>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.EntitySignalsMappingService/CreateEntitySignalsMapping",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.EntitySignalsMappingService",
                        "CreateEntitySignalsMapping",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to update an `EntitySignalsMapping` object.
        pub async fn update_entity_signals_mapping(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateEntitySignalsMappingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::EntitySignalsMapping>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.EntitySignalsMappingService/UpdateEntitySignalsMapping",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.EntitySignalsMappingService",
                        "UpdateEntitySignalsMapping",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to batch create `EntitySignalsMapping` objects.
        pub async fn batch_create_entity_signals_mappings(
            &mut self,
            request: impl tonic::IntoRequest<
                super::BatchCreateEntitySignalsMappingsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::BatchCreateEntitySignalsMappingsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.EntitySignalsMappingService/BatchCreateEntitySignalsMappings",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.EntitySignalsMappingService",
                        "BatchCreateEntitySignalsMappings",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to batch update `EntitySignalsMapping` objects.
        pub async fn batch_update_entity_signals_mappings(
            &mut self,
            request: impl tonic::IntoRequest<
                super::BatchUpdateEntitySignalsMappingsRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::BatchUpdateEntitySignalsMappingsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.EntitySignalsMappingService/BatchUpdateEntitySignalsMappings",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.EntitySignalsMappingService",
                        "BatchUpdateEntitySignalsMappings",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// A Label is additional information that can be added to an entity.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Label {
    /// Identifier. The resource name of the `Label`.
    /// Format: `networks/{network_code}/labels/{label_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// The Network resource.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Network {
    /// Identifier. The resource name of the Network.
    /// Format: networks/{network_code}
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. Display name for Network.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// Output only. Network Code.
    #[prost(string, tag = "3")]
    pub network_code: ::prost::alloc::string::String,
    /// Output only. Property code.
    #[prost(string, tag = "4")]
    pub property_code: ::prost::alloc::string::String,
    /// Output only. Time zone associated with the delivery of orders and
    /// reporting.
    #[prost(string, tag = "5")]
    pub time_zone: ::prost::alloc::string::String,
    /// Output only. Primary currency code, in ISO-4217 format.
    #[prost(string, tag = "6")]
    pub currency_code: ::prost::alloc::string::String,
    /// Optional. Currency codes that can be used as an alternative to the primary
    /// currency code for trafficking Line Items.
    #[prost(string, repeated, tag = "7")]
    pub secondary_currency_codes: ::prost::alloc::vec::Vec<
        ::prost::alloc::string::String,
    >,
    /// Output only. Top most [Ad Unit](google.ads.admanager.v1.AdUnit) to which
    /// descendant Ad Units can be added.
    /// Format: networks/{network_code}/adUnit/{ad_unit_id}
    #[prost(string, tag = "8")]
    pub effective_root_ad_unit: ::prost::alloc::string::String,
    /// Output only. Whether this is a test network.
    #[prost(bool, tag = "10")]
    pub test_network: bool,
    /// Output only. Network ID.
    #[prost(int64, tag = "11")]
    pub network_id: i64,
}
/// Request to get Network
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNetworkRequest {
    /// Required. Resource name of Network.
    /// Format: networks/{network_code}
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request object for `ListNetworks` method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ListNetworksRequest {}
/// Response object for `ListNetworks` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListNetworksResponse {
    /// The `Network`s a user has access to.
    #[prost(message, repeated, tag = "1")]
    pub networks: ::prost::alloc::vec::Vec<Network>,
}
/// Generated client implementations.
pub mod network_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provides methods for handling Network objects.
    #[derive(Debug, Clone)]
    pub struct NetworkServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl NetworkServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> NetworkServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> NetworkServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            NetworkServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// API to retrieve a Network object.
        pub async fn get_network(
            &mut self,
            request: impl tonic::IntoRequest<super::GetNetworkRequest>,
        ) -> std::result::Result<tonic::Response<super::Network>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.NetworkService/GetNetwork",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.NetworkService",
                        "GetNetwork",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to retrieve all the networks the current user has access to.
        pub async fn list_networks(
            &mut self,
            request: impl tonic::IntoRequest<super::ListNetworksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListNetworksResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.NetworkService/ListNetworks",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.NetworkService",
                        "ListNetworks",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Wrapper message for
/// [OrderStatus][google.ads.admanager.v1.OrderStatusEnum.OrderStatus].
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OrderStatusEnum {}
/// Nested message and enum types in `OrderStatusEnum`.
pub mod order_status_enum {
    /// The status of an Order.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum OrderStatus {
        /// Default value. This value is unused.
        Unspecified = 0,
        /// Indicates that the Order has just been created but no approval has been
        /// requested yet.
        Draft = 2,
        /// Indicates that a request for approval for the Order has been made.
        PendingApproval = 3,
        /// Indicates that the Order has been approved and is ready to serve.
        Approved = 4,
        /// Indicates that the Order has been disapproved and is not eligible to
        /// serve.
        Disapproved = 5,
        /// This is a legacy state. Paused status should be checked on LineItems
        /// within the order.
        Paused = 6,
        /// Indicates that the Order has been canceled and cannot serve.
        Canceled = 7,
        /// Indicates that the Order has been deleted.
        Deleted = 8,
    }
    impl OrderStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "ORDER_STATUS_UNSPECIFIED",
                Self::Draft => "DRAFT",
                Self::PendingApproval => "PENDING_APPROVAL",
                Self::Approved => "APPROVED",
                Self::Disapproved => "DISAPPROVED",
                Self::Paused => "PAUSED",
                Self::Canceled => "CANCELED",
                Self::Deleted => "DELETED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ORDER_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
                "DRAFT" => Some(Self::Draft),
                "PENDING_APPROVAL" => Some(Self::PendingApproval),
                "APPROVED" => Some(Self::Approved),
                "DISAPPROVED" => Some(Self::Disapproved),
                "PAUSED" => Some(Self::Paused),
                "CANCELED" => Some(Self::Canceled),
                "DELETED" => Some(Self::Deleted),
                _ => None,
            }
        }
    }
}
/// The `Order` resource.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Order {
    /// Identifier. The resource name of the `Order`.
    /// Format: `networks/{network_code}/orders/{order_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. Order ID.
    #[prost(int64, tag = "4")]
    pub order_id: i64,
    /// Required. The display name of the Order.  This value has a maximum length
    /// of 255 characters.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// Optional. Specifies whether or not the Order is a programmatic order.
    #[prost(bool, tag = "3")]
    pub programmatic: bool,
    /// Required. The resource name of the User responsible for trafficking the
    /// Order. Format: "networks/{network_code}/users/{user_id}"
    #[prost(string, tag = "23")]
    pub trafficker: ::prost::alloc::string::String,
    /// Optional. The resource names of Contacts from the advertiser of this Order.
    /// Format: "networks/{network_code}/contacts/{contact_id}"
    #[prost(string, repeated, tag = "5")]
    pub advertiser_contacts: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Required. The resource name of the Company, which is of type
    /// Company.Type.ADVERTISER, to which this order belongs. Format:
    /// "networks/{network_code}/companies/{company_id}"
    #[prost(string, tag = "6")]
    pub advertiser: ::prost::alloc::string::String,
    /// Optional. The resource names of Contacts from the advertising Agency of
    /// this Order. Format: "networks/{network_code}/contacts/{contact_id}"
    #[prost(string, repeated, tag = "7")]
    pub agency_contacts: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Optional. The resource name of the Company, which is of type
    /// Company.Type.AGENCY, with which this order is associated. Format:
    /// "networks/{network_code}/companies/{company_id}"
    #[prost(string, tag = "8")]
    pub agency: ::prost::alloc::string::String,
    /// Optional. The resource names of Teams directly applied to this Order.
    /// Format: "networks/{network_code}/teams/{team_id}"
    #[prost(string, repeated, tag = "9")]
    pub applied_teams: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Output only. The resource names of Teams applied to this Order including
    /// inherited values. Format: "networks/{network_code}/teams/{team_id}"
    #[prost(string, repeated, tag = "28")]
    pub effective_teams: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Output only. The resource name of the User who created the Order on behalf
    /// of the advertiser. This value is assigned by Google. Format:
    /// "networks/{network_code}/users/{user_id}"
    #[prost(string, tag = "10")]
    pub creator: ::prost::alloc::string::String,
    /// Output only. The ISO 4217 3-letter currency code for the currency used by
    /// the Order. This value is the network's currency code.
    #[prost(string, tag = "11")]
    pub currency_code: ::prost::alloc::string::String,
    /// Output only. The instant at which the Order and its associated line items
    /// are eligible to begin serving. This attribute is derived from the line item
    /// of the order that has the earliest LineItem.start_time.
    #[prost(message, optional, tag = "19")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The instant at which the Order and its associated line items
    /// stop being served. This attribute is derived from the line item of the
    /// order that has the latest LineItem.end_time.
    #[prost(message, optional, tag = "12")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Indicates whether or not this Order has an end time.
    #[prost(bool, tag = "45")]
    pub unlimited_end_time: bool,
    /// Optional. An arbitrary ID to associate to the Order, which can be used as a
    /// key to an external system.
    #[prost(int64, tag = "13")]
    pub external_order_id: i64,
    /// Output only. The archival status of the Order.
    #[prost(bool, tag = "14")]
    pub archived: bool,
    /// Output only. The application which modified this order. This attribute is
    /// assigned by Google.
    #[prost(string, tag = "15")]
    pub last_modified_by_app: ::prost::alloc::string::String,
    /// Output only. The instant this Order was last modified.
    #[prost(message, optional, tag = "16")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Optional. Provides any additional notes that may annotate the Order. This
    /// attribute has a maximum length of 65,535 characters.
    #[prost(string, tag = "17")]
    pub notes: ::prost::alloc::string::String,
    /// Optional. The purchase order number for the Order. This value has a maximum
    /// length of 63 characters.
    #[prost(string, tag = "18")]
    pub po_number: ::prost::alloc::string::String,
    /// Output only. The status of the Order.
    #[prost(enumeration = "order_status_enum::OrderStatus", tag = "20")]
    pub status: i32,
    /// Optional. The resource name of the User responsible for the sales of the
    /// Order. Format: "networks/{network_code}/users/{user_id}"
    #[prost(string, tag = "21")]
    pub salesperson: ::prost::alloc::string::String,
    /// Optional. Unordered list. The resource names of the secondary salespeople
    /// associated with the order. Format:
    /// "networks/{network_code}/users/{user_id}"
    #[prost(string, repeated, tag = "22")]
    pub secondary_salespeople: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Optional. Unordered list. The resource names of the secondary traffickers
    /// associated with the order. Format:
    /// "networks/{network_code}/users/{user_id}"
    #[prost(string, repeated, tag = "24")]
    pub secondary_traffickers: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Optional. The set of labels applied directly to this order.
    #[prost(message, repeated, tag = "25")]
    pub applied_labels: ::prost::alloc::vec::Vec<AppliedLabel>,
    /// Output only. Contains the set of labels applied directly to the order as
    /// well as those inherited from the company that owns the order. If a label
    /// has been negated, only the negated label is returned. This field is
    /// assigned by Google.
    #[prost(message, repeated, tag = "26")]
    pub effective_applied_labels: ::prost::alloc::vec::Vec<AppliedLabel>,
    /// Optional. The set of custom field values to this order.
    #[prost(message, repeated, tag = "38")]
    pub custom_field_values: ::prost::alloc::vec::Vec<CustomFieldValue>,
}
/// Request object for `GetOrder` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOrderRequest {
    /// Required. The resource name of the Order.
    /// Format: `networks/{network_code}/orders/{order_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request object for `ListOrders` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListOrdersRequest {
    /// Required. The parent, which owns this collection of Orders.
    /// Format: `networks/{network_code}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. The maximum number of `Orders` to return. The service may return
    /// fewer than this value. If unspecified, at most 50 `Orders` will be
    /// returned. The maximum value is 1000; values above 1000 will be coerced to
    /// 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A page token, received from a previous `ListOrders` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListOrders` must match
    /// the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Expression to filter the response.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters>
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Expression to specify sorting order.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters#order>
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
    /// Optional. Number of individual resources to skip while paginating.
    #[prost(int32, tag = "6")]
    pub skip: i32,
}
/// Response object for `ListOrdersRequest` containing matching `Order`
/// resources.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListOrdersResponse {
    /// The `Order` from the specified network.
    #[prost(message, repeated, tag = "1")]
    pub orders: ::prost::alloc::vec::Vec<Order>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Total number of `Orders`.
    /// If a filter was included in the request, this reflects the total number
    /// after the filtering is applied.
    ///
    /// `total_size` will not be calculated in the response unless it has been
    /// included in a response field mask. The response field mask can be provided
    /// to the method by using the URL parameter `$fields` or `fields`, or by using
    /// the HTTP/gRPC header `X-Goog-FieldMask`.
    ///
    /// For more information, see
    /// <https://developers.google.com/ad-manager/api/beta/field-masks>
    #[prost(int32, tag = "3")]
    pub total_size: i32,
}
/// Generated client implementations.
pub mod order_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provides methods for handling `Order` objects.
    #[derive(Debug, Clone)]
    pub struct OrderServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl OrderServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> OrderServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> OrderServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            OrderServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// API to retrieve an Order object.
        pub async fn get_order(
            &mut self,
            request: impl tonic::IntoRequest<super::GetOrderRequest>,
        ) -> std::result::Result<tonic::Response<super::Order>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.OrderService/GetOrder",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.ads.admanager.v1.OrderService", "GetOrder"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to retrieve a list of `Order` objects.
        ///
        /// Fields used for literal matching in filter string:
        /// * `order_id`
        /// * `display_name`
        /// * `external_order_id`
        pub async fn list_orders(
            &mut self,
            request: impl tonic::IntoRequest<super::ListOrdersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListOrdersResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.OrderService/ListOrders",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.ads.admanager.v1.OrderService", "ListOrders"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Wrapper message for
/// [PlacementStatus][google.ads.admanager.v1.PlacementStatusEnum.PlacementStatus]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PlacementStatusEnum {}
/// Nested message and enum types in `PlacementStatusEnum`.
pub mod placement_status_enum {
    /// Status of the placement.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum PlacementStatus {
        /// Not specified value.
        Unspecified = 0,
        /// Stats are collected, user-visible.
        Active = 1,
        /// No stats collected, not user-visible.
        Inactive = 2,
        /// No stats collected, user-visible.
        Archived = 3,
    }
    impl PlacementStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "PLACEMENT_STATUS_UNSPECIFIED",
                Self::Active => "ACTIVE",
                Self::Inactive => "INACTIVE",
                Self::Archived => "ARCHIVED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "PLACEMENT_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
                "ACTIVE" => Some(Self::Active),
                "INACTIVE" => Some(Self::Inactive),
                "ARCHIVED" => Some(Self::Archived),
                _ => None,
            }
        }
    }
}
/// The `Placement` resource.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Placement {
    /// Identifier. The resource name of the `Placement`.
    /// Format: `networks/{network_code}/placements/{placement_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. `Placement` ID.
    #[prost(int64, tag = "2")]
    pub placement_id: i64,
    /// Required. The display name of the placement. Its maximum length is 255
    /// characters.
    #[prost(string, tag = "3")]
    pub display_name: ::prost::alloc::string::String,
    /// Optional. A description of the Placement. This value is optional and its
    /// maximum length is 65,535 characters.
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
    /// Output only. A string used to uniquely identify the Placement for purposes
    /// of serving the ad. This attribute is read-only and is assigned by Google
    /// when a placement is created.
    #[prost(string, tag = "5")]
    pub placement_code: ::prost::alloc::string::String,
    /// Output only. The status of the Placement. This attribute is read-only.
    #[prost(enumeration = "placement_status_enum::PlacementStatus", tag = "6")]
    pub status: i32,
    /// Optional. The resource names of AdUnits that constitute the Placement.
    /// Format: "networks/{network_code}/adUnits/{ad_unit_id}"
    #[prost(string, repeated, tag = "7")]
    pub targeted_ad_units: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Output only. The instant this Placement was last modified.
    #[prost(message, optional, tag = "9")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Request object for `GetPlacement` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPlacementRequest {
    /// Required. The resource name of the Placement.
    /// Format: `networks/{network_code}/placements/{placement_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request object for `ListPlacements` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPlacementsRequest {
    /// Required. The parent, which owns this collection of Placements.
    /// Format: `networks/{network_code}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. The maximum number of `Placements` to return. The service may
    /// return fewer than this value. If unspecified, at most 50 `Placements` will
    /// be returned. The maximum value is 1000; values above 1000 will be coerced
    /// to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A page token, received from a previous `ListPlacements` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListPlacements` must
    /// match the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Expression to filter the response.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters>
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Expression to specify sorting order.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters#order>
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
    /// Optional. Number of individual resources to skip while paginating.
    #[prost(int32, tag = "6")]
    pub skip: i32,
}
/// Response object for `ListPlacementsRequest` containing matching `Placement`
/// objects.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPlacementsResponse {
    /// The `Placement` objects from the specified network.
    #[prost(message, repeated, tag = "1")]
    pub placements: ::prost::alloc::vec::Vec<Placement>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Total number of `Placement` objects.
    /// If a filter was included in the request, this reflects the total number
    /// after the filtering is applied.
    ///
    /// `total_size` will not be calculated in the response unless it has been
    /// included in a response field mask. The response field mask can be provided
    /// to the method by using the URL parameter `$fields` or `fields`, or by using
    /// the HTTP/gRPC header `X-Goog-FieldMask`.
    ///
    /// For more information, see
    /// <https://developers.google.com/ad-manager/api/beta/field-masks>
    #[prost(int32, tag = "3")]
    pub total_size: i32,
}
/// Generated client implementations.
pub mod placement_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provides methods for handling `Placement` objects.
    #[derive(Debug, Clone)]
    pub struct PlacementServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl PlacementServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> PlacementServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> PlacementServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            PlacementServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// API to retrieve a `Placement` object.
        pub async fn get_placement(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPlacementRequest>,
        ) -> std::result::Result<tonic::Response<super::Placement>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.PlacementService/GetPlacement",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.PlacementService",
                        "GetPlacement",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to retrieve a list of `Placement` objects.
        pub async fn list_placements(
            &mut self,
            request: impl tonic::IntoRequest<super::ListPlacementsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListPlacementsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.PlacementService/ListPlacements",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.PlacementService",
                        "ListPlacements",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// The `Report` resource.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Report {
    /// Identifier. The resource name of the report.
    /// Report resource name have the form:
    /// `networks/{network_code}/reports/{report_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. Report ID.
    #[prost(int64, tag = "3")]
    pub report_id: i64,
    /// Optional. The visibility of a report.
    #[prost(enumeration = "report::Visibility", tag = "2")]
    pub visibility: i32,
    /// Required. The report definition of the report.
    #[prost(message, optional, tag = "4")]
    pub report_definition: ::core::option::Option<ReportDefinition>,
    /// Optional. Display name for the report.
    #[prost(string, tag = "5")]
    pub display_name: ::prost::alloc::string::String,
    /// Output only. The instant this report was last modified.
    #[prost(message, optional, tag = "6")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The instant this report was created.
    #[prost(message, optional, tag = "7")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The locale of this report. Locale is set from the user's
    /// locale at the time of the request. Locale can not be modified.
    #[prost(string, tag = "8")]
    pub locale: ::prost::alloc::string::String,
    /// Optional. The schedule options of this report.
    #[prost(message, optional, tag = "9")]
    pub schedule_options: ::core::option::Option<ScheduleOptions>,
}
/// Nested message and enum types in `Report`.
pub mod report {
    /// Represents a single value in a report.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Value {
        /// The value of the field, depends on the field's data format.
        #[prost(oneof = "value::Value", tags = "1, 2, 3, 4, 6, 7, 8")]
        pub value: ::core::option::Option<value::Value>,
    }
    /// Nested message and enum types in `Value`.
    pub mod value {
        /// A list of integer values.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct IntList {
            /// The values
            #[prost(int64, repeated, tag = "1")]
            pub values: ::prost::alloc::vec::Vec<i64>,
        }
        /// A list of string values.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct StringList {
            /// The values
            #[prost(string, repeated, tag = "1")]
            pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        }
        /// The value of the field, depends on the field's data format.
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Value {
            /// For integer values.
            #[prost(int64, tag = "1")]
            IntValue(i64),
            /// For double values.
            #[prost(double, tag = "2")]
            DoubleValue(f64),
            /// For string values.
            #[prost(string, tag = "3")]
            StringValue(::prost::alloc::string::String),
            /// For boolean values.
            #[prost(bool, tag = "4")]
            BoolValue(bool),
            /// For lists of integer values.
            #[prost(message, tag = "6")]
            IntListValue(IntList),
            /// For lists of string values.
            #[prost(message, tag = "7")]
            StringListValue(StringList),
            /// For bytes values.
            #[prost(bytes, tag = "8")]
            BytesValue(::prost::alloc::vec::Vec<u8>),
        }
    }
    /// Represents a sorting in a report.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Sort {
        /// Required. A field (dimension or metric) to sort by.
        #[prost(message, optional, tag = "1")]
        pub field: ::core::option::Option<Field>,
        /// Optional. The sort order. If true the sort will be descending.
        #[prost(bool, tag = "2")]
        pub descending: bool,
        /// Optional. Use to sort on a specific slice of data.
        #[prost(message, optional, tag = "3")]
        pub slice: ::core::option::Option<Slice>,
        /// Optional. When using time period columns, use this to sort on a specific
        /// column.
        #[prost(int32, optional, tag = "4")]
        pub time_period_index: ::core::option::Option<i32>,
        /// Optional. Use to specify which metric value type to sort on. Defaults to
        /// PRIMARY.
        #[prost(enumeration = "MetricValueType", optional, tag = "5")]
        pub metric_value_type: ::core::option::Option<i32>,
    }
    /// A table containing report data including dimension and metric values.
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct DataTable {}
    /// Nested message and enum types in `DataTable`.
    pub mod data_table {
        /// A row of report data.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Row {
            /// The order of the dimension values is the same as the order of the
            /// dimensions specified in the request.
            #[prost(message, repeated, tag = "1")]
            pub dimension_values: ::prost::alloc::vec::Vec<super::Value>,
            ///
            /// The length of the metric_value_groups
            /// field will be equal to the length of the date_ranges field in the
            /// fetch response. The metric_value_groups field is
            /// ordered such that each index corresponds to the date_range at the same
            /// index. For example, given date_ranges \[x, y\], metric_value_groups will
            /// have a length of two. The first entry in metric_value_groups represents
            /// the metrics for date x and the second entry in metric_value_groups
            /// represents the metrics for date y.
            #[prost(message, repeated, tag = "2")]
            pub metric_value_groups: ::prost::alloc::vec::Vec<MetricValueGroup>,
        }
        /// Contains all metric values requested for a single date range and set of
        /// column dimension values (returned in the columns field of the response).
        /// The order of the metrics in each field corresponds to the order of the
        /// metrics specified in the request.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct MetricValueGroup {
            /// Data for the PRIMARY MetricValueType.
            #[prost(message, repeated, tag = "1")]
            pub primary_values: ::prost::alloc::vec::Vec<super::Value>,
            /// Data for the PRIMARY_PERCENT_OF_TOTAL MetricValueType.
            #[prost(message, repeated, tag = "2")]
            pub primary_percent_of_total_values: ::prost::alloc::vec::Vec<super::Value>,
            /// Data for the COMPARISON MetricValueType.
            #[prost(message, repeated, tag = "3")]
            pub comparison_values: ::prost::alloc::vec::Vec<super::Value>,
            /// Data for the COMPARISON_PERCENT_OF_TOTAL MetricValueType.
            #[prost(message, repeated, tag = "4")]
            pub comparison_percent_of_total_values: ::prost::alloc::vec::Vec<
                super::Value,
            >,
            /// Data for the ABSOLUTE_CHANGE MetricValueType.
            #[prost(message, repeated, tag = "5")]
            pub absolute_change_values: ::prost::alloc::vec::Vec<super::Value>,
            /// Data for the RELATIVE_CHANGE MetricValueType.
            #[prost(message, repeated, tag = "6")]
            pub relative_change_values: ::prost::alloc::vec::Vec<super::Value>,
            /// If true, the flag's conditions are met. If false, the flag's
            /// conditions are not met. flag_values has the same length as
            /// flags and index i of flag_values represents the flag at index i
            /// of flags.
            #[prost(bool, repeated, tag = "7")]
            pub flag_values: ::prost::alloc::vec::Vec<bool>,
        }
    }
    /// A dimension or a metric in a report.
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct Field {
        /// Either a dimension or a metric.
        #[prost(oneof = "field::Field", tags = "1, 2")]
        pub field: ::core::option::Option<field::Field>,
    }
    /// Nested message and enum types in `Field`.
    pub mod field {
        /// Either a dimension or a metric.
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum Field {
            /// The dimension this field represents.
            #[prost(enumeration = "super::Dimension", tag = "1")]
            Dimension(i32),
            /// The metric this field represents.
            #[prost(enumeration = "super::Metric", tag = "2")]
            Metric(i32),
        }
    }
    /// Use to specify a slice of data.
    ///
    /// For example, in a report, to focus on just data from the US, specify
    /// `COUNTRY_NAME` for dimension and value: `"United States"`.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Slice {
        /// Required. The dimension to slice on.
        #[prost(enumeration = "Dimension", tag = "1")]
        pub dimension: i32,
        /// Required. The value of the dimension.
        #[prost(message, optional, tag = "2")]
        pub value: ::core::option::Option<Value>,
    }
    /// A filter over one or more fields.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Filter {
        /// The type determines how the underlying filters are combined.
        #[prost(oneof = "filter::Type", tags = "1, 2, 3, 4")]
        pub r#type: ::core::option::Option<filter::Type>,
    }
    /// Nested message and enum types in `Filter`.
    pub mod filter {
        /// A filter on a specific field.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct FieldFilter {
            /// Required. The field to filter on.
            #[prost(message, optional, tag = "1")]
            pub field: ::core::option::Option<super::Field>,
            /// Required. The operation of this filter.
            #[prost(enumeration = "Operation", tag = "2")]
            pub operation: i32,
            /// Required. Values to filter to.
            #[prost(message, repeated, tag = "3")]
            pub values: ::prost::alloc::vec::Vec<super::Value>,
            /// Optional. Use to filter on a specific slice of data.
            #[prost(message, optional, tag = "4")]
            pub slice: ::core::option::Option<super::Slice>,
            /// Optional. When using time period columns, use this to filter on a
            /// specific column.
            #[prost(int32, optional, tag = "5")]
            pub time_period_index: ::core::option::Option<i32>,
            /// Optional. Use to specify which metric value type to filter on. Defaults
            /// to PRIMARY.
            #[prost(enumeration = "super::MetricValueType", optional, tag = "6")]
            pub metric_value_type: ::core::option::Option<i32>,
        }
        /// A list of filters.
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct FilterList {
            /// Required. A list of filters.
            #[prost(message, repeated, tag = "1")]
            pub filters: ::prost::alloc::vec::Vec<super::Filter>,
        }
        /// Supported filter operations.
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum Operation {
            /// For scalar operands, checks if the operand is in the set of provided
            /// filter values.
            ///
            /// For list operands, checks if any element in the operand is in the set
            /// of provided filter values.
            ///
            /// Default value.
            In = 0,
            /// For scalar operands, checks that the operand is not in the set of
            /// provided filter values.
            ///
            /// For list operands, checks that none of the elements in the operand
            /// is in the set of provided filter values.
            NotIn = 1,
            /// For scalar string operands, checks if the operand contains any of the
            /// provided filter substrings.
            ///
            /// For string list operands, checks if any string in the operand contains
            /// any of the provided filter substrings.
            Contains = 2,
            /// For scalar string operands, checks that the operand contains none of
            /// the provided filter substrings.
            ///
            /// For string list operands, checks that none of the strings in the
            /// operand contain none of the provided filter substrings.
            NotContains = 3,
            /// Operand is less than the provided filter value.
            LessThan = 4,
            /// Operand is less than or equal to provided filter value.
            LessThanEquals = 5,
            /// Operand is greater than provided filter value.
            GreaterThan = 6,
            /// Operand is greater than or equal to provided filter value.
            GreaterThanEquals = 7,
            /// Operand is between provided filter values.
            Between = 8,
            /// Operand matches against a regex or set of regexes (one must match)
            Matches = 9,
            /// Operand negative matches against a regex or set of regexes (none must
            /// match)
            NotMatches = 10,
        }
        impl Operation {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Self::In => "IN",
                    Self::NotIn => "NOT_IN",
                    Self::Contains => "CONTAINS",
                    Self::NotContains => "NOT_CONTAINS",
                    Self::LessThan => "LESS_THAN",
                    Self::LessThanEquals => "LESS_THAN_EQUALS",
                    Self::GreaterThan => "GREATER_THAN",
                    Self::GreaterThanEquals => "GREATER_THAN_EQUALS",
                    Self::Between => "BETWEEN",
                    Self::Matches => "MATCHES",
                    Self::NotMatches => "NOT_MATCHES",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "IN" => Some(Self::In),
                    "NOT_IN" => Some(Self::NotIn),
                    "CONTAINS" => Some(Self::Contains),
                    "NOT_CONTAINS" => Some(Self::NotContains),
                    "LESS_THAN" => Some(Self::LessThan),
                    "LESS_THAN_EQUALS" => Some(Self::LessThanEquals),
                    "GREATER_THAN" => Some(Self::GreaterThan),
                    "GREATER_THAN_EQUALS" => Some(Self::GreaterThanEquals),
                    "BETWEEN" => Some(Self::Between),
                    "MATCHES" => Some(Self::Matches),
                    "NOT_MATCHES" => Some(Self::NotMatches),
                    _ => None,
                }
            }
        }
        /// The type determines how the underlying filters are combined.
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Type {
            /// A filter on a single field.
            #[prost(message, tag = "1")]
            FieldFilter(FieldFilter),
            /// A filter whose result is negated.
            #[prost(message, tag = "2")]
            NotFilter(::prost::alloc::boxed::Box<super::Filter>),
            /// A list of filters whose results are AND-ed.
            #[prost(message, tag = "3")]
            AndFilter(FilterList),
            /// A list of filters whose results are OR-ed.
            #[prost(message, tag = "4")]
            OrFilter(FilterList),
        }
    }
    /// A flag for a report. Flags are used show if certain thresholds are met.
    /// Result rows that match the filter will have the corresponding
    /// [MetricValueGroup.flagValues][MetricValueGroup] index set to true.
    /// For more information about flags see:
    /// <https://support.google.com/admanager/answer/15079975>
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Flag {
        /// Required. Filters to apply for the flag.
        #[prost(message, repeated, tag = "1")]
        pub filters: ::prost::alloc::vec::Vec<Filter>,
        /// Optional. Name of the flag.
        /// The flag names RED, YELLOW, GREEN, BLUE, PURPLE, and GREY correspond to
        /// the colored flags that appear in the UI. The UI will not display flags
        /// with other names, but they are available for use by API clients.
        #[prost(string, tag = "2")]
        pub name: ::prost::alloc::string::String,
    }
    /// A date range for a report.
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct DateRange {
        /// Either a fixed or relative date range.
        #[prost(oneof = "date_range::DateRangeType", tags = "1, 2")]
        pub date_range_type: ::core::option::Option<date_range::DateRangeType>,
    }
    /// Nested message and enum types in `DateRange`.
    pub mod date_range {
        /// A date range between two fixed dates (inclusive of end date).
        #[derive(Clone, Copy, PartialEq, ::prost::Message)]
        pub struct FixedDateRange {
            /// Required. The start date of this date range.
            #[prost(message, optional, tag = "1")]
            pub start_date: ::core::option::Option<
                super::super::super::super::super::r#type::Date,
            >,
            /// Required. The end date (inclusive) of this date range.
            #[prost(message, optional, tag = "2")]
            pub end_date: ::core::option::Option<
                super::super::super::super::super::r#type::Date,
            >,
        }
        /// Options for relative date ranges.
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum RelativeDateRange {
            /// Default value. This value is unused.
            Unspecified = 0,
            /// The date the report is run.
            Today = 1,
            /// The date a day before the date that the report is run.
            Yesterday = 2,
            /// The full week in which this report is run. Could include dates in
            /// the future.
            ThisWeek = 3,
            /// From the beginning of the calendar week (Monday to Sunday) in which the
            /// up to and including the day the report is run.
            ThisWeekToDate = 29,
            /// The full month in which this report is run. Could include dates in
            /// the future.
            ThisMonth = 4,
            /// From the beginning of the calendar month in which the report is run, to
            /// up to and including the day the report is run.
            ThisMonthToDate = 26,
            /// The full quarter in which this report is run. Could include dates
            /// in the future.
            ThisQuarter = 5,
            /// From the beginning of the calendar quarter in which the report is run,
            /// up to and including the day the report is run.
            ThisQuarterToDate = 27,
            /// The full year in which this report is run. Could include dates in
            /// the future.
            ThisYear = 6,
            /// From the beginning of the calendar year in which the report is run, to
            /// up to and including the day the report is run.
            ThisYearToDate = 28,
            /// The entire previous calendar week, Monday to Sunday (inclusive),
            /// preceding the calendar week the report is run.
            LastWeek = 7,
            /// The entire previous calendar month preceding the calendar month the
            /// report is run.
            LastMonth = 8,
            /// The entire previous calendar quarter preceding the calendar quarter the
            /// report is run.
            LastQuarter = 9,
            /// The entire previous calendar year preceding the calendar year the
            /// report is run.
            LastYear = 10,
            /// The 7 days preceding the day the report is run.
            Last7Days = 11,
            /// The 30 days preceding the day the report is run.
            Last30Days = 12,
            /// The 60 days preceding the day the report is run.
            Last60Days = 13,
            /// The 90 days preceding the day the report is run.
            Last90Days = 14,
            /// The 180 days preceding the day the report is run.
            Last180Days = 15,
            /// The 360 days preceding the day the report is run.
            Last360Days = 16,
            /// The 365 days preceding the day the report is run.
            Last365Days = 17,
            /// The entire previous 3 calendar months preceding the calendar month the
            /// report is run.
            Last3Months = 18,
            /// The entire previous 6 calendar months preceding the calendar month the
            /// report is run.
            Last6Months = 19,
            /// The entire previous 6 calendar months preceding the calendar month the
            /// report is run.
            Last12Months = 20,
            /// From 3 years before the report is run, to the day before the report is
            /// run, inclusive.
            AllAvailable = 21,
            /// Only valid when used in the comparison_date_range field. The complete
            /// period preceding the date period provided in date_range.
            ///
            /// In the case where date_range is a FixedDateRange of N days, this will
            /// be a period of N days where the end date is the date preceding the
            /// start date of the date_range.
            ///
            /// In the case where date_range is a RelativeDateRange, this will be a
            /// period of the same time frame preceding the date_range. In the case
            /// where the date_range does not capture the full period because a report
            /// is run in the middle of that period, this will still be the full
            /// preceding period. For example, if date_range is THIS_WEEK, but the
            /// report is run on a Wednesday, THIS_WEEK will be Monday - Wednesday, but
            /// PREVIOUS_PERIOD will be Monday - Sunday.
            PreviousPeriod = 22,
            /// Only valid when used in the comparison_date_range field. The period
            /// starting 1 year prior to the date period provided in date_range.
            ///
            /// In the case where date_range is a FixedDateRange, this will be a date
            /// range starting 1 year prior to the date_range start date and ending 1
            /// year prior to the date_range end date.
            ///
            /// In the case where date_range is a RelativeDateRange, this will be a
            /// period of the same time frame exactly 1 year prior to the date_range.
            /// In the case where the date_range does not capture the full period
            /// because a report is run in the middle of that period, this will still
            /// be the full period 1 year prior. For example, if date range is
            /// THIS_WEEK, but the report is run on a Wednesday, THIS_WEEK will be
            /// Monday - Wednesday, but SAME_PERIOD_PREVIOUS_YEAR will be Monday -
            /// Sunday.
            SamePeriodPreviousYear = 24,
        }
        impl RelativeDateRange {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Self::Unspecified => "RELATIVE_DATE_RANGE_UNSPECIFIED",
                    Self::Today => "TODAY",
                    Self::Yesterday => "YESTERDAY",
                    Self::ThisWeek => "THIS_WEEK",
                    Self::ThisWeekToDate => "THIS_WEEK_TO_DATE",
                    Self::ThisMonth => "THIS_MONTH",
                    Self::ThisMonthToDate => "THIS_MONTH_TO_DATE",
                    Self::ThisQuarter => "THIS_QUARTER",
                    Self::ThisQuarterToDate => "THIS_QUARTER_TO_DATE",
                    Self::ThisYear => "THIS_YEAR",
                    Self::ThisYearToDate => "THIS_YEAR_TO_DATE",
                    Self::LastWeek => "LAST_WEEK",
                    Self::LastMonth => "LAST_MONTH",
                    Self::LastQuarter => "LAST_QUARTER",
                    Self::LastYear => "LAST_YEAR",
                    Self::Last7Days => "LAST_7_DAYS",
                    Self::Last30Days => "LAST_30_DAYS",
                    Self::Last60Days => "LAST_60_DAYS",
                    Self::Last90Days => "LAST_90_DAYS",
                    Self::Last180Days => "LAST_180_DAYS",
                    Self::Last360Days => "LAST_360_DAYS",
                    Self::Last365Days => "LAST_365_DAYS",
                    Self::Last3Months => "LAST_3_MONTHS",
                    Self::Last6Months => "LAST_6_MONTHS",
                    Self::Last12Months => "LAST_12_MONTHS",
                    Self::AllAvailable => "ALL_AVAILABLE",
                    Self::PreviousPeriod => "PREVIOUS_PERIOD",
                    Self::SamePeriodPreviousYear => "SAME_PERIOD_PREVIOUS_YEAR",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "RELATIVE_DATE_RANGE_UNSPECIFIED" => Some(Self::Unspecified),
                    "TODAY" => Some(Self::Today),
                    "YESTERDAY" => Some(Self::Yesterday),
                    "THIS_WEEK" => Some(Self::ThisWeek),
                    "THIS_WEEK_TO_DATE" => Some(Self::ThisWeekToDate),
                    "THIS_MONTH" => Some(Self::ThisMonth),
                    "THIS_MONTH_TO_DATE" => Some(Self::ThisMonthToDate),
                    "THIS_QUARTER" => Some(Self::ThisQuarter),
                    "THIS_QUARTER_TO_DATE" => Some(Self::ThisQuarterToDate),
                    "THIS_YEAR" => Some(Self::ThisYear),
                    "THIS_YEAR_TO_DATE" => Some(Self::ThisYearToDate),
                    "LAST_WEEK" => Some(Self::LastWeek),
                    "LAST_MONTH" => Some(Self::LastMonth),
                    "LAST_QUARTER" => Some(Self::LastQuarter),
                    "LAST_YEAR" => Some(Self::LastYear),
                    "LAST_7_DAYS" => Some(Self::Last7Days),
                    "LAST_30_DAYS" => Some(Self::Last30Days),
                    "LAST_60_DAYS" => Some(Self::Last60Days),
                    "LAST_90_DAYS" => Some(Self::Last90Days),
                    "LAST_180_DAYS" => Some(Self::Last180Days),
                    "LAST_360_DAYS" => Some(Self::Last360Days),
                    "LAST_365_DAYS" => Some(Self::Last365Days),
                    "LAST_3_MONTHS" => Some(Self::Last3Months),
                    "LAST_6_MONTHS" => Some(Self::Last6Months),
                    "LAST_12_MONTHS" => Some(Self::Last12Months),
                    "ALL_AVAILABLE" => Some(Self::AllAvailable),
                    "PREVIOUS_PERIOD" => Some(Self::PreviousPeriod),
                    "SAME_PERIOD_PREVIOUS_YEAR" => Some(Self::SamePeriodPreviousYear),
                    _ => None,
                }
            }
        }
        /// Either a fixed or relative date range.
        #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
        pub enum DateRangeType {
            /// A fixed date range.
            #[prost(message, tag = "1")]
            Fixed(FixedDateRange),
            /// A relative date range.
            #[prost(enumeration = "RelativeDateRange", tag = "2")]
            Relative(i32),
        }
    }
    /// Valid time period columns.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum TimePeriodColumn {
        /// Default value. Report will have no time period column.
        Unspecified = 0,
        /// A column for each date in the report.
        Date = 1,
        /// A column for each week in the report.
        Week = 2,
        /// A column for each month in the report.
        Month = 3,
        /// A column for each quarter in the report.
        Quarter = 4,
    }
    impl TimePeriodColumn {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "TIME_PERIOD_COLUMN_UNSPECIFIED",
                Self::Date => "TIME_PERIOD_COLUMN_DATE",
                Self::Week => "TIME_PERIOD_COLUMN_WEEK",
                Self::Month => "TIME_PERIOD_COLUMN_MONTH",
                Self::Quarter => "TIME_PERIOD_COLUMN_QUARTER",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "TIME_PERIOD_COLUMN_UNSPECIFIED" => Some(Self::Unspecified),
                "TIME_PERIOD_COLUMN_DATE" => Some(Self::Date),
                "TIME_PERIOD_COLUMN_WEEK" => Some(Self::Week),
                "TIME_PERIOD_COLUMN_MONTH" => Some(Self::Month),
                "TIME_PERIOD_COLUMN_QUARTER" => Some(Self::Quarter),
                _ => None,
            }
        }
    }
    /// Reporting dimensions.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Dimension {
        /// Default value. This value is unused.
        Unspecified = 0,
        /// The domain name of the advertiser.
        AdvertiserDomainName = 242,
        /// The ID used in an external system for advertiser identification
        AdvertiserExternalId = 228,
        /// The ID of an advertiser company assigned to an order
        AdvertiserId = 131,
        /// Labels applied to the advertiser
        /// can be used for either competitive exclusion or ad exclusion
        AdvertiserLabels = 230,
        /// Label ids applied to the advertiser
        /// can be used for either competitive exclusion or ad exclusion
        AdvertiserLabelIds = 229,
        /// The name of an advertiser company assigned to an order
        AdvertiserName = 132,
        /// The name of the contact associated with an advertiser company
        AdvertiserPrimaryContact = 227,
        /// Shows an ENUM value describing whether a given piece of publisher
        /// inventory was above (ATF) or below the fold (BTF) of a page.
        AdLocation = 390,
        /// Shows a localized string describing whether a given piece of publisher
        /// inventory was above (ATF) or below the fold (BTF) of a page.
        AdLocationName = 391,
        /// The code of the ad unit where the ad was requested.
        AdUnitCode = 64,
        /// The code of the first level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel1 = 65,
        /// The code of the tenth level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel10 = 74,
        /// The code of the eleventh level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel11 = 75,
        /// The code of the twelfth level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel12 = 76,
        /// The code of the thirteenth level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel13 = 77,
        /// The code of the fourteenth level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel14 = 78,
        /// The code of the fifteenth level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel15 = 79,
        /// The code of the sixteenth level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel16 = 80,
        /// The code of the second level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel2 = 66,
        /// The code of the third level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel3 = 67,
        /// The code of the fourth level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel4 = 68,
        /// The code of the fifth level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel5 = 69,
        /// The code of the sixth level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel6 = 70,
        /// The code of the seventh level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel7 = 71,
        /// The code of the eighth level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel8 = 72,
        /// The code of the ninth level ad unit of the ad unit where the ad was
        /// requested.
        AdUnitCodeLevel9 = 73,
        /// The depth of the ad unit's hierarchy
        AdUnitDepth = 101,
        /// The ID of the ad unit where the ad was requested.
        AdUnitId = 25,
        /// The full hierarchy of ad unit IDs where the ad was requested, from
        /// root to leaf, excluding the root ad unit ID.
        AdUnitIdAllLevel = 27,
        /// The first level ad unit ID of the ad unit where the ad was requested.
        AdUnitIdLevel1 = 30,
        /// The tenth level ad unit ID of the ad unit where the ad was requested.
        AdUnitIdLevel10 = 48,
        /// The eleventh level ad unit ID of the ad unit where the ad was requested.
        AdUnitIdLevel11 = 50,
        /// The twelfth level ad unit ID of the ad unit where the ad was requested.
        AdUnitIdLevel12 = 52,
        /// The thirteenth level ad unit ID of the ad unit where the ad was
        /// requested.
        AdUnitIdLevel13 = 54,
        /// The fourteenth level ad unit ID of the ad unit where the ad was
        /// requested.
        AdUnitIdLevel14 = 56,
        /// The fifteenth level ad unit ID of the ad unit where the ad was requested.
        AdUnitIdLevel15 = 58,
        /// The sixteenth level ad unit ID of the ad unit where the ad was requested.
        AdUnitIdLevel16 = 60,
        /// The second level ad unit ID of the ad unit where the ad was requested.
        AdUnitIdLevel2 = 32,
        /// The third level ad unit ID of the ad unit where the ad was requested.
        AdUnitIdLevel3 = 34,
        /// The fourth level ad unit ID of the ad unit where the ad was requested.
        AdUnitIdLevel4 = 36,
        /// The fifth level ad unit ID of the ad unit where the ad was requested.
        AdUnitIdLevel5 = 38,
        /// The sixth level ad unit ID of the ad unit where the ad was requested.
        AdUnitIdLevel6 = 40,
        /// The seventh level ad unit ID of the ad unit where the ad was requested.
        AdUnitIdLevel7 = 42,
        /// The eighth level ad unit ID of the ad unit where the ad was requested.
        AdUnitIdLevel8 = 44,
        /// The ninth level ad unit ID of the ad unit where the ad was requested.
        AdUnitIdLevel9 = 46,
        /// The top-level ad unit ID of the ad unit where the ad was requested.
        AdUnitIdTopLevel = 142,
        /// The name of the ad unit where the ad was requested.
        AdUnitName = 26,
        /// The full hierarchy of ad unit names where the ad was requested, from
        /// root to leaf, excluding the root ad unit name.
        AdUnitNameAllLevel = 29,
        /// The first level ad unit name of the ad unit where the ad was requested.
        AdUnitNameLevel1 = 31,
        /// The tenth level ad unit name of the ad unit where the ad was requested.
        AdUnitNameLevel10 = 49,
        /// The eleventh level ad unit name of the ad unit where the ad was
        /// requested.
        AdUnitNameLevel11 = 51,
        /// The twelfth level ad unit name of the ad unit where the ad was requested.
        AdUnitNameLevel12 = 53,
        /// The thirteenth level ad unit name of the ad unit where the ad was
        /// requested.
        AdUnitNameLevel13 = 55,
        /// The fourteenth level ad unit name of the ad unit where the ad was
        /// requested.
        AdUnitNameLevel14 = 57,
        /// The fifteenth level ad unit name of the ad unit where the ad was
        /// requested.
        AdUnitNameLevel15 = 59,
        /// The sixteenth level ad unit name of the ad unit where the ad was
        /// requested.
        AdUnitNameLevel16 = 61,
        /// The second level ad unit name of the ad unit where the ad was requested.
        AdUnitNameLevel2 = 33,
        /// The third level ad unit name of the ad unit where the ad was requested.
        AdUnitNameLevel3 = 35,
        /// The fourth level ad unit name of the ad unit where the ad was requested.
        AdUnitNameLevel4 = 37,
        /// The fifth level ad unit name of the ad unit where the ad was requested.
        AdUnitNameLevel5 = 39,
        /// The sixth level ad unit name of the ad unit where the ad was requested.
        AdUnitNameLevel6 = 41,
        /// The seventh level ad unit name of the ad unit where the ad was requested.
        AdUnitNameLevel7 = 43,
        /// The eighth level ad unit name of the ad unit where the ad was requested.
        AdUnitNameLevel8 = 45,
        /// The ninth level ad unit name of the ad unit where the ad was requested.
        AdUnitNameLevel9 = 47,
        /// The top-level ad unit name of the ad unit where the ad was requested.
        AdUnitNameTopLevel = 143,
        /// The reward amount of the ad unit where the ad was requested.
        AdUnitRewardAmount = 63,
        /// The reward type of the ad unit where the ad was requested.
        AdUnitRewardType = 62,
        /// The status of the ad unit
        AdUnitStatus = 206,
        /// The name of the status of the ad unit
        AdUnitStatusName = 207,
        /// The app version.
        AppVersion = 392,
        /// The ID used in an external system for advertiser identification
        BackfillAdvertiserExternalId = 349,
        /// The ID of an advertiser company assigned to a backfill order
        BackfillAdvertiserId = 346,
        /// Labels applied to the advertiser
        /// can be used for either competitive exclusion or ad exclusion
        BackfillAdvertiserLabels = 351,
        /// Label ids applied to the advertiser
        /// can be used for either competitive exclusion or ad exclusion
        BackfillAdvertiserLabelIds = 350,
        /// The name of an advertiser company assigned to a backfill order
        BackfillAdvertiserName = 347,
        /// The name of the contact associated with an advertiser company
        BackfillAdvertiserPrimaryContact = 348,
        /// Enum value of Backfill creative billing type
        BackfillCreativeBillingType = 378,
        /// Localized string value of Backfill creative billing type
        BackfillCreativeBillingTypeName = 379,
        /// Represents the click-through URL of a Backfill creative
        BackfillCreativeClickThroughUrl = 376,
        /// The ID of a Backfill creative
        BackfillCreativeId = 370,
        /// Backfill creative name
        BackfillCreativeName = 371,
        /// Third party vendor name of a Backfill creative
        BackfillCreativeThirdPartyVendor = 377,
        /// Enum value of Backfill creative type
        BackfillCreativeType = 374,
        /// Localized string name of Backfill creative type
        BackfillCreativeTypeName = 375,
        /// Whether a Backfill line item is archived.
        BackfillLineItemArchived = 278,
        /// Backfill line item comanion delivery option ENUM value.
        BackfillLineItemCompanionDeliveryOption = 258,
        /// Localized Backfill line item comanion delivery option name.
        BackfillLineItemCompanionDeliveryOptionName = 259,
        /// The computed status of the BackfillLineItem.
        BackfillLineItemComputedStatus = 296,
        /// The localized name of the computed status of the BackfillLineItem.
        BackfillLineItemComputedStatusName = 297,
        /// The contracted units bought for the Backfill line item.
        BackfillLineItemContractedQuantity = 280,
        /// The cost per unit of the Backfill line item.
        BackfillLineItemCostPerUnit = 272,
        /// Backfill line item cost type ENUM value.
        BackfillLineItemCostType = 264,
        /// Localized Backfill line item cost type name.
        BackfillLineItemCostTypeName = 265,
        /// Represent the end date of a Backfill creative associated with a Backfill
        /// line item
        BackfillLineItemCreativeEndDate = 381,
        /// The creative rotation type of the BackfillLineItem.
        BackfillLineItemCreativeRotationType = 290,
        /// The localized name of the creative rotation type of the BackfillLineItem.
        BackfillLineItemCreativeRotationTypeName = 291,
        /// Represent the start date of a Backfill creative associated with a
        /// Backfill line item
        BackfillLineItemCreativeStartDate = 380,
        /// The 3 letter currency code of the Backfill line item
        BackfillLineItemCurrencyCode = 288,
        /// The progress made for the delivery of the Backfill line item.
        BackfillLineItemDeliveryIndicator = 274,
        /// The delivery rate type of the BackfillLineItem.
        BackfillLineItemDeliveryRateType = 292,
        /// The localized name of the delivery rate type of the BackfillLineItem.
        BackfillLineItemDeliveryRateTypeName = 293,
        /// The discount of the BackfillLineItem in whole units in the
        /// BackfillLineItem's currency code, or if unspecified the Network's
        /// currency code.
        BackfillLineItemDiscountAbsolute = 294,
        /// The discount of the BackfillLineItem in percentage.
        BackfillLineItemDiscountPercentage = 295,
        /// The end date of the Backfill line item.
        BackfillLineItemEndDate = 267,
        /// The end date and time of the Backfill line item.
        BackfillLineItemEndDateTime = 269,
        /// The ENUM value of the environment a Backfill line item is targeting.
        BackfillLineItemEnvironmentType = 302,
        /// The localized name of the environment a Backfill line item is targeting.
        BackfillLineItemEnvironmentTypeName = 257,
        /// The deal ID of the Backfill line item. Set for Programmatic Direct
        /// campaigns.
        BackfillLineItemExternalDealId = 285,
        /// The external ID of the Backfill line item.
        BackfillLineItemExternalId = 273,
        /// The frequency cap of the Backfill line item (descriptive string).
        BackfillLineItemFrequencyCap = 303,
        /// Backfill line item ID.
        BackfillLineItemId = 298,
        /// The application that last modified the Backfill line item.
        BackfillLineItemLastModifiedByApp = 289,
        /// The total number of clicks delivered of the lifetime of the Backfill line
        /// item.
        BackfillLineItemLifetimeClicks = 283,
        /// The total number of impressions delivered over the lifetime of the
        /// Backfill line item.
        BackfillLineItemLifetimeImpressions = 282,
        /// The total number of viewable impressions delivered over the lifetime of
        /// the Backfill line item.
        BackfillLineItemLifetimeViewableImpressions = 284,
        /// Whether or not the Backfill line item is Makegood. Makegood refers to
        /// free inventory offered to buyers to compensate for mistakes or
        /// under-delivery in the original campaigns.
        BackfillLineItemMakegood = 276,
        /// Backfill line item name.
        BackfillLineItemName = 299,
        /// The cost of booking for the Backfill line item (non-CPD).
        BackfillLineItemNonCpdBookedRevenue = 286,
        /// Whether a Backfill line item is eligible for opitimization.
        BackfillLineItemOptimizable = 277,
        /// Goal type ENUM value of the primary goal of the Backfill line item.
        BackfillLineItemPrimaryGoalType = 262,
        /// Localized goal type name of the primary goal of the Backfill line item.
        BackfillLineItemPrimaryGoalTypeName = 263,
        /// Unit type ENUM value of the primary goal of the Backfill line item.
        BackfillLineItemPrimaryGoalUnitType = 260,
        /// Localized unit type name of the primary goal of the Backfill line item.
        BackfillLineItemPrimaryGoalUnitTypeName = 261,
        /// The priority of this Backfill line item as a value between 1 and 16.
        /// In general, a lower priority means more serving priority for the
        /// Backfill line item.
        BackfillLineItemPriority = 266,
        /// ENUM value describing the state of inventory reservation for the
        /// BackfillLineItem.
        BackfillLineItemReservationStatus = 306,
        /// Localized string describing the state of inventory reservation for the
        /// BackfillLineItem.
        BackfillLineItemReservationStatusName = 307,
        /// The start date of the Backfill line item.
        BackfillLineItemStartDate = 268,
        /// The start date and time of the Backfill line item.
        BackfillLineItemStartDateTime = 270,
        /// Backfill line item type ENUM value.
        BackfillLineItemType = 300,
        /// Localized Backfill line item type name.
        BackfillLineItemTypeName = 301,
        /// Whether the Backfill line item end time and end date is set to
        /// effectively never end.
        BackfillLineItemUnlimitedEnd = 271,
        /// The artificial cost per unit used by the Ad server to help rank
        /// inventory.
        BackfillLineItemValueCostPerUnit = 275,
        /// The web property code used for dynamic allocation Backfill line items.
        BackfillLineItemWebPropertyCode = 287,
        /// The ID of Backfill creative, includes regular creatives, and master and
        /// companions in case of creative sets
        BackfillMasterCompanionCreativeId = 372,
        /// Name of Backfill creative, includes regular creatives, and master and
        /// companions in case of creative sets
        BackfillMasterCompanionCreativeName = 373,
        /// Backfill order agency.
        BackfillOrderAgency = 313,
        /// Backfill order agency ID.
        BackfillOrderAgencyId = 314,
        /// Backfill order booked CPC.
        BackfillOrderBookedCpc = 315,
        /// Backfill order booked CPM.
        BackfillOrderBookedCpm = 316,
        /// Backfill order delivery status ENUM value.
        BackfillOrderDeliveryStatus = 340,
        /// Backfill order delivery status localized name.
        BackfillOrderDeliveryStatusName = 341,
        /// Backfill order end date.
        BackfillOrderEndDate = 317,
        /// Backfill order end date and time.
        BackfillOrderEndDateTime = 319,
        /// Backfill order external ID.
        BackfillOrderExternalId = 320,
        /// Backfill order id.
        BackfillOrderId = 338,
        /// Backfill order labels.
        BackfillOrderLabels = 334,
        /// Backfill order labels IDs.
        BackfillOrderLabelIds = 335,
        /// Backfill order lifetime clicks.
        BackfillOrderLifetimeClicks = 322,
        /// Backfill order lifetime impressions.
        BackfillOrderLifetimeImpressions = 323,
        /// Backfill order name.
        BackfillOrderName = 339,
        /// Backfill order PO number.
        BackfillOrderPoNumber = 324,
        /// Whether the Backfill order is programmatic.
        BackfillOrderProgrammatic = 321,
        /// Backfill order sales person.
        BackfillOrderSalesperson = 325,
        /// Backfill order secondary sales people.
        BackfillOrderSecondarySalespeople = 329,
        /// Backfill order secondary sales people ID.
        BackfillOrderSecondarySalespeopleId = 328,
        /// Backfill order secondary traffickers.
        BackfillOrderSecondaryTraffickers = 331,
        /// Backfill order secondary traffickers ID.
        BackfillOrderSecondaryTraffickersId = 330,
        /// Backfill order start date.
        BackfillOrderStartDate = 332,
        /// Backfill order start date and time.
        BackfillOrderStartDateTime = 333,
        /// Backfill order trafficker.
        BackfillOrderTrafficker = 326,
        /// Backfill order trafficker ID.
        BackfillOrderTraffickerId = 327,
        /// Whether the Backfill order end time and end date is set to effectively
        /// never end.
        BackfillOrderUnlimitedEnd = 318,
        /// The ID of the buyer on a backfill programmatic proposal.
        BackfillProgrammaticBuyerId = 336,
        /// The name of the buyer on a backfill programmatic proposal.
        BackfillProgrammaticBuyerName = 337,
        /// The amount of information about the Publisher's page sent to the buyer
        /// who purchased the impressions.
        BrandingType = 383,
        /// The localized version of branding type, the amount of information about
        /// the Publisher's page sent to the buyer who purchased the impressions.
        BrandingTypeName = 384,
        /// Browser category.
        BrowserCategory = 119,
        /// Browser category name.
        BrowserCategoryName = 120,
        /// The ID of the browser.
        BrowserId = 235,
        /// The name of the browser.
        BrowserName = 236,
        /// Mobile carrier ID.
        CarrierId = 369,
        /// Name of the mobile carrier.
        CarrierName = 368,
        /// The ID of an advertiser, classified by Google, associated with a creative
        /// transacted
        ClassifiedAdvertiserId = 133,
        /// The name of an advertiser, classified by Google, associated with a
        /// creative transacted
        ClassifiedAdvertiserName = 134,
        /// ID of the brand, as classified by Google,
        ClassifiedBrandId = 243,
        /// Name of the brand, as classified by Google,
        ClassifiedBrandName = 244,
        /// ID of the video content served.
        ContentId = 246,
        /// Name of the video content served.
        ContentName = 247,
        /// The criteria ID of the country in which the ad served.
        CountryId = 11,
        /// The name of the country in which the ad served.
        CountryName = 12,
        /// Enum value of creative billing type
        CreativeBillingType = 366,
        /// Localized string value of creative billing type
        CreativeBillingTypeName = 367,
        /// Represents the click-through URL of a creative
        CreativeClickThroughUrl = 174,
        /// The ID of a creative
        CreativeId = 138,
        /// Creative name
        CreativeName = 139,
        /// Creative technology ENUM
        CreativeTechnology = 148,
        /// Creative technology locallized name
        CreativeTechnologyName = 149,
        /// Third party vendor name of a creative
        CreativeThirdPartyVendor = 361,
        /// Enum value of creative type
        CreativeType = 344,
        /// Localized string name of creative type
        CreativeTypeName = 345,
        /// Breaks down reporting data by date.
        Date = 3,
        /// Breaks down reporting data by day of the week. Monday is 1 and 7 is
        /// Sunday.
        DayOfWeek = 4,
        /// Demand channel.
        DemandChannel = 9,
        /// Demand channel name.
        DemandChannelName = 10,
        /// Demand subchannel.
        DemandSubchannel = 22,
        /// Demand subchannel name.
        DemandSubchannelName = 23,
        /// The device on which an ad was served.
        Device = 226,
        /// The device category to which an ad is being targeted.
        DeviceCategory = 15,
        /// The name of the category of device (smartphone, feature phone, tablet, or
        /// desktop) to which an ad is being targeted.
        DeviceCategoryName = 16,
        /// The localized name of the device on which an ad was served.
        DeviceName = 225,
        /// ID of the yield partner as classified by Google
        ExchangeThirdPartyCompanyId = 185,
        /// Name of the yield partner as classified by Google
        ExchangeThirdPartyCompanyName = 186,
        /// The ID of the first look pricing rule.
        FirstLookPricingRuleId = 248,
        /// The name of the first look pricing rule.
        FirstLookPricingRuleName = 249,
        /// Breaks down reporting data by hour in one day.
        Hour = 100,
        /// The interaction type of an ad.
        InteractionType = 223,
        /// The localized name of the interaction type of an ad.
        InteractionTypeName = 224,
        /// Inventory format.
        /// The format of the ad unit (e.g, banner) where the ad was requested.
        InventoryFormat = 17,
        /// Inventory format name.
        /// The format of the ad unit (e.g, banner) where the ad was requested.
        InventoryFormatName = 18,
        /// Inventory type.
        /// The kind of web page or device where the ad was requested.
        InventoryType = 19,
        /// Inventory type name.
        /// The kind of web page or device where the ad was requested.
        InventoryTypeName = 20,
        /// Whether traffic is Adx Direct.
        IsAdxDirect = 382,
        /// Whether traffic is First Look.
        IsFirstLookDeal = 401,
        /// The Custom Targeting Value ID
        KeyValuesId = 214,
        /// The Custom Targeting Value formatted like <key_name>=<value_name>
        KeyValuesName = 215,
        /// Whether a Line item is archived.
        LineItemArchived = 188,
        /// Line item comanion delivery option ENUM value.
        LineItemCompanionDeliveryOption = 204,
        /// Localized line item comanion delivery option name.
        LineItemCompanionDeliveryOptionName = 205,
        /// The computed status of the LineItem.
        LineItemComputedStatus = 250,
        /// The localized name of the computed status of the LineItem.
        LineItemComputedStatusName = 251,
        /// The contracted units bought for the Line item.
        LineItemContractedQuantity = 92,
        /// The cost per unit of the Line item.
        LineItemCostPerUnit = 85,
        /// Line item cost type ENUM value.
        LineItemCostType = 212,
        /// Localized line item cost type name.
        LineItemCostTypeName = 213,
        /// Represent the end date of a creative associated with line item
        LineItemCreativeEndDate = 176,
        /// The creative rotation type of the LineItem.
        LineItemCreativeRotationType = 189,
        /// The localized name of the creative rotation type of the LineItem.
        LineItemCreativeRotationTypeName = 190,
        /// Represent the start date of a creative associated with line item
        LineItemCreativeStartDate = 175,
        /// The 3 letter currency code of the Line Item
        LineItemCurrencyCode = 180,
        /// The progress made for the delivery of the Line item.
        LineItemDeliveryIndicator = 87,
        /// The delivery rate type of the LineItem.
        LineItemDeliveryRateType = 191,
        /// The localized name of the delivery rate type of the LineItem.
        LineItemDeliveryRateTypeName = 192,
        /// The discount of the LineItem in whole units in the LineItem's currency
        /// code, or if unspecified the Network's currency code.
        LineItemDiscountAbsolute = 195,
        /// The discount of the LineItem in percentage.
        LineItemDiscountPercentage = 196,
        /// The end date of the Line item.
        LineItemEndDate = 81,
        /// The end date and time of the Line item.
        LineItemEndDateTime = 83,
        /// The ENUM value of the environment a LineItem is targeting.
        LineItemEnvironmentType = 201,
        /// The localized name of the environment a LineItem is targeting.
        LineItemEnvironmentTypeName = 202,
        /// The deal ID of the Line item. Set for Programmatic Direct campaigns.
        LineItemExternalDealId = 97,
        /// The external ID of the Line item.
        LineItemExternalId = 86,
        /// The frequency cap of the Line item (descriptive string).
        LineItemFrequencyCap = 256,
        /// Line item ID.
        LineItemId = 1,
        /// The application that last modified the Line Item.
        LineItemLastModifiedByApp = 181,
        /// The total number of clicks delivered of the lifetime of the Line item.
        LineItemLifetimeClicks = 95,
        /// The total number of impressions delivered over the lifetime of the
        /// Line item.
        LineItemLifetimeImpressions = 94,
        /// The total number of viewable impressions delivered over the lifetime of
        /// the Line item.
        LineItemLifetimeViewableImpressions = 96,
        /// Whether or not the Line item is Makegood. Makegood refers to free
        /// inventory offered to buyers to compensate for mistakes or under-delivery
        /// in the original campaigns.
        LineItemMakegood = 89,
        /// Line item Name.
        LineItemName = 2,
        /// The cost of booking for the Line item (non-CPD).
        LineItemNonCpdBookedRevenue = 98,
        /// Whether a Line item is eligible for opitimization.
        LineItemOptimizable = 90,
        /// Goal type ENUM value of the primary goal of the line item.
        LineItemPrimaryGoalType = 210,
        /// Localized goal type name of the primary goal of the line item.
        LineItemPrimaryGoalTypeName = 211,
        /// The total number of impressions or clicks that are reserved for a
        /// line item. For line items of type BULK or PRICE_PRIORITY, this represents
        /// the number of remaining impressions reserved. If the line item has an
        /// impression cap goal, this represents the number of impressions or
        /// conversions that the line item will stop serving at if reached.
        LineItemPrimaryGoalUnitsAbsolute = 93,
        /// The percentage of impressions or clicks that are reserved for a
        /// line item. For line items of type SPONSORSHIP, this represents the
        /// percentage of available impressions reserved. For line items of type
        /// NETWORK or HOUSE, this represents the percentage of remaining impressions
        /// reserved.
        LineItemPrimaryGoalUnitsPercentage = 396,
        /// Unit type ENUM value of the primary goal of the line item.
        LineItemPrimaryGoalUnitType = 208,
        /// Localized unit type name of the primary goal of the line item.
        LineItemPrimaryGoalUnitTypeName = 209,
        /// The priority of this Line item as a value between 1 and 16.
        /// In general, a lower priority means more serving priority for the
        /// Line item.
        LineItemPriority = 24,
        /// ENUM value describing the state of inventory reservation for the
        /// LineItem.
        LineItemReservationStatus = 304,
        /// Localized string describing the state of inventory reservation for the
        /// LineItem.
        LineItemReservationStatusName = 305,
        /// The start date of the Line item.
        LineItemStartDate = 82,
        /// The start date and time of the Line item.
        LineItemStartDateTime = 84,
        /// Line item type ENUM value.
        LineItemType = 193,
        /// Localized line item type name.
        LineItemTypeName = 194,
        /// Whether the Line item end time and end date is set to effectively never
        /// end.
        LineItemUnlimitedEnd = 187,
        /// The artificial cost per unit used by the Ad server to help rank
        /// inventory.
        LineItemValueCostPerUnit = 88,
        /// The web property code used for dynamic allocation Line Items.
        LineItemWebPropertyCode = 179,
        /// The ID of creative, includes regular creatives, and master and companions
        /// in case of creative sets
        MasterCompanionCreativeId = 140,
        /// Name of creative, includes regular creatives, and master and companions
        /// in case of creative sets
        MasterCompanionCreativeName = 141,
        /// Whether the mobile app is free.
        MobileAppFree = 128,
        /// URL of app icon for the mobile app.
        MobileAppIconUrl = 129,
        /// The ID of the Mobile App.
        MobileAppId = 123,
        /// The name of the mobile app.
        MobileAppName = 127,
        /// Ownership status of the mobile app.
        MobileAppOwnershipStatus = 311,
        /// Ownership status of the mobile app.
        MobileAppOwnershipStatusName = 312,
        /// The App Store of the mobile app.
        MobileAppStore = 125,
        /// The localized name of the mobile app store.
        MobileAppStoreName = 245,
        /// Mobile inventory type.
        /// Identifies whether a mobile ad came from a regular web page, an AMP web
        /// page, or a mobile app.
        /// Values match the Inventory type dimension available in the Overview Home
        /// dashboard. Note: Video takes precedence over any other value, for
        /// example, if there is an in-stream video impression on a desktop device,
        /// it will be attributed to in-stream video and not desktop web.
        MobileInventoryType = 99,
        /// Mobile inventory type name.
        /// Identifies whether a mobile ad came from a regular web page, an AMP web
        /// page, or a mobile app.
        MobileInventoryTypeName = 21,
        /// SDK version of the mobile device.
        MobileSdkVersionName = 130,
        /// Breaks down reporting data by month and year.
        MonthYear = 6,
        /// Native ad format ID.
        NativeAdFormatId = 255,
        /// Native ad format name.
        NativeAdFormatName = 254,
        /// Native style ID.
        NativeStyleId = 253,
        /// Native style name.
        NativeStyleName = 252,
        /// Operating system category.
        OperatingSystemCategory = 117,
        /// Operating system category name.
        OperatingSystemCategoryName = 118,
        /// ID of the operating system version.
        OperatingSystemVersionId = 238,
        /// Details of the operating system, including version.
        OperatingSystemVersionName = 237,
        /// Order agency.
        OrderAgency = 150,
        /// Order agency ID.
        OrderAgencyId = 151,
        /// Order booked CPC.
        OrderBookedCpc = 152,
        /// Order booked CPM.
        OrderBookedCpm = 153,
        /// Order delivery status ENUM value.
        OrderDeliveryStatus = 231,
        /// Order delivery status localized name.
        OrderDeliveryStatusName = 239,
        /// Order end date.
        OrderEndDate = 154,
        /// Order end date and time.
        OrderEndDateTime = 155,
        /// Order external ID.
        OrderExternalId = 156,
        /// Order id.
        OrderId = 7,
        /// Order labels.
        OrderLabels = 170,
        /// Order labels IDs.
        OrderLabelIds = 171,
        /// Order lifetime clicks.
        OrderLifetimeClicks = 158,
        /// Order lifetime impressions.
        OrderLifetimeImpressions = 159,
        /// Order name.
        OrderName = 8,
        /// Order PO number.
        OrderPoNumber = 160,
        /// Whether the Order is programmatic.
        OrderProgrammatic = 157,
        /// Order sales person.
        OrderSalesperson = 161,
        /// Order secondary sales people.
        OrderSecondarySalespeople = 164,
        /// Order secondary sales people ID.
        OrderSecondarySalespeopleId = 165,
        /// Order secondary traffickers.
        OrderSecondaryTraffickers = 166,
        /// Order secondary traffickers ID.
        OrderSecondaryTraffickersId = 167,
        /// Order start date.
        OrderStartDate = 168,
        /// Order start date and time.
        OrderStartDateTime = 169,
        /// Order trafficker.
        OrderTrafficker = 162,
        /// Order trafficker ID.
        OrderTraffickerId = 163,
        /// Whether the Order end time and end date is set to effectively never
        /// end.
        OrderUnlimitedEnd = 203,
        /// Placement ID
        PlacementId = 113,
        /// The full list of placement IDs associated with the ad unit.
        PlacementIdAll = 144,
        /// Placement name
        PlacementName = 114,
        /// The full list of placement names associated with the ad unit.
        PlacementNameAll = 145,
        /// Placement status ENUM value
        PlacementStatus = 362,
        /// The full list of placement status ENUM values associated with the ad
        /// unit.
        PlacementStatusAll = 363,
        /// Localized placement status name.
        PlacementStatusName = 364,
        /// The full list of localized placement status names associated with the ad
        /// unit.
        PlacementStatusNameAll = 365,
        /// The ID of the buyer on a programmatic proposal.
        ProgrammaticBuyerId = 240,
        /// The name of the buyer on a programmatic proposal.
        ProgrammaticBuyerName = 241,
        /// Programmatic channel.
        /// The type of transaction that occurred in Ad Exchange.
        ProgrammaticChannel = 13,
        /// Programmatic channel name.
        /// The type of transaction that occurred in Ad Exchange.
        ProgrammaticChannelName = 14,
        /// The size of a rendered creative, It can differ with the creative's size
        /// if a creative is shown in an ad slot of a different size.
        RenderedCreativeSize = 343,
        /// Inventory Requested Ad Sizes dimension
        RequestedAdSizes = 352,
        /// Request type ENUM
        RequestType = 146,
        /// Request type locallized name
        RequestTypeName = 147,
        /// Information about domain or subdomains.
        Site = 387,
        /// The ID of the browser, device or other environment into which a line item
        /// or creative was served.
        TargetingId = 232,
        /// Information about the browser, device and other environments into which
        /// a line item or creative was served.
        TargetingName = 233,
        /// The way in which advertisers targeted their ads.
        TargetingType = 385,
        /// The localized name of the way in which advertisers targeted their ads.
        TargetingTypeName = 386,
        /// Inventory Traffic source dimension
        TrafficSource = 388,
        /// Inventory Traffic source dimension name
        TrafficSourceName = 389,
        /// Unified pricing rule ID dimension
        UnifiedPricingRuleId = 393,
        /// Unified pricing rule name dimension
        UnifiedPricingRuleName = 394,
        /// The video placement enum as defined by ADCOM 1.0-202303.
        VideoPlcmt = 172,
        /// The localized name of the video placement as defined by ADCOM 1.0-202303.
        VideoPlcmtName = 173,
        /// Breaks down reporting data by week of the year.
        Week = 5,
        /// Name of the company within a yield group
        YieldGroupBuyerName = 184,
        /// ID of the group of ad networks or exchanges used for Mediation and Open
        /// Bidding
        YieldGroupId = 182,
        /// Name of the group of ad networks or exchanges used for Mediation and Open
        /// Bidding
        YieldGroupName = 183,
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 0 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField0OptionId = 10000,
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 1 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField1OptionId = 10001,
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 2 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField2OptionId = 10002,
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 3 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField3OptionId = 10003,
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 4 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField4OptionId = 10004,
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 5 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField5OptionId = 10005,
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 6 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField6OptionId = 10006,
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 7 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField7OptionId = 10007,
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 8 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField8OptionId = 10008,
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 9 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField9OptionId = 10009,
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 10 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField10OptionId = 10010,
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 11 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField11OptionId = 10011,
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 12 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField12OptionId = 10012,
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 13 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField13OptionId = 10013,
        /// Custom field option ID for Line Item with custom field ID equal to the ID
        /// in index 14 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField14OptionId = 10014,
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 0 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField0Value = 11000,
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 1 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField1Value = 11001,
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 2 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField2Value = 11002,
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 3 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField3Value = 11003,
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 4 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField4Value = 11004,
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 5 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField5Value = 11005,
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 6 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField6Value = 11006,
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 7 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField7Value = 11007,
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 8 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField8Value = 11008,
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 9 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField9Value = 11009,
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 10 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField10Value = 11010,
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 11 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField11Value = 11011,
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 12 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField12Value = 11012,
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 13 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField13Value = 11013,
        /// Custom field value for Line Item with custom field ID equal to the ID
        /// in index 14 of `ReportDefinition.line_item_custom_field_ids`.
        LineItemCustomField14Value = 11014,
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 0 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField0OptionId = 12000,
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 1 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField1OptionId = 12001,
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 2 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField2OptionId = 12002,
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 3 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField3OptionId = 12003,
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 4 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField4OptionId = 12004,
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 5 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField5OptionId = 12005,
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 6 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField6OptionId = 12006,
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 7 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField7OptionId = 12007,
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 8 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField8OptionId = 12008,
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 9 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField9OptionId = 12009,
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 10 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField10OptionId = 12010,
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 11 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField11OptionId = 12011,
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 12 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField12OptionId = 12012,
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 13 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField13OptionId = 12013,
        /// Custom field option ID for Order with custom field ID equal to the ID
        /// in index 14 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField14OptionId = 12014,
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 0 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField0Value = 13000,
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 1 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField1Value = 13001,
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 2 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField2Value = 13002,
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 3 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField3Value = 13003,
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 4 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField4Value = 13004,
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 5 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField5Value = 13005,
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 6 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField6Value = 13006,
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 7 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField7Value = 13007,
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 8 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField8Value = 13008,
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 9 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField9Value = 13009,
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 10 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField10Value = 13010,
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 11 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField11Value = 13011,
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 12 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField12Value = 13012,
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 13 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField13Value = 13013,
        /// Custom field value for Order with custom field ID equal to the ID
        /// in index 14 of `ReportDefinition.order_custom_field_ids`.
        OrderCustomField14Value = 13014,
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 0 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField0OptionId = 14000,
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 1 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField1OptionId = 14001,
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 2 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField2OptionId = 14002,
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 3 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField3OptionId = 14003,
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 4 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField4OptionId = 14004,
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 5 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField5OptionId = 14005,
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 6 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField6OptionId = 14006,
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 7 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField7OptionId = 14007,
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 8 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField8OptionId = 14008,
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 9 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField9OptionId = 14009,
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 10 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField10OptionId = 14010,
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 11 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField11OptionId = 14011,
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 12 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField12OptionId = 14012,
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 13 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField13OptionId = 14013,
        /// Custom field option ID for Creative with custom field ID equal to the ID
        /// in index 14 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField14OptionId = 14014,
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 0 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField0Value = 15000,
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 1 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField1Value = 15001,
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 2 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField2Value = 15002,
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 3 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField3Value = 15003,
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 4 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField4Value = 15004,
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 5 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField5Value = 15005,
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 6 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField6Value = 15006,
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 7 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField7Value = 15007,
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 8 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField8Value = 15008,
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 9 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField9Value = 15009,
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 10 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField10Value = 15010,
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 11 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField11Value = 15011,
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 12 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField12Value = 15012,
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 13 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField13Value = 15013,
        /// Custom field value for Creative with custom field ID equal to the ID
        /// in index 14 of `ReportDefinition.creative_custom_field_ids`.
        CreativeCustomField14Value = 15014,
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 0 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField0OptionId = 16000,
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 1 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField1OptionId = 16001,
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 2 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField2OptionId = 16002,
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 3 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField3OptionId = 16003,
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 4 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField4OptionId = 16004,
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 5 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField5OptionId = 16005,
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 6 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField6OptionId = 16006,
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 7 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField7OptionId = 16007,
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 8 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField8OptionId = 16008,
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 9 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField9OptionId = 16009,
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 10 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField10OptionId = 16010,
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 11 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField11OptionId = 16011,
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 12 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField12OptionId = 16012,
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 13 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField13OptionId = 16013,
        /// Custom field option ID for Backfill line item with custom field ID equal
        /// to the ID in index 14 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField14OptionId = 16014,
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 0 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField0Value = 17000,
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 1 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField1Value = 17001,
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 2 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField2Value = 17002,
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 3 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField3Value = 17003,
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 4 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField4Value = 17004,
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 5 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField5Value = 17005,
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 6 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField6Value = 17006,
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 7 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField7Value = 17007,
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 8 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField8Value = 17008,
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 9 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField9Value = 17009,
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 10 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField10Value = 17010,
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 11 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField11Value = 17011,
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 12 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField12Value = 17012,
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 13 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField13Value = 17013,
        /// Custom field value for Backfill line item with custom field ID equal to
        /// the ID in index 14 of `ReportDefinition.line_item_custom_field_ids`.
        BackfillLineItemCustomField14Value = 17014,
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 0 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField0OptionId = 18000,
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 1 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField1OptionId = 18001,
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 2 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField2OptionId = 18002,
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 3 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField3OptionId = 18003,
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 4 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField4OptionId = 18004,
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 5 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField5OptionId = 18005,
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 6 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField6OptionId = 18006,
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 7 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField7OptionId = 18007,
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 8 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField8OptionId = 18008,
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 9 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField9OptionId = 18009,
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 10 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField10OptionId = 18010,
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 11 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField11OptionId = 18011,
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 12 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField12OptionId = 18012,
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 13 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField13OptionId = 18013,
        /// Custom field option ID for Backfill order with custom field ID equal to
        /// the ID in index 14 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField14OptionId = 18014,
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 0 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField0Value = 19000,
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 1 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField1Value = 19001,
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 2 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField2Value = 19002,
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 3 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField3Value = 19003,
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 4 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField4Value = 19004,
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 5 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField5Value = 19005,
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 6 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField6Value = 19006,
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 7 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField7Value = 19007,
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 8 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField8Value = 19008,
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 9 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField9Value = 19009,
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 10 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField10Value = 19010,
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 11 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField11Value = 19011,
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 12 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField12Value = 19012,
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 13 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField13Value = 19013,
        /// Custom field value for Backfill order with custom field ID equal to the
        /// ID in index 14 of `ReportDefinition.order_custom_field_ids`.
        BackfillOrderCustomField14Value = 19014,
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 0 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField0OptionId = 20000,
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 1 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField1OptionId = 20001,
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 2 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField2OptionId = 20002,
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 3 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField3OptionId = 20003,
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 4 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField4OptionId = 20004,
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 5 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField5OptionId = 20005,
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 6 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField6OptionId = 20006,
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 7 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField7OptionId = 20007,
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 8 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField8OptionId = 20008,
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 9 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField9OptionId = 20009,
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 10 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField10OptionId = 20010,
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 11 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField11OptionId = 20011,
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 12 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField12OptionId = 20012,
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 13 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField13OptionId = 20013,
        /// Custom field option ID for Backfill creative with custom field ID equal
        /// to the ID in index 14 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField14OptionId = 20014,
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 0 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField0Value = 21000,
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 1 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField1Value = 21001,
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 2 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField2Value = 21002,
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 3 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField3Value = 21003,
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 4 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField4Value = 21004,
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 5 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField5Value = 21005,
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 6 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField6Value = 21006,
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 7 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField7Value = 21007,
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 8 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField8Value = 21008,
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 9 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField9Value = 21009,
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 10 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField10Value = 21010,
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 11 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField11Value = 21011,
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 12 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField12Value = 21012,
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 13 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField13Value = 21013,
        /// Custom field value for Backfill creative with custom field ID equal to
        /// the ID in index 14 of `ReportDefinition.creative_custom_field_ids`.
        BackfillCreativeCustomField14Value = 21014,
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 0 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension0ValueId = 100000,
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 1 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension1ValueId = 100001,
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 2 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension2ValueId = 100002,
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 3 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension3ValueId = 100003,
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 4 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension4ValueId = 100004,
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 5 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension5ValueId = 100005,
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 6 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension6ValueId = 100006,
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 9 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension7ValueId = 100007,
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 8 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension8ValueId = 100008,
        /// Custom Dimension Value ID for Custom Dimension with key equal to the key
        /// in index 9 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension9ValueId = 100009,
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// id in index 0 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension0Value = 101000,
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// id in index 1 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension1Value = 101001,
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// id in index 2 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension2Value = 101002,
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// id in index 3 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension3Value = 101003,
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// id in index 4 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension4Value = 101004,
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// id in index 5 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension5Value = 101005,
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// id in index 6 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension6Value = 101006,
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// id in index 7 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension7Value = 101007,
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// id in index 8 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension8Value = 101008,
        /// Custom Dimension Value name for Custom Dimension with key equal to the
        /// id in index 9 of `ReportDefinition.custom_dimension_key_ids`.
        CustomDimension9Value = 101009,
    }
    impl Dimension {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "DIMENSION_UNSPECIFIED",
                Self::AdvertiserDomainName => "ADVERTISER_DOMAIN_NAME",
                Self::AdvertiserExternalId => "ADVERTISER_EXTERNAL_ID",
                Self::AdvertiserId => "ADVERTISER_ID",
                Self::AdvertiserLabels => "ADVERTISER_LABELS",
                Self::AdvertiserLabelIds => "ADVERTISER_LABEL_IDS",
                Self::AdvertiserName => "ADVERTISER_NAME",
                Self::AdvertiserPrimaryContact => "ADVERTISER_PRIMARY_CONTACT",
                Self::AdLocation => "AD_LOCATION",
                Self::AdLocationName => "AD_LOCATION_NAME",
                Self::AdUnitCode => "AD_UNIT_CODE",
                Self::AdUnitCodeLevel1 => "AD_UNIT_CODE_LEVEL_1",
                Self::AdUnitCodeLevel10 => "AD_UNIT_CODE_LEVEL_10",
                Self::AdUnitCodeLevel11 => "AD_UNIT_CODE_LEVEL_11",
                Self::AdUnitCodeLevel12 => "AD_UNIT_CODE_LEVEL_12",
                Self::AdUnitCodeLevel13 => "AD_UNIT_CODE_LEVEL_13",
                Self::AdUnitCodeLevel14 => "AD_UNIT_CODE_LEVEL_14",
                Self::AdUnitCodeLevel15 => "AD_UNIT_CODE_LEVEL_15",
                Self::AdUnitCodeLevel16 => "AD_UNIT_CODE_LEVEL_16",
                Self::AdUnitCodeLevel2 => "AD_UNIT_CODE_LEVEL_2",
                Self::AdUnitCodeLevel3 => "AD_UNIT_CODE_LEVEL_3",
                Self::AdUnitCodeLevel4 => "AD_UNIT_CODE_LEVEL_4",
                Self::AdUnitCodeLevel5 => "AD_UNIT_CODE_LEVEL_5",
                Self::AdUnitCodeLevel6 => "AD_UNIT_CODE_LEVEL_6",
                Self::AdUnitCodeLevel7 => "AD_UNIT_CODE_LEVEL_7",
                Self::AdUnitCodeLevel8 => "AD_UNIT_CODE_LEVEL_8",
                Self::AdUnitCodeLevel9 => "AD_UNIT_CODE_LEVEL_9",
                Self::AdUnitDepth => "AD_UNIT_DEPTH",
                Self::AdUnitId => "AD_UNIT_ID",
                Self::AdUnitIdAllLevel => "AD_UNIT_ID_ALL_LEVEL",
                Self::AdUnitIdLevel1 => "AD_UNIT_ID_LEVEL_1",
                Self::AdUnitIdLevel10 => "AD_UNIT_ID_LEVEL_10",
                Self::AdUnitIdLevel11 => "AD_UNIT_ID_LEVEL_11",
                Self::AdUnitIdLevel12 => "AD_UNIT_ID_LEVEL_12",
                Self::AdUnitIdLevel13 => "AD_UNIT_ID_LEVEL_13",
                Self::AdUnitIdLevel14 => "AD_UNIT_ID_LEVEL_14",
                Self::AdUnitIdLevel15 => "AD_UNIT_ID_LEVEL_15",
                Self::AdUnitIdLevel16 => "AD_UNIT_ID_LEVEL_16",
                Self::AdUnitIdLevel2 => "AD_UNIT_ID_LEVEL_2",
                Self::AdUnitIdLevel3 => "AD_UNIT_ID_LEVEL_3",
                Self::AdUnitIdLevel4 => "AD_UNIT_ID_LEVEL_4",
                Self::AdUnitIdLevel5 => "AD_UNIT_ID_LEVEL_5",
                Self::AdUnitIdLevel6 => "AD_UNIT_ID_LEVEL_6",
                Self::AdUnitIdLevel7 => "AD_UNIT_ID_LEVEL_7",
                Self::AdUnitIdLevel8 => "AD_UNIT_ID_LEVEL_8",
                Self::AdUnitIdLevel9 => "AD_UNIT_ID_LEVEL_9",
                Self::AdUnitIdTopLevel => "AD_UNIT_ID_TOP_LEVEL",
                Self::AdUnitName => "AD_UNIT_NAME",
                Self::AdUnitNameAllLevel => "AD_UNIT_NAME_ALL_LEVEL",
                Self::AdUnitNameLevel1 => "AD_UNIT_NAME_LEVEL_1",
                Self::AdUnitNameLevel10 => "AD_UNIT_NAME_LEVEL_10",
                Self::AdUnitNameLevel11 => "AD_UNIT_NAME_LEVEL_11",
                Self::AdUnitNameLevel12 => "AD_UNIT_NAME_LEVEL_12",
                Self::AdUnitNameLevel13 => "AD_UNIT_NAME_LEVEL_13",
                Self::AdUnitNameLevel14 => "AD_UNIT_NAME_LEVEL_14",
                Self::AdUnitNameLevel15 => "AD_UNIT_NAME_LEVEL_15",
                Self::AdUnitNameLevel16 => "AD_UNIT_NAME_LEVEL_16",
                Self::AdUnitNameLevel2 => "AD_UNIT_NAME_LEVEL_2",
                Self::AdUnitNameLevel3 => "AD_UNIT_NAME_LEVEL_3",
                Self::AdUnitNameLevel4 => "AD_UNIT_NAME_LEVEL_4",
                Self::AdUnitNameLevel5 => "AD_UNIT_NAME_LEVEL_5",
                Self::AdUnitNameLevel6 => "AD_UNIT_NAME_LEVEL_6",
                Self::AdUnitNameLevel7 => "AD_UNIT_NAME_LEVEL_7",
                Self::AdUnitNameLevel8 => "AD_UNIT_NAME_LEVEL_8",
                Self::AdUnitNameLevel9 => "AD_UNIT_NAME_LEVEL_9",
                Self::AdUnitNameTopLevel => "AD_UNIT_NAME_TOP_LEVEL",
                Self::AdUnitRewardAmount => "AD_UNIT_REWARD_AMOUNT",
                Self::AdUnitRewardType => "AD_UNIT_REWARD_TYPE",
                Self::AdUnitStatus => "AD_UNIT_STATUS",
                Self::AdUnitStatusName => "AD_UNIT_STATUS_NAME",
                Self::AppVersion => "APP_VERSION",
                Self::BackfillAdvertiserExternalId => "BACKFILL_ADVERTISER_EXTERNAL_ID",
                Self::BackfillAdvertiserId => "BACKFILL_ADVERTISER_ID",
                Self::BackfillAdvertiserLabels => "BACKFILL_ADVERTISER_LABELS",
                Self::BackfillAdvertiserLabelIds => "BACKFILL_ADVERTISER_LABEL_IDS",
                Self::BackfillAdvertiserName => "BACKFILL_ADVERTISER_NAME",
                Self::BackfillAdvertiserPrimaryContact => {
                    "BACKFILL_ADVERTISER_PRIMARY_CONTACT"
                }
                Self::BackfillCreativeBillingType => "BACKFILL_CREATIVE_BILLING_TYPE",
                Self::BackfillCreativeBillingTypeName => {
                    "BACKFILL_CREATIVE_BILLING_TYPE_NAME"
                }
                Self::BackfillCreativeClickThroughUrl => {
                    "BACKFILL_CREATIVE_CLICK_THROUGH_URL"
                }
                Self::BackfillCreativeId => "BACKFILL_CREATIVE_ID",
                Self::BackfillCreativeName => "BACKFILL_CREATIVE_NAME",
                Self::BackfillCreativeThirdPartyVendor => {
                    "BACKFILL_CREATIVE_THIRD_PARTY_VENDOR"
                }
                Self::BackfillCreativeType => "BACKFILL_CREATIVE_TYPE",
                Self::BackfillCreativeTypeName => "BACKFILL_CREATIVE_TYPE_NAME",
                Self::BackfillLineItemArchived => "BACKFILL_LINE_ITEM_ARCHIVED",
                Self::BackfillLineItemCompanionDeliveryOption => {
                    "BACKFILL_LINE_ITEM_COMPANION_DELIVERY_OPTION"
                }
                Self::BackfillLineItemCompanionDeliveryOptionName => {
                    "BACKFILL_LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME"
                }
                Self::BackfillLineItemComputedStatus => {
                    "BACKFILL_LINE_ITEM_COMPUTED_STATUS"
                }
                Self::BackfillLineItemComputedStatusName => {
                    "BACKFILL_LINE_ITEM_COMPUTED_STATUS_NAME"
                }
                Self::BackfillLineItemContractedQuantity => {
                    "BACKFILL_LINE_ITEM_CONTRACTED_QUANTITY"
                }
                Self::BackfillLineItemCostPerUnit => "BACKFILL_LINE_ITEM_COST_PER_UNIT",
                Self::BackfillLineItemCostType => "BACKFILL_LINE_ITEM_COST_TYPE",
                Self::BackfillLineItemCostTypeName => "BACKFILL_LINE_ITEM_COST_TYPE_NAME",
                Self::BackfillLineItemCreativeEndDate => {
                    "BACKFILL_LINE_ITEM_CREATIVE_END_DATE"
                }
                Self::BackfillLineItemCreativeRotationType => {
                    "BACKFILL_LINE_ITEM_CREATIVE_ROTATION_TYPE"
                }
                Self::BackfillLineItemCreativeRotationTypeName => {
                    "BACKFILL_LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME"
                }
                Self::BackfillLineItemCreativeStartDate => {
                    "BACKFILL_LINE_ITEM_CREATIVE_START_DATE"
                }
                Self::BackfillLineItemCurrencyCode => "BACKFILL_LINE_ITEM_CURRENCY_CODE",
                Self::BackfillLineItemDeliveryIndicator => {
                    "BACKFILL_LINE_ITEM_DELIVERY_INDICATOR"
                }
                Self::BackfillLineItemDeliveryRateType => {
                    "BACKFILL_LINE_ITEM_DELIVERY_RATE_TYPE"
                }
                Self::BackfillLineItemDeliveryRateTypeName => {
                    "BACKFILL_LINE_ITEM_DELIVERY_RATE_TYPE_NAME"
                }
                Self::BackfillLineItemDiscountAbsolute => {
                    "BACKFILL_LINE_ITEM_DISCOUNT_ABSOLUTE"
                }
                Self::BackfillLineItemDiscountPercentage => {
                    "BACKFILL_LINE_ITEM_DISCOUNT_PERCENTAGE"
                }
                Self::BackfillLineItemEndDate => "BACKFILL_LINE_ITEM_END_DATE",
                Self::BackfillLineItemEndDateTime => "BACKFILL_LINE_ITEM_END_DATE_TIME",
                Self::BackfillLineItemEnvironmentType => {
                    "BACKFILL_LINE_ITEM_ENVIRONMENT_TYPE"
                }
                Self::BackfillLineItemEnvironmentTypeName => {
                    "BACKFILL_LINE_ITEM_ENVIRONMENT_TYPE_NAME"
                }
                Self::BackfillLineItemExternalDealId => {
                    "BACKFILL_LINE_ITEM_EXTERNAL_DEAL_ID"
                }
                Self::BackfillLineItemExternalId => "BACKFILL_LINE_ITEM_EXTERNAL_ID",
                Self::BackfillLineItemFrequencyCap => "BACKFILL_LINE_ITEM_FREQUENCY_CAP",
                Self::BackfillLineItemId => "BACKFILL_LINE_ITEM_ID",
                Self::BackfillLineItemLastModifiedByApp => {
                    "BACKFILL_LINE_ITEM_LAST_MODIFIED_BY_APP"
                }
                Self::BackfillLineItemLifetimeClicks => {
                    "BACKFILL_LINE_ITEM_LIFETIME_CLICKS"
                }
                Self::BackfillLineItemLifetimeImpressions => {
                    "BACKFILL_LINE_ITEM_LIFETIME_IMPRESSIONS"
                }
                Self::BackfillLineItemLifetimeViewableImpressions => {
                    "BACKFILL_LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS"
                }
                Self::BackfillLineItemMakegood => "BACKFILL_LINE_ITEM_MAKEGOOD",
                Self::BackfillLineItemName => "BACKFILL_LINE_ITEM_NAME",
                Self::BackfillLineItemNonCpdBookedRevenue => {
                    "BACKFILL_LINE_ITEM_NON_CPD_BOOKED_REVENUE"
                }
                Self::BackfillLineItemOptimizable => "BACKFILL_LINE_ITEM_OPTIMIZABLE",
                Self::BackfillLineItemPrimaryGoalType => {
                    "BACKFILL_LINE_ITEM_PRIMARY_GOAL_TYPE"
                }
                Self::BackfillLineItemPrimaryGoalTypeName => {
                    "BACKFILL_LINE_ITEM_PRIMARY_GOAL_TYPE_NAME"
                }
                Self::BackfillLineItemPrimaryGoalUnitType => {
                    "BACKFILL_LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE"
                }
                Self::BackfillLineItemPrimaryGoalUnitTypeName => {
                    "BACKFILL_LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME"
                }
                Self::BackfillLineItemPriority => "BACKFILL_LINE_ITEM_PRIORITY",
                Self::BackfillLineItemReservationStatus => {
                    "BACKFILL_LINE_ITEM_RESERVATION_STATUS"
                }
                Self::BackfillLineItemReservationStatusName => {
                    "BACKFILL_LINE_ITEM_RESERVATION_STATUS_NAME"
                }
                Self::BackfillLineItemStartDate => "BACKFILL_LINE_ITEM_START_DATE",
                Self::BackfillLineItemStartDateTime => {
                    "BACKFILL_LINE_ITEM_START_DATE_TIME"
                }
                Self::BackfillLineItemType => "BACKFILL_LINE_ITEM_TYPE",
                Self::BackfillLineItemTypeName => "BACKFILL_LINE_ITEM_TYPE_NAME",
                Self::BackfillLineItemUnlimitedEnd => "BACKFILL_LINE_ITEM_UNLIMITED_END",
                Self::BackfillLineItemValueCostPerUnit => {
                    "BACKFILL_LINE_ITEM_VALUE_COST_PER_UNIT"
                }
                Self::BackfillLineItemWebPropertyCode => {
                    "BACKFILL_LINE_ITEM_WEB_PROPERTY_CODE"
                }
                Self::BackfillMasterCompanionCreativeId => {
                    "BACKFILL_MASTER_COMPANION_CREATIVE_ID"
                }
                Self::BackfillMasterCompanionCreativeName => {
                    "BACKFILL_MASTER_COMPANION_CREATIVE_NAME"
                }
                Self::BackfillOrderAgency => "BACKFILL_ORDER_AGENCY",
                Self::BackfillOrderAgencyId => "BACKFILL_ORDER_AGENCY_ID",
                Self::BackfillOrderBookedCpc => "BACKFILL_ORDER_BOOKED_CPC",
                Self::BackfillOrderBookedCpm => "BACKFILL_ORDER_BOOKED_CPM",
                Self::BackfillOrderDeliveryStatus => "BACKFILL_ORDER_DELIVERY_STATUS",
                Self::BackfillOrderDeliveryStatusName => {
                    "BACKFILL_ORDER_DELIVERY_STATUS_NAME"
                }
                Self::BackfillOrderEndDate => "BACKFILL_ORDER_END_DATE",
                Self::BackfillOrderEndDateTime => "BACKFILL_ORDER_END_DATE_TIME",
                Self::BackfillOrderExternalId => "BACKFILL_ORDER_EXTERNAL_ID",
                Self::BackfillOrderId => "BACKFILL_ORDER_ID",
                Self::BackfillOrderLabels => "BACKFILL_ORDER_LABELS",
                Self::BackfillOrderLabelIds => "BACKFILL_ORDER_LABEL_IDS",
                Self::BackfillOrderLifetimeClicks => "BACKFILL_ORDER_LIFETIME_CLICKS",
                Self::BackfillOrderLifetimeImpressions => {
                    "BACKFILL_ORDER_LIFETIME_IMPRESSIONS"
                }
                Self::BackfillOrderName => "BACKFILL_ORDER_NAME",
                Self::BackfillOrderPoNumber => "BACKFILL_ORDER_PO_NUMBER",
                Self::BackfillOrderProgrammatic => "BACKFILL_ORDER_PROGRAMMATIC",
                Self::BackfillOrderSalesperson => "BACKFILL_ORDER_SALESPERSON",
                Self::BackfillOrderSecondarySalespeople => {
                    "BACKFILL_ORDER_SECONDARY_SALESPEOPLE"
                }
                Self::BackfillOrderSecondarySalespeopleId => {
                    "BACKFILL_ORDER_SECONDARY_SALESPEOPLE_ID"
                }
                Self::BackfillOrderSecondaryTraffickers => {
                    "BACKFILL_ORDER_SECONDARY_TRAFFICKERS"
                }
                Self::BackfillOrderSecondaryTraffickersId => {
                    "BACKFILL_ORDER_SECONDARY_TRAFFICKERS_ID"
                }
                Self::BackfillOrderStartDate => "BACKFILL_ORDER_START_DATE",
                Self::BackfillOrderStartDateTime => "BACKFILL_ORDER_START_DATE_TIME",
                Self::BackfillOrderTrafficker => "BACKFILL_ORDER_TRAFFICKER",
                Self::BackfillOrderTraffickerId => "BACKFILL_ORDER_TRAFFICKER_ID",
                Self::BackfillOrderUnlimitedEnd => "BACKFILL_ORDER_UNLIMITED_END",
                Self::BackfillProgrammaticBuyerId => "BACKFILL_PROGRAMMATIC_BUYER_ID",
                Self::BackfillProgrammaticBuyerName => "BACKFILL_PROGRAMMATIC_BUYER_NAME",
                Self::BrandingType => "BRANDING_TYPE",
                Self::BrandingTypeName => "BRANDING_TYPE_NAME",
                Self::BrowserCategory => "BROWSER_CATEGORY",
                Self::BrowserCategoryName => "BROWSER_CATEGORY_NAME",
                Self::BrowserId => "BROWSER_ID",
                Self::BrowserName => "BROWSER_NAME",
                Self::CarrierId => "CARRIER_ID",
                Self::CarrierName => "CARRIER_NAME",
                Self::ClassifiedAdvertiserId => "CLASSIFIED_ADVERTISER_ID",
                Self::ClassifiedAdvertiserName => "CLASSIFIED_ADVERTISER_NAME",
                Self::ClassifiedBrandId => "CLASSIFIED_BRAND_ID",
                Self::ClassifiedBrandName => "CLASSIFIED_BRAND_NAME",
                Self::ContentId => "CONTENT_ID",
                Self::ContentName => "CONTENT_NAME",
                Self::CountryId => "COUNTRY_ID",
                Self::CountryName => "COUNTRY_NAME",
                Self::CreativeBillingType => "CREATIVE_BILLING_TYPE",
                Self::CreativeBillingTypeName => "CREATIVE_BILLING_TYPE_NAME",
                Self::CreativeClickThroughUrl => "CREATIVE_CLICK_THROUGH_URL",
                Self::CreativeId => "CREATIVE_ID",
                Self::CreativeName => "CREATIVE_NAME",
                Self::CreativeTechnology => "CREATIVE_TECHNOLOGY",
                Self::CreativeTechnologyName => "CREATIVE_TECHNOLOGY_NAME",
                Self::CreativeThirdPartyVendor => "CREATIVE_THIRD_PARTY_VENDOR",
                Self::CreativeType => "CREATIVE_TYPE",
                Self::CreativeTypeName => "CREATIVE_TYPE_NAME",
                Self::Date => "DATE",
                Self::DayOfWeek => "DAY_OF_WEEK",
                Self::DemandChannel => "DEMAND_CHANNEL",
                Self::DemandChannelName => "DEMAND_CHANNEL_NAME",
                Self::DemandSubchannel => "DEMAND_SUBCHANNEL",
                Self::DemandSubchannelName => "DEMAND_SUBCHANNEL_NAME",
                Self::Device => "DEVICE",
                Self::DeviceCategory => "DEVICE_CATEGORY",
                Self::DeviceCategoryName => "DEVICE_CATEGORY_NAME",
                Self::DeviceName => "DEVICE_NAME",
                Self::ExchangeThirdPartyCompanyId => "EXCHANGE_THIRD_PARTY_COMPANY_ID",
                Self::ExchangeThirdPartyCompanyName => {
                    "EXCHANGE_THIRD_PARTY_COMPANY_NAME"
                }
                Self::FirstLookPricingRuleId => "FIRST_LOOK_PRICING_RULE_ID",
                Self::FirstLookPricingRuleName => "FIRST_LOOK_PRICING_RULE_NAME",
                Self::Hour => "HOUR",
                Self::InteractionType => "INTERACTION_TYPE",
                Self::InteractionTypeName => "INTERACTION_TYPE_NAME",
                Self::InventoryFormat => "INVENTORY_FORMAT",
                Self::InventoryFormatName => "INVENTORY_FORMAT_NAME",
                Self::InventoryType => "INVENTORY_TYPE",
                Self::InventoryTypeName => "INVENTORY_TYPE_NAME",
                Self::IsAdxDirect => "IS_ADX_DIRECT",
                Self::IsFirstLookDeal => "IS_FIRST_LOOK_DEAL",
                Self::KeyValuesId => "KEY_VALUES_ID",
                Self::KeyValuesName => "KEY_VALUES_NAME",
                Self::LineItemArchived => "LINE_ITEM_ARCHIVED",
                Self::LineItemCompanionDeliveryOption => {
                    "LINE_ITEM_COMPANION_DELIVERY_OPTION"
                }
                Self::LineItemCompanionDeliveryOptionName => {
                    "LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME"
                }
                Self::LineItemComputedStatus => "LINE_ITEM_COMPUTED_STATUS",
                Self::LineItemComputedStatusName => "LINE_ITEM_COMPUTED_STATUS_NAME",
                Self::LineItemContractedQuantity => "LINE_ITEM_CONTRACTED_QUANTITY",
                Self::LineItemCostPerUnit => "LINE_ITEM_COST_PER_UNIT",
                Self::LineItemCostType => "LINE_ITEM_COST_TYPE",
                Self::LineItemCostTypeName => "LINE_ITEM_COST_TYPE_NAME",
                Self::LineItemCreativeEndDate => "LINE_ITEM_CREATIVE_END_DATE",
                Self::LineItemCreativeRotationType => "LINE_ITEM_CREATIVE_ROTATION_TYPE",
                Self::LineItemCreativeRotationTypeName => {
                    "LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME"
                }
                Self::LineItemCreativeStartDate => "LINE_ITEM_CREATIVE_START_DATE",
                Self::LineItemCurrencyCode => "LINE_ITEM_CURRENCY_CODE",
                Self::LineItemDeliveryIndicator => "LINE_ITEM_DELIVERY_INDICATOR",
                Self::LineItemDeliveryRateType => "LINE_ITEM_DELIVERY_RATE_TYPE",
                Self::LineItemDeliveryRateTypeName => "LINE_ITEM_DELIVERY_RATE_TYPE_NAME",
                Self::LineItemDiscountAbsolute => "LINE_ITEM_DISCOUNT_ABSOLUTE",
                Self::LineItemDiscountPercentage => "LINE_ITEM_DISCOUNT_PERCENTAGE",
                Self::LineItemEndDate => "LINE_ITEM_END_DATE",
                Self::LineItemEndDateTime => "LINE_ITEM_END_DATE_TIME",
                Self::LineItemEnvironmentType => "LINE_ITEM_ENVIRONMENT_TYPE",
                Self::LineItemEnvironmentTypeName => "LINE_ITEM_ENVIRONMENT_TYPE_NAME",
                Self::LineItemExternalDealId => "LINE_ITEM_EXTERNAL_DEAL_ID",
                Self::LineItemExternalId => "LINE_ITEM_EXTERNAL_ID",
                Self::LineItemFrequencyCap => "LINE_ITEM_FREQUENCY_CAP",
                Self::LineItemId => "LINE_ITEM_ID",
                Self::LineItemLastModifiedByApp => "LINE_ITEM_LAST_MODIFIED_BY_APP",
                Self::LineItemLifetimeClicks => "LINE_ITEM_LIFETIME_CLICKS",
                Self::LineItemLifetimeImpressions => "LINE_ITEM_LIFETIME_IMPRESSIONS",
                Self::LineItemLifetimeViewableImpressions => {
                    "LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS"
                }
                Self::LineItemMakegood => "LINE_ITEM_MAKEGOOD",
                Self::LineItemName => "LINE_ITEM_NAME",
                Self::LineItemNonCpdBookedRevenue => "LINE_ITEM_NON_CPD_BOOKED_REVENUE",
                Self::LineItemOptimizable => "LINE_ITEM_OPTIMIZABLE",
                Self::LineItemPrimaryGoalType => "LINE_ITEM_PRIMARY_GOAL_TYPE",
                Self::LineItemPrimaryGoalTypeName => "LINE_ITEM_PRIMARY_GOAL_TYPE_NAME",
                Self::LineItemPrimaryGoalUnitsAbsolute => {
                    "LINE_ITEM_PRIMARY_GOAL_UNITS_ABSOLUTE"
                }
                Self::LineItemPrimaryGoalUnitsPercentage => {
                    "LINE_ITEM_PRIMARY_GOAL_UNITS_PERCENTAGE"
                }
                Self::LineItemPrimaryGoalUnitType => "LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE",
                Self::LineItemPrimaryGoalUnitTypeName => {
                    "LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME"
                }
                Self::LineItemPriority => "LINE_ITEM_PRIORITY",
                Self::LineItemReservationStatus => "LINE_ITEM_RESERVATION_STATUS",
                Self::LineItemReservationStatusName => {
                    "LINE_ITEM_RESERVATION_STATUS_NAME"
                }
                Self::LineItemStartDate => "LINE_ITEM_START_DATE",
                Self::LineItemStartDateTime => "LINE_ITEM_START_DATE_TIME",
                Self::LineItemType => "LINE_ITEM_TYPE",
                Self::LineItemTypeName => "LINE_ITEM_TYPE_NAME",
                Self::LineItemUnlimitedEnd => "LINE_ITEM_UNLIMITED_END",
                Self::LineItemValueCostPerUnit => "LINE_ITEM_VALUE_COST_PER_UNIT",
                Self::LineItemWebPropertyCode => "LINE_ITEM_WEB_PROPERTY_CODE",
                Self::MasterCompanionCreativeId => "MASTER_COMPANION_CREATIVE_ID",
                Self::MasterCompanionCreativeName => "MASTER_COMPANION_CREATIVE_NAME",
                Self::MobileAppFree => "MOBILE_APP_FREE",
                Self::MobileAppIconUrl => "MOBILE_APP_ICON_URL",
                Self::MobileAppId => "MOBILE_APP_ID",
                Self::MobileAppName => "MOBILE_APP_NAME",
                Self::MobileAppOwnershipStatus => "MOBILE_APP_OWNERSHIP_STATUS",
                Self::MobileAppOwnershipStatusName => "MOBILE_APP_OWNERSHIP_STATUS_NAME",
                Self::MobileAppStore => "MOBILE_APP_STORE",
                Self::MobileAppStoreName => "MOBILE_APP_STORE_NAME",
                Self::MobileInventoryType => "MOBILE_INVENTORY_TYPE",
                Self::MobileInventoryTypeName => "MOBILE_INVENTORY_TYPE_NAME",
                Self::MobileSdkVersionName => "MOBILE_SDK_VERSION_NAME",
                Self::MonthYear => "MONTH_YEAR",
                Self::NativeAdFormatId => "NATIVE_AD_FORMAT_ID",
                Self::NativeAdFormatName => "NATIVE_AD_FORMAT_NAME",
                Self::NativeStyleId => "NATIVE_STYLE_ID",
                Self::NativeStyleName => "NATIVE_STYLE_NAME",
                Self::OperatingSystemCategory => "OPERATING_SYSTEM_CATEGORY",
                Self::OperatingSystemCategoryName => "OPERATING_SYSTEM_CATEGORY_NAME",
                Self::OperatingSystemVersionId => "OPERATING_SYSTEM_VERSION_ID",
                Self::OperatingSystemVersionName => "OPERATING_SYSTEM_VERSION_NAME",
                Self::OrderAgency => "ORDER_AGENCY",
                Self::OrderAgencyId => "ORDER_AGENCY_ID",
                Self::OrderBookedCpc => "ORDER_BOOKED_CPC",
                Self::OrderBookedCpm => "ORDER_BOOKED_CPM",
                Self::OrderDeliveryStatus => "ORDER_DELIVERY_STATUS",
                Self::OrderDeliveryStatusName => "ORDER_DELIVERY_STATUS_NAME",
                Self::OrderEndDate => "ORDER_END_DATE",
                Self::OrderEndDateTime => "ORDER_END_DATE_TIME",
                Self::OrderExternalId => "ORDER_EXTERNAL_ID",
                Self::OrderId => "ORDER_ID",
                Self::OrderLabels => "ORDER_LABELS",
                Self::OrderLabelIds => "ORDER_LABEL_IDS",
                Self::OrderLifetimeClicks => "ORDER_LIFETIME_CLICKS",
                Self::OrderLifetimeImpressions => "ORDER_LIFETIME_IMPRESSIONS",
                Self::OrderName => "ORDER_NAME",
                Self::OrderPoNumber => "ORDER_PO_NUMBER",
                Self::OrderProgrammatic => "ORDER_PROGRAMMATIC",
                Self::OrderSalesperson => "ORDER_SALESPERSON",
                Self::OrderSecondarySalespeople => "ORDER_SECONDARY_SALESPEOPLE",
                Self::OrderSecondarySalespeopleId => "ORDER_SECONDARY_SALESPEOPLE_ID",
                Self::OrderSecondaryTraffickers => "ORDER_SECONDARY_TRAFFICKERS",
                Self::OrderSecondaryTraffickersId => "ORDER_SECONDARY_TRAFFICKERS_ID",
                Self::OrderStartDate => "ORDER_START_DATE",
                Self::OrderStartDateTime => "ORDER_START_DATE_TIME",
                Self::OrderTrafficker => "ORDER_TRAFFICKER",
                Self::OrderTraffickerId => "ORDER_TRAFFICKER_ID",
                Self::OrderUnlimitedEnd => "ORDER_UNLIMITED_END",
                Self::PlacementId => "PLACEMENT_ID",
                Self::PlacementIdAll => "PLACEMENT_ID_ALL",
                Self::PlacementName => "PLACEMENT_NAME",
                Self::PlacementNameAll => "PLACEMENT_NAME_ALL",
                Self::PlacementStatus => "PLACEMENT_STATUS",
                Self::PlacementStatusAll => "PLACEMENT_STATUS_ALL",
                Self::PlacementStatusName => "PLACEMENT_STATUS_NAME",
                Self::PlacementStatusNameAll => "PLACEMENT_STATUS_NAME_ALL",
                Self::ProgrammaticBuyerId => "PROGRAMMATIC_BUYER_ID",
                Self::ProgrammaticBuyerName => "PROGRAMMATIC_BUYER_NAME",
                Self::ProgrammaticChannel => "PROGRAMMATIC_CHANNEL",
                Self::ProgrammaticChannelName => "PROGRAMMATIC_CHANNEL_NAME",
                Self::RenderedCreativeSize => "RENDERED_CREATIVE_SIZE",
                Self::RequestedAdSizes => "REQUESTED_AD_SIZES",
                Self::RequestType => "REQUEST_TYPE",
                Self::RequestTypeName => "REQUEST_TYPE_NAME",
                Self::Site => "SITE",
                Self::TargetingId => "TARGETING_ID",
                Self::TargetingName => "TARGETING_NAME",
                Self::TargetingType => "TARGETING_TYPE",
                Self::TargetingTypeName => "TARGETING_TYPE_NAME",
                Self::TrafficSource => "TRAFFIC_SOURCE",
                Self::TrafficSourceName => "TRAFFIC_SOURCE_NAME",
                Self::UnifiedPricingRuleId => "UNIFIED_PRICING_RULE_ID",
                Self::UnifiedPricingRuleName => "UNIFIED_PRICING_RULE_NAME",
                Self::VideoPlcmt => "VIDEO_PLCMT",
                Self::VideoPlcmtName => "VIDEO_PLCMT_NAME",
                Self::Week => "WEEK",
                Self::YieldGroupBuyerName => "YIELD_GROUP_BUYER_NAME",
                Self::YieldGroupId => "YIELD_GROUP_ID",
                Self::YieldGroupName => "YIELD_GROUP_NAME",
                Self::LineItemCustomField0OptionId => {
                    "LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID"
                }
                Self::LineItemCustomField1OptionId => {
                    "LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID"
                }
                Self::LineItemCustomField2OptionId => {
                    "LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID"
                }
                Self::LineItemCustomField3OptionId => {
                    "LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID"
                }
                Self::LineItemCustomField4OptionId => {
                    "LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID"
                }
                Self::LineItemCustomField5OptionId => {
                    "LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID"
                }
                Self::LineItemCustomField6OptionId => {
                    "LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID"
                }
                Self::LineItemCustomField7OptionId => {
                    "LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID"
                }
                Self::LineItemCustomField8OptionId => {
                    "LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID"
                }
                Self::LineItemCustomField9OptionId => {
                    "LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID"
                }
                Self::LineItemCustomField10OptionId => {
                    "LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID"
                }
                Self::LineItemCustomField11OptionId => {
                    "LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID"
                }
                Self::LineItemCustomField12OptionId => {
                    "LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID"
                }
                Self::LineItemCustomField13OptionId => {
                    "LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID"
                }
                Self::LineItemCustomField14OptionId => {
                    "LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID"
                }
                Self::LineItemCustomField0Value => "LINE_ITEM_CUSTOM_FIELD_0_VALUE",
                Self::LineItemCustomField1Value => "LINE_ITEM_CUSTOM_FIELD_1_VALUE",
                Self::LineItemCustomField2Value => "LINE_ITEM_CUSTOM_FIELD_2_VALUE",
                Self::LineItemCustomField3Value => "LINE_ITEM_CUSTOM_FIELD_3_VALUE",
                Self::LineItemCustomField4Value => "LINE_ITEM_CUSTOM_FIELD_4_VALUE",
                Self::LineItemCustomField5Value => "LINE_ITEM_CUSTOM_FIELD_5_VALUE",
                Self::LineItemCustomField6Value => "LINE_ITEM_CUSTOM_FIELD_6_VALUE",
                Self::LineItemCustomField7Value => "LINE_ITEM_CUSTOM_FIELD_7_VALUE",
                Self::LineItemCustomField8Value => "LINE_ITEM_CUSTOM_FIELD_8_VALUE",
                Self::LineItemCustomField9Value => "LINE_ITEM_CUSTOM_FIELD_9_VALUE",
                Self::LineItemCustomField10Value => "LINE_ITEM_CUSTOM_FIELD_10_VALUE",
                Self::LineItemCustomField11Value => "LINE_ITEM_CUSTOM_FIELD_11_VALUE",
                Self::LineItemCustomField12Value => "LINE_ITEM_CUSTOM_FIELD_12_VALUE",
                Self::LineItemCustomField13Value => "LINE_ITEM_CUSTOM_FIELD_13_VALUE",
                Self::LineItemCustomField14Value => "LINE_ITEM_CUSTOM_FIELD_14_VALUE",
                Self::OrderCustomField0OptionId => "ORDER_CUSTOM_FIELD_0_OPTION_ID",
                Self::OrderCustomField1OptionId => "ORDER_CUSTOM_FIELD_1_OPTION_ID",
                Self::OrderCustomField2OptionId => "ORDER_CUSTOM_FIELD_2_OPTION_ID",
                Self::OrderCustomField3OptionId => "ORDER_CUSTOM_FIELD_3_OPTION_ID",
                Self::OrderCustomField4OptionId => "ORDER_CUSTOM_FIELD_4_OPTION_ID",
                Self::OrderCustomField5OptionId => "ORDER_CUSTOM_FIELD_5_OPTION_ID",
                Self::OrderCustomField6OptionId => "ORDER_CUSTOM_FIELD_6_OPTION_ID",
                Self::OrderCustomField7OptionId => "ORDER_CUSTOM_FIELD_7_OPTION_ID",
                Self::OrderCustomField8OptionId => "ORDER_CUSTOM_FIELD_8_OPTION_ID",
                Self::OrderCustomField9OptionId => "ORDER_CUSTOM_FIELD_9_OPTION_ID",
                Self::OrderCustomField10OptionId => "ORDER_CUSTOM_FIELD_10_OPTION_ID",
                Self::OrderCustomField11OptionId => "ORDER_CUSTOM_FIELD_11_OPTION_ID",
                Self::OrderCustomField12OptionId => "ORDER_CUSTOM_FIELD_12_OPTION_ID",
                Self::OrderCustomField13OptionId => "ORDER_CUSTOM_FIELD_13_OPTION_ID",
                Self::OrderCustomField14OptionId => "ORDER_CUSTOM_FIELD_14_OPTION_ID",
                Self::OrderCustomField0Value => "ORDER_CUSTOM_FIELD_0_VALUE",
                Self::OrderCustomField1Value => "ORDER_CUSTOM_FIELD_1_VALUE",
                Self::OrderCustomField2Value => "ORDER_CUSTOM_FIELD_2_VALUE",
                Self::OrderCustomField3Value => "ORDER_CUSTOM_FIELD_3_VALUE",
                Self::OrderCustomField4Value => "ORDER_CUSTOM_FIELD_4_VALUE",
                Self::OrderCustomField5Value => "ORDER_CUSTOM_FIELD_5_VALUE",
                Self::OrderCustomField6Value => "ORDER_CUSTOM_FIELD_6_VALUE",
                Self::OrderCustomField7Value => "ORDER_CUSTOM_FIELD_7_VALUE",
                Self::OrderCustomField8Value => "ORDER_CUSTOM_FIELD_8_VALUE",
                Self::OrderCustomField9Value => "ORDER_CUSTOM_FIELD_9_VALUE",
                Self::OrderCustomField10Value => "ORDER_CUSTOM_FIELD_10_VALUE",
                Self::OrderCustomField11Value => "ORDER_CUSTOM_FIELD_11_VALUE",
                Self::OrderCustomField12Value => "ORDER_CUSTOM_FIELD_12_VALUE",
                Self::OrderCustomField13Value => "ORDER_CUSTOM_FIELD_13_VALUE",
                Self::OrderCustomField14Value => "ORDER_CUSTOM_FIELD_14_VALUE",
                Self::CreativeCustomField0OptionId => "CREATIVE_CUSTOM_FIELD_0_OPTION_ID",
                Self::CreativeCustomField1OptionId => "CREATIVE_CUSTOM_FIELD_1_OPTION_ID",
                Self::CreativeCustomField2OptionId => "CREATIVE_CUSTOM_FIELD_2_OPTION_ID",
                Self::CreativeCustomField3OptionId => "CREATIVE_CUSTOM_FIELD_3_OPTION_ID",
                Self::CreativeCustomField4OptionId => "CREATIVE_CUSTOM_FIELD_4_OPTION_ID",
                Self::CreativeCustomField5OptionId => "CREATIVE_CUSTOM_FIELD_5_OPTION_ID",
                Self::CreativeCustomField6OptionId => "CREATIVE_CUSTOM_FIELD_6_OPTION_ID",
                Self::CreativeCustomField7OptionId => "CREATIVE_CUSTOM_FIELD_7_OPTION_ID",
                Self::CreativeCustomField8OptionId => "CREATIVE_CUSTOM_FIELD_8_OPTION_ID",
                Self::CreativeCustomField9OptionId => "CREATIVE_CUSTOM_FIELD_9_OPTION_ID",
                Self::CreativeCustomField10OptionId => {
                    "CREATIVE_CUSTOM_FIELD_10_OPTION_ID"
                }
                Self::CreativeCustomField11OptionId => {
                    "CREATIVE_CUSTOM_FIELD_11_OPTION_ID"
                }
                Self::CreativeCustomField12OptionId => {
                    "CREATIVE_CUSTOM_FIELD_12_OPTION_ID"
                }
                Self::CreativeCustomField13OptionId => {
                    "CREATIVE_CUSTOM_FIELD_13_OPTION_ID"
                }
                Self::CreativeCustomField14OptionId => {
                    "CREATIVE_CUSTOM_FIELD_14_OPTION_ID"
                }
                Self::CreativeCustomField0Value => "CREATIVE_CUSTOM_FIELD_0_VALUE",
                Self::CreativeCustomField1Value => "CREATIVE_CUSTOM_FIELD_1_VALUE",
                Self::CreativeCustomField2Value => "CREATIVE_CUSTOM_FIELD_2_VALUE",
                Self::CreativeCustomField3Value => "CREATIVE_CUSTOM_FIELD_3_VALUE",
                Self::CreativeCustomField4Value => "CREATIVE_CUSTOM_FIELD_4_VALUE",
                Self::CreativeCustomField5Value => "CREATIVE_CUSTOM_FIELD_5_VALUE",
                Self::CreativeCustomField6Value => "CREATIVE_CUSTOM_FIELD_6_VALUE",
                Self::CreativeCustomField7Value => "CREATIVE_CUSTOM_FIELD_7_VALUE",
                Self::CreativeCustomField8Value => "CREATIVE_CUSTOM_FIELD_8_VALUE",
                Self::CreativeCustomField9Value => "CREATIVE_CUSTOM_FIELD_9_VALUE",
                Self::CreativeCustomField10Value => "CREATIVE_CUSTOM_FIELD_10_VALUE",
                Self::CreativeCustomField11Value => "CREATIVE_CUSTOM_FIELD_11_VALUE",
                Self::CreativeCustomField12Value => "CREATIVE_CUSTOM_FIELD_12_VALUE",
                Self::CreativeCustomField13Value => "CREATIVE_CUSTOM_FIELD_13_VALUE",
                Self::CreativeCustomField14Value => "CREATIVE_CUSTOM_FIELD_14_VALUE",
                Self::BackfillLineItemCustomField0OptionId => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID"
                }
                Self::BackfillLineItemCustomField1OptionId => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID"
                }
                Self::BackfillLineItemCustomField2OptionId => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID"
                }
                Self::BackfillLineItemCustomField3OptionId => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID"
                }
                Self::BackfillLineItemCustomField4OptionId => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID"
                }
                Self::BackfillLineItemCustomField5OptionId => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID"
                }
                Self::BackfillLineItemCustomField6OptionId => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID"
                }
                Self::BackfillLineItemCustomField7OptionId => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID"
                }
                Self::BackfillLineItemCustomField8OptionId => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID"
                }
                Self::BackfillLineItemCustomField9OptionId => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID"
                }
                Self::BackfillLineItemCustomField10OptionId => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID"
                }
                Self::BackfillLineItemCustomField11OptionId => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID"
                }
                Self::BackfillLineItemCustomField12OptionId => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID"
                }
                Self::BackfillLineItemCustomField13OptionId => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID"
                }
                Self::BackfillLineItemCustomField14OptionId => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID"
                }
                Self::BackfillLineItemCustomField0Value => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_VALUE"
                }
                Self::BackfillLineItemCustomField1Value => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_VALUE"
                }
                Self::BackfillLineItemCustomField2Value => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_VALUE"
                }
                Self::BackfillLineItemCustomField3Value => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_VALUE"
                }
                Self::BackfillLineItemCustomField4Value => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_VALUE"
                }
                Self::BackfillLineItemCustomField5Value => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_VALUE"
                }
                Self::BackfillLineItemCustomField6Value => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_VALUE"
                }
                Self::BackfillLineItemCustomField7Value => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_VALUE"
                }
                Self::BackfillLineItemCustomField8Value => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_VALUE"
                }
                Self::BackfillLineItemCustomField9Value => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_VALUE"
                }
                Self::BackfillLineItemCustomField10Value => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_VALUE"
                }
                Self::BackfillLineItemCustomField11Value => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_VALUE"
                }
                Self::BackfillLineItemCustomField12Value => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_VALUE"
                }
                Self::BackfillLineItemCustomField13Value => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_VALUE"
                }
                Self::BackfillLineItemCustomField14Value => {
                    "BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_VALUE"
                }
                Self::BackfillOrderCustomField0OptionId => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_0_OPTION_ID"
                }
                Self::BackfillOrderCustomField1OptionId => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_1_OPTION_ID"
                }
                Self::BackfillOrderCustomField2OptionId => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_2_OPTION_ID"
                }
                Self::BackfillOrderCustomField3OptionId => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_3_OPTION_ID"
                }
                Self::BackfillOrderCustomField4OptionId => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_4_OPTION_ID"
                }
                Self::BackfillOrderCustomField5OptionId => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_5_OPTION_ID"
                }
                Self::BackfillOrderCustomField6OptionId => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_6_OPTION_ID"
                }
                Self::BackfillOrderCustomField7OptionId => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_7_OPTION_ID"
                }
                Self::BackfillOrderCustomField8OptionId => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_8_OPTION_ID"
                }
                Self::BackfillOrderCustomField9OptionId => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_9_OPTION_ID"
                }
                Self::BackfillOrderCustomField10OptionId => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_10_OPTION_ID"
                }
                Self::BackfillOrderCustomField11OptionId => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_11_OPTION_ID"
                }
                Self::BackfillOrderCustomField12OptionId => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_12_OPTION_ID"
                }
                Self::BackfillOrderCustomField13OptionId => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_13_OPTION_ID"
                }
                Self::BackfillOrderCustomField14OptionId => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_14_OPTION_ID"
                }
                Self::BackfillOrderCustomField0Value => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_0_VALUE"
                }
                Self::BackfillOrderCustomField1Value => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_1_VALUE"
                }
                Self::BackfillOrderCustomField2Value => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_2_VALUE"
                }
                Self::BackfillOrderCustomField3Value => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_3_VALUE"
                }
                Self::BackfillOrderCustomField4Value => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_4_VALUE"
                }
                Self::BackfillOrderCustomField5Value => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_5_VALUE"
                }
                Self::BackfillOrderCustomField6Value => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_6_VALUE"
                }
                Self::BackfillOrderCustomField7Value => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_7_VALUE"
                }
                Self::BackfillOrderCustomField8Value => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_8_VALUE"
                }
                Self::BackfillOrderCustomField9Value => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_9_VALUE"
                }
                Self::BackfillOrderCustomField10Value => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_10_VALUE"
                }
                Self::BackfillOrderCustomField11Value => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_11_VALUE"
                }
                Self::BackfillOrderCustomField12Value => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_12_VALUE"
                }
                Self::BackfillOrderCustomField13Value => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_13_VALUE"
                }
                Self::BackfillOrderCustomField14Value => {
                    "BACKFILL_ORDER_CUSTOM_FIELD_14_VALUE"
                }
                Self::BackfillCreativeCustomField0OptionId => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_0_OPTION_ID"
                }
                Self::BackfillCreativeCustomField1OptionId => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_1_OPTION_ID"
                }
                Self::BackfillCreativeCustomField2OptionId => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_2_OPTION_ID"
                }
                Self::BackfillCreativeCustomField3OptionId => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_3_OPTION_ID"
                }
                Self::BackfillCreativeCustomField4OptionId => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_4_OPTION_ID"
                }
                Self::BackfillCreativeCustomField5OptionId => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_5_OPTION_ID"
                }
                Self::BackfillCreativeCustomField6OptionId => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_6_OPTION_ID"
                }
                Self::BackfillCreativeCustomField7OptionId => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_7_OPTION_ID"
                }
                Self::BackfillCreativeCustomField8OptionId => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_8_OPTION_ID"
                }
                Self::BackfillCreativeCustomField9OptionId => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_9_OPTION_ID"
                }
                Self::BackfillCreativeCustomField10OptionId => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_10_OPTION_ID"
                }
                Self::BackfillCreativeCustomField11OptionId => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_11_OPTION_ID"
                }
                Self::BackfillCreativeCustomField12OptionId => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_12_OPTION_ID"
                }
                Self::BackfillCreativeCustomField13OptionId => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_13_OPTION_ID"
                }
                Self::BackfillCreativeCustomField14OptionId => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_14_OPTION_ID"
                }
                Self::BackfillCreativeCustomField0Value => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_0_VALUE"
                }
                Self::BackfillCreativeCustomField1Value => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_1_VALUE"
                }
                Self::BackfillCreativeCustomField2Value => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_2_VALUE"
                }
                Self::BackfillCreativeCustomField3Value => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_3_VALUE"
                }
                Self::BackfillCreativeCustomField4Value => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_4_VALUE"
                }
                Self::BackfillCreativeCustomField5Value => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_5_VALUE"
                }
                Self::BackfillCreativeCustomField6Value => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_6_VALUE"
                }
                Self::BackfillCreativeCustomField7Value => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_7_VALUE"
                }
                Self::BackfillCreativeCustomField8Value => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_8_VALUE"
                }
                Self::BackfillCreativeCustomField9Value => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_9_VALUE"
                }
                Self::BackfillCreativeCustomField10Value => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_10_VALUE"
                }
                Self::BackfillCreativeCustomField11Value => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_11_VALUE"
                }
                Self::BackfillCreativeCustomField12Value => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_12_VALUE"
                }
                Self::BackfillCreativeCustomField13Value => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_13_VALUE"
                }
                Self::BackfillCreativeCustomField14Value => {
                    "BACKFILL_CREATIVE_CUSTOM_FIELD_14_VALUE"
                }
                Self::CustomDimension0ValueId => "CUSTOM_DIMENSION_0_VALUE_ID",
                Self::CustomDimension1ValueId => "CUSTOM_DIMENSION_1_VALUE_ID",
                Self::CustomDimension2ValueId => "CUSTOM_DIMENSION_2_VALUE_ID",
                Self::CustomDimension3ValueId => "CUSTOM_DIMENSION_3_VALUE_ID",
                Self::CustomDimension4ValueId => "CUSTOM_DIMENSION_4_VALUE_ID",
                Self::CustomDimension5ValueId => "CUSTOM_DIMENSION_5_VALUE_ID",
                Self::CustomDimension6ValueId => "CUSTOM_DIMENSION_6_VALUE_ID",
                Self::CustomDimension7ValueId => "CUSTOM_DIMENSION_7_VALUE_ID",
                Self::CustomDimension8ValueId => "CUSTOM_DIMENSION_8_VALUE_ID",
                Self::CustomDimension9ValueId => "CUSTOM_DIMENSION_9_VALUE_ID",
                Self::CustomDimension0Value => "CUSTOM_DIMENSION_0_VALUE",
                Self::CustomDimension1Value => "CUSTOM_DIMENSION_1_VALUE",
                Self::CustomDimension2Value => "CUSTOM_DIMENSION_2_VALUE",
                Self::CustomDimension3Value => "CUSTOM_DIMENSION_3_VALUE",
                Self::CustomDimension4Value => "CUSTOM_DIMENSION_4_VALUE",
                Self::CustomDimension5Value => "CUSTOM_DIMENSION_5_VALUE",
                Self::CustomDimension6Value => "CUSTOM_DIMENSION_6_VALUE",
                Self::CustomDimension7Value => "CUSTOM_DIMENSION_7_VALUE",
                Self::CustomDimension8Value => "CUSTOM_DIMENSION_8_VALUE",
                Self::CustomDimension9Value => "CUSTOM_DIMENSION_9_VALUE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "DIMENSION_UNSPECIFIED" => Some(Self::Unspecified),
                "ADVERTISER_DOMAIN_NAME" => Some(Self::AdvertiserDomainName),
                "ADVERTISER_EXTERNAL_ID" => Some(Self::AdvertiserExternalId),
                "ADVERTISER_ID" => Some(Self::AdvertiserId),
                "ADVERTISER_LABELS" => Some(Self::AdvertiserLabels),
                "ADVERTISER_LABEL_IDS" => Some(Self::AdvertiserLabelIds),
                "ADVERTISER_NAME" => Some(Self::AdvertiserName),
                "ADVERTISER_PRIMARY_CONTACT" => Some(Self::AdvertiserPrimaryContact),
                "AD_LOCATION" => Some(Self::AdLocation),
                "AD_LOCATION_NAME" => Some(Self::AdLocationName),
                "AD_UNIT_CODE" => Some(Self::AdUnitCode),
                "AD_UNIT_CODE_LEVEL_1" => Some(Self::AdUnitCodeLevel1),
                "AD_UNIT_CODE_LEVEL_10" => Some(Self::AdUnitCodeLevel10),
                "AD_UNIT_CODE_LEVEL_11" => Some(Self::AdUnitCodeLevel11),
                "AD_UNIT_CODE_LEVEL_12" => Some(Self::AdUnitCodeLevel12),
                "AD_UNIT_CODE_LEVEL_13" => Some(Self::AdUnitCodeLevel13),
                "AD_UNIT_CODE_LEVEL_14" => Some(Self::AdUnitCodeLevel14),
                "AD_UNIT_CODE_LEVEL_15" => Some(Self::AdUnitCodeLevel15),
                "AD_UNIT_CODE_LEVEL_16" => Some(Self::AdUnitCodeLevel16),
                "AD_UNIT_CODE_LEVEL_2" => Some(Self::AdUnitCodeLevel2),
                "AD_UNIT_CODE_LEVEL_3" => Some(Self::AdUnitCodeLevel3),
                "AD_UNIT_CODE_LEVEL_4" => Some(Self::AdUnitCodeLevel4),
                "AD_UNIT_CODE_LEVEL_5" => Some(Self::AdUnitCodeLevel5),
                "AD_UNIT_CODE_LEVEL_6" => Some(Self::AdUnitCodeLevel6),
                "AD_UNIT_CODE_LEVEL_7" => Some(Self::AdUnitCodeLevel7),
                "AD_UNIT_CODE_LEVEL_8" => Some(Self::AdUnitCodeLevel8),
                "AD_UNIT_CODE_LEVEL_9" => Some(Self::AdUnitCodeLevel9),
                "AD_UNIT_DEPTH" => Some(Self::AdUnitDepth),
                "AD_UNIT_ID" => Some(Self::AdUnitId),
                "AD_UNIT_ID_ALL_LEVEL" => Some(Self::AdUnitIdAllLevel),
                "AD_UNIT_ID_LEVEL_1" => Some(Self::AdUnitIdLevel1),
                "AD_UNIT_ID_LEVEL_10" => Some(Self::AdUnitIdLevel10),
                "AD_UNIT_ID_LEVEL_11" => Some(Self::AdUnitIdLevel11),
                "AD_UNIT_ID_LEVEL_12" => Some(Self::AdUnitIdLevel12),
                "AD_UNIT_ID_LEVEL_13" => Some(Self::AdUnitIdLevel13),
                "AD_UNIT_ID_LEVEL_14" => Some(Self::AdUnitIdLevel14),
                "AD_UNIT_ID_LEVEL_15" => Some(Self::AdUnitIdLevel15),
                "AD_UNIT_ID_LEVEL_16" => Some(Self::AdUnitIdLevel16),
                "AD_UNIT_ID_LEVEL_2" => Some(Self::AdUnitIdLevel2),
                "AD_UNIT_ID_LEVEL_3" => Some(Self::AdUnitIdLevel3),
                "AD_UNIT_ID_LEVEL_4" => Some(Self::AdUnitIdLevel4),
                "AD_UNIT_ID_LEVEL_5" => Some(Self::AdUnitIdLevel5),
                "AD_UNIT_ID_LEVEL_6" => Some(Self::AdUnitIdLevel6),
                "AD_UNIT_ID_LEVEL_7" => Some(Self::AdUnitIdLevel7),
                "AD_UNIT_ID_LEVEL_8" => Some(Self::AdUnitIdLevel8),
                "AD_UNIT_ID_LEVEL_9" => Some(Self::AdUnitIdLevel9),
                "AD_UNIT_ID_TOP_LEVEL" => Some(Self::AdUnitIdTopLevel),
                "AD_UNIT_NAME" => Some(Self::AdUnitName),
                "AD_UNIT_NAME_ALL_LEVEL" => Some(Self::AdUnitNameAllLevel),
                "AD_UNIT_NAME_LEVEL_1" => Some(Self::AdUnitNameLevel1),
                "AD_UNIT_NAME_LEVEL_10" => Some(Self::AdUnitNameLevel10),
                "AD_UNIT_NAME_LEVEL_11" => Some(Self::AdUnitNameLevel11),
                "AD_UNIT_NAME_LEVEL_12" => Some(Self::AdUnitNameLevel12),
                "AD_UNIT_NAME_LEVEL_13" => Some(Self::AdUnitNameLevel13),
                "AD_UNIT_NAME_LEVEL_14" => Some(Self::AdUnitNameLevel14),
                "AD_UNIT_NAME_LEVEL_15" => Some(Self::AdUnitNameLevel15),
                "AD_UNIT_NAME_LEVEL_16" => Some(Self::AdUnitNameLevel16),
                "AD_UNIT_NAME_LEVEL_2" => Some(Self::AdUnitNameLevel2),
                "AD_UNIT_NAME_LEVEL_3" => Some(Self::AdUnitNameLevel3),
                "AD_UNIT_NAME_LEVEL_4" => Some(Self::AdUnitNameLevel4),
                "AD_UNIT_NAME_LEVEL_5" => Some(Self::AdUnitNameLevel5),
                "AD_UNIT_NAME_LEVEL_6" => Some(Self::AdUnitNameLevel6),
                "AD_UNIT_NAME_LEVEL_7" => Some(Self::AdUnitNameLevel7),
                "AD_UNIT_NAME_LEVEL_8" => Some(Self::AdUnitNameLevel8),
                "AD_UNIT_NAME_LEVEL_9" => Some(Self::AdUnitNameLevel9),
                "AD_UNIT_NAME_TOP_LEVEL" => Some(Self::AdUnitNameTopLevel),
                "AD_UNIT_REWARD_AMOUNT" => Some(Self::AdUnitRewardAmount),
                "AD_UNIT_REWARD_TYPE" => Some(Self::AdUnitRewardType),
                "AD_UNIT_STATUS" => Some(Self::AdUnitStatus),
                "AD_UNIT_STATUS_NAME" => Some(Self::AdUnitStatusName),
                "APP_VERSION" => Some(Self::AppVersion),
                "BACKFILL_ADVERTISER_EXTERNAL_ID" => {
                    Some(Self::BackfillAdvertiserExternalId)
                }
                "BACKFILL_ADVERTISER_ID" => Some(Self::BackfillAdvertiserId),
                "BACKFILL_ADVERTISER_LABELS" => Some(Self::BackfillAdvertiserLabels),
                "BACKFILL_ADVERTISER_LABEL_IDS" => Some(Self::BackfillAdvertiserLabelIds),
                "BACKFILL_ADVERTISER_NAME" => Some(Self::BackfillAdvertiserName),
                "BACKFILL_ADVERTISER_PRIMARY_CONTACT" => {
                    Some(Self::BackfillAdvertiserPrimaryContact)
                }
                "BACKFILL_CREATIVE_BILLING_TYPE" => {
                    Some(Self::BackfillCreativeBillingType)
                }
                "BACKFILL_CREATIVE_BILLING_TYPE_NAME" => {
                    Some(Self::BackfillCreativeBillingTypeName)
                }
                "BACKFILL_CREATIVE_CLICK_THROUGH_URL" => {
                    Some(Self::BackfillCreativeClickThroughUrl)
                }
                "BACKFILL_CREATIVE_ID" => Some(Self::BackfillCreativeId),
                "BACKFILL_CREATIVE_NAME" => Some(Self::BackfillCreativeName),
                "BACKFILL_CREATIVE_THIRD_PARTY_VENDOR" => {
                    Some(Self::BackfillCreativeThirdPartyVendor)
                }
                "BACKFILL_CREATIVE_TYPE" => Some(Self::BackfillCreativeType),
                "BACKFILL_CREATIVE_TYPE_NAME" => Some(Self::BackfillCreativeTypeName),
                "BACKFILL_LINE_ITEM_ARCHIVED" => Some(Self::BackfillLineItemArchived),
                "BACKFILL_LINE_ITEM_COMPANION_DELIVERY_OPTION" => {
                    Some(Self::BackfillLineItemCompanionDeliveryOption)
                }
                "BACKFILL_LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME" => {
                    Some(Self::BackfillLineItemCompanionDeliveryOptionName)
                }
                "BACKFILL_LINE_ITEM_COMPUTED_STATUS" => {
                    Some(Self::BackfillLineItemComputedStatus)
                }
                "BACKFILL_LINE_ITEM_COMPUTED_STATUS_NAME" => {
                    Some(Self::BackfillLineItemComputedStatusName)
                }
                "BACKFILL_LINE_ITEM_CONTRACTED_QUANTITY" => {
                    Some(Self::BackfillLineItemContractedQuantity)
                }
                "BACKFILL_LINE_ITEM_COST_PER_UNIT" => {
                    Some(Self::BackfillLineItemCostPerUnit)
                }
                "BACKFILL_LINE_ITEM_COST_TYPE" => Some(Self::BackfillLineItemCostType),
                "BACKFILL_LINE_ITEM_COST_TYPE_NAME" => {
                    Some(Self::BackfillLineItemCostTypeName)
                }
                "BACKFILL_LINE_ITEM_CREATIVE_END_DATE" => {
                    Some(Self::BackfillLineItemCreativeEndDate)
                }
                "BACKFILL_LINE_ITEM_CREATIVE_ROTATION_TYPE" => {
                    Some(Self::BackfillLineItemCreativeRotationType)
                }
                "BACKFILL_LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME" => {
                    Some(Self::BackfillLineItemCreativeRotationTypeName)
                }
                "BACKFILL_LINE_ITEM_CREATIVE_START_DATE" => {
                    Some(Self::BackfillLineItemCreativeStartDate)
                }
                "BACKFILL_LINE_ITEM_CURRENCY_CODE" => {
                    Some(Self::BackfillLineItemCurrencyCode)
                }
                "BACKFILL_LINE_ITEM_DELIVERY_INDICATOR" => {
                    Some(Self::BackfillLineItemDeliveryIndicator)
                }
                "BACKFILL_LINE_ITEM_DELIVERY_RATE_TYPE" => {
                    Some(Self::BackfillLineItemDeliveryRateType)
                }
                "BACKFILL_LINE_ITEM_DELIVERY_RATE_TYPE_NAME" => {
                    Some(Self::BackfillLineItemDeliveryRateTypeName)
                }
                "BACKFILL_LINE_ITEM_DISCOUNT_ABSOLUTE" => {
                    Some(Self::BackfillLineItemDiscountAbsolute)
                }
                "BACKFILL_LINE_ITEM_DISCOUNT_PERCENTAGE" => {
                    Some(Self::BackfillLineItemDiscountPercentage)
                }
                "BACKFILL_LINE_ITEM_END_DATE" => Some(Self::BackfillLineItemEndDate),
                "BACKFILL_LINE_ITEM_END_DATE_TIME" => {
                    Some(Self::BackfillLineItemEndDateTime)
                }
                "BACKFILL_LINE_ITEM_ENVIRONMENT_TYPE" => {
                    Some(Self::BackfillLineItemEnvironmentType)
                }
                "BACKFILL_LINE_ITEM_ENVIRONMENT_TYPE_NAME" => {
                    Some(Self::BackfillLineItemEnvironmentTypeName)
                }
                "BACKFILL_LINE_ITEM_EXTERNAL_DEAL_ID" => {
                    Some(Self::BackfillLineItemExternalDealId)
                }
                "BACKFILL_LINE_ITEM_EXTERNAL_ID" => {
                    Some(Self::BackfillLineItemExternalId)
                }
                "BACKFILL_LINE_ITEM_FREQUENCY_CAP" => {
                    Some(Self::BackfillLineItemFrequencyCap)
                }
                "BACKFILL_LINE_ITEM_ID" => Some(Self::BackfillLineItemId),
                "BACKFILL_LINE_ITEM_LAST_MODIFIED_BY_APP" => {
                    Some(Self::BackfillLineItemLastModifiedByApp)
                }
                "BACKFILL_LINE_ITEM_LIFETIME_CLICKS" => {
                    Some(Self::BackfillLineItemLifetimeClicks)
                }
                "BACKFILL_LINE_ITEM_LIFETIME_IMPRESSIONS" => {
                    Some(Self::BackfillLineItemLifetimeImpressions)
                }
                "BACKFILL_LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS" => {
                    Some(Self::BackfillLineItemLifetimeViewableImpressions)
                }
                "BACKFILL_LINE_ITEM_MAKEGOOD" => Some(Self::BackfillLineItemMakegood),
                "BACKFILL_LINE_ITEM_NAME" => Some(Self::BackfillLineItemName),
                "BACKFILL_LINE_ITEM_NON_CPD_BOOKED_REVENUE" => {
                    Some(Self::BackfillLineItemNonCpdBookedRevenue)
                }
                "BACKFILL_LINE_ITEM_OPTIMIZABLE" => {
                    Some(Self::BackfillLineItemOptimizable)
                }
                "BACKFILL_LINE_ITEM_PRIMARY_GOAL_TYPE" => {
                    Some(Self::BackfillLineItemPrimaryGoalType)
                }
                "BACKFILL_LINE_ITEM_PRIMARY_GOAL_TYPE_NAME" => {
                    Some(Self::BackfillLineItemPrimaryGoalTypeName)
                }
                "BACKFILL_LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE" => {
                    Some(Self::BackfillLineItemPrimaryGoalUnitType)
                }
                "BACKFILL_LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME" => {
                    Some(Self::BackfillLineItemPrimaryGoalUnitTypeName)
                }
                "BACKFILL_LINE_ITEM_PRIORITY" => Some(Self::BackfillLineItemPriority),
                "BACKFILL_LINE_ITEM_RESERVATION_STATUS" => {
                    Some(Self::BackfillLineItemReservationStatus)
                }
                "BACKFILL_LINE_ITEM_RESERVATION_STATUS_NAME" => {
                    Some(Self::BackfillLineItemReservationStatusName)
                }
                "BACKFILL_LINE_ITEM_START_DATE" => Some(Self::BackfillLineItemStartDate),
                "BACKFILL_LINE_ITEM_START_DATE_TIME" => {
                    Some(Self::BackfillLineItemStartDateTime)
                }
                "BACKFILL_LINE_ITEM_TYPE" => Some(Self::BackfillLineItemType),
                "BACKFILL_LINE_ITEM_TYPE_NAME" => Some(Self::BackfillLineItemTypeName),
                "BACKFILL_LINE_ITEM_UNLIMITED_END" => {
                    Some(Self::BackfillLineItemUnlimitedEnd)
                }
                "BACKFILL_LINE_ITEM_VALUE_COST_PER_UNIT" => {
                    Some(Self::BackfillLineItemValueCostPerUnit)
                }
                "BACKFILL_LINE_ITEM_WEB_PROPERTY_CODE" => {
                    Some(Self::BackfillLineItemWebPropertyCode)
                }
                "BACKFILL_MASTER_COMPANION_CREATIVE_ID" => {
                    Some(Self::BackfillMasterCompanionCreativeId)
                }
                "BACKFILL_MASTER_COMPANION_CREATIVE_NAME" => {
                    Some(Self::BackfillMasterCompanionCreativeName)
                }
                "BACKFILL_ORDER_AGENCY" => Some(Self::BackfillOrderAgency),
                "BACKFILL_ORDER_AGENCY_ID" => Some(Self::BackfillOrderAgencyId),
                "BACKFILL_ORDER_BOOKED_CPC" => Some(Self::BackfillOrderBookedCpc),
                "BACKFILL_ORDER_BOOKED_CPM" => Some(Self::BackfillOrderBookedCpm),
                "BACKFILL_ORDER_DELIVERY_STATUS" => {
                    Some(Self::BackfillOrderDeliveryStatus)
                }
                "BACKFILL_ORDER_DELIVERY_STATUS_NAME" => {
                    Some(Self::BackfillOrderDeliveryStatusName)
                }
                "BACKFILL_ORDER_END_DATE" => Some(Self::BackfillOrderEndDate),
                "BACKFILL_ORDER_END_DATE_TIME" => Some(Self::BackfillOrderEndDateTime),
                "BACKFILL_ORDER_EXTERNAL_ID" => Some(Self::BackfillOrderExternalId),
                "BACKFILL_ORDER_ID" => Some(Self::BackfillOrderId),
                "BACKFILL_ORDER_LABELS" => Some(Self::BackfillOrderLabels),
                "BACKFILL_ORDER_LABEL_IDS" => Some(Self::BackfillOrderLabelIds),
                "BACKFILL_ORDER_LIFETIME_CLICKS" => {
                    Some(Self::BackfillOrderLifetimeClicks)
                }
                "BACKFILL_ORDER_LIFETIME_IMPRESSIONS" => {
                    Some(Self::BackfillOrderLifetimeImpressions)
                }
                "BACKFILL_ORDER_NAME" => Some(Self::BackfillOrderName),
                "BACKFILL_ORDER_PO_NUMBER" => Some(Self::BackfillOrderPoNumber),
                "BACKFILL_ORDER_PROGRAMMATIC" => Some(Self::BackfillOrderProgrammatic),
                "BACKFILL_ORDER_SALESPERSON" => Some(Self::BackfillOrderSalesperson),
                "BACKFILL_ORDER_SECONDARY_SALESPEOPLE" => {
                    Some(Self::BackfillOrderSecondarySalespeople)
                }
                "BACKFILL_ORDER_SECONDARY_SALESPEOPLE_ID" => {
                    Some(Self::BackfillOrderSecondarySalespeopleId)
                }
                "BACKFILL_ORDER_SECONDARY_TRAFFICKERS" => {
                    Some(Self::BackfillOrderSecondaryTraffickers)
                }
                "BACKFILL_ORDER_SECONDARY_TRAFFICKERS_ID" => {
                    Some(Self::BackfillOrderSecondaryTraffickersId)
                }
                "BACKFILL_ORDER_START_DATE" => Some(Self::BackfillOrderStartDate),
                "BACKFILL_ORDER_START_DATE_TIME" => {
                    Some(Self::BackfillOrderStartDateTime)
                }
                "BACKFILL_ORDER_TRAFFICKER" => Some(Self::BackfillOrderTrafficker),
                "BACKFILL_ORDER_TRAFFICKER_ID" => Some(Self::BackfillOrderTraffickerId),
                "BACKFILL_ORDER_UNLIMITED_END" => Some(Self::BackfillOrderUnlimitedEnd),
                "BACKFILL_PROGRAMMATIC_BUYER_ID" => {
                    Some(Self::BackfillProgrammaticBuyerId)
                }
                "BACKFILL_PROGRAMMATIC_BUYER_NAME" => {
                    Some(Self::BackfillProgrammaticBuyerName)
                }
                "BRANDING_TYPE" => Some(Self::BrandingType),
                "BRANDING_TYPE_NAME" => Some(Self::BrandingTypeName),
                "BROWSER_CATEGORY" => Some(Self::BrowserCategory),
                "BROWSER_CATEGORY_NAME" => Some(Self::BrowserCategoryName),
                "BROWSER_ID" => Some(Self::BrowserId),
                "BROWSER_NAME" => Some(Self::BrowserName),
                "CARRIER_ID" => Some(Self::CarrierId),
                "CARRIER_NAME" => Some(Self::CarrierName),
                "CLASSIFIED_ADVERTISER_ID" => Some(Self::ClassifiedAdvertiserId),
                "CLASSIFIED_ADVERTISER_NAME" => Some(Self::ClassifiedAdvertiserName),
                "CLASSIFIED_BRAND_ID" => Some(Self::ClassifiedBrandId),
                "CLASSIFIED_BRAND_NAME" => Some(Self::ClassifiedBrandName),
                "CONTENT_ID" => Some(Self::ContentId),
                "CONTENT_NAME" => Some(Self::ContentName),
                "COUNTRY_ID" => Some(Self::CountryId),
                "COUNTRY_NAME" => Some(Self::CountryName),
                "CREATIVE_BILLING_TYPE" => Some(Self::CreativeBillingType),
                "CREATIVE_BILLING_TYPE_NAME" => Some(Self::CreativeBillingTypeName),
                "CREATIVE_CLICK_THROUGH_URL" => Some(Self::CreativeClickThroughUrl),
                "CREATIVE_ID" => Some(Self::CreativeId),
                "CREATIVE_NAME" => Some(Self::CreativeName),
                "CREATIVE_TECHNOLOGY" => Some(Self::CreativeTechnology),
                "CREATIVE_TECHNOLOGY_NAME" => Some(Self::CreativeTechnologyName),
                "CREATIVE_THIRD_PARTY_VENDOR" => Some(Self::CreativeThirdPartyVendor),
                "CREATIVE_TYPE" => Some(Self::CreativeType),
                "CREATIVE_TYPE_NAME" => Some(Self::CreativeTypeName),
                "DATE" => Some(Self::Date),
                "DAY_OF_WEEK" => Some(Self::DayOfWeek),
                "DEMAND_CHANNEL" => Some(Self::DemandChannel),
                "DEMAND_CHANNEL_NAME" => Some(Self::DemandChannelName),
                "DEMAND_SUBCHANNEL" => Some(Self::DemandSubchannel),
                "DEMAND_SUBCHANNEL_NAME" => Some(Self::DemandSubchannelName),
                "DEVICE" => Some(Self::Device),
                "DEVICE_CATEGORY" => Some(Self::DeviceCategory),
                "DEVICE_CATEGORY_NAME" => Some(Self::DeviceCategoryName),
                "DEVICE_NAME" => Some(Self::DeviceName),
                "EXCHANGE_THIRD_PARTY_COMPANY_ID" => {
                    Some(Self::ExchangeThirdPartyCompanyId)
                }
                "EXCHANGE_THIRD_PARTY_COMPANY_NAME" => {
                    Some(Self::ExchangeThirdPartyCompanyName)
                }
                "FIRST_LOOK_PRICING_RULE_ID" => Some(Self::FirstLookPricingRuleId),
                "FIRST_LOOK_PRICING_RULE_NAME" => Some(Self::FirstLookPricingRuleName),
                "HOUR" => Some(Self::Hour),
                "INTERACTION_TYPE" => Some(Self::InteractionType),
                "INTERACTION_TYPE_NAME" => Some(Self::InteractionTypeName),
                "INVENTORY_FORMAT" => Some(Self::InventoryFormat),
                "INVENTORY_FORMAT_NAME" => Some(Self::InventoryFormatName),
                "INVENTORY_TYPE" => Some(Self::InventoryType),
                "INVENTORY_TYPE_NAME" => Some(Self::InventoryTypeName),
                "IS_ADX_DIRECT" => Some(Self::IsAdxDirect),
                "IS_FIRST_LOOK_DEAL" => Some(Self::IsFirstLookDeal),
                "KEY_VALUES_ID" => Some(Self::KeyValuesId),
                "KEY_VALUES_NAME" => Some(Self::KeyValuesName),
                "LINE_ITEM_ARCHIVED" => Some(Self::LineItemArchived),
                "LINE_ITEM_COMPANION_DELIVERY_OPTION" => {
                    Some(Self::LineItemCompanionDeliveryOption)
                }
                "LINE_ITEM_COMPANION_DELIVERY_OPTION_NAME" => {
                    Some(Self::LineItemCompanionDeliveryOptionName)
                }
                "LINE_ITEM_COMPUTED_STATUS" => Some(Self::LineItemComputedStatus),
                "LINE_ITEM_COMPUTED_STATUS_NAME" => {
                    Some(Self::LineItemComputedStatusName)
                }
                "LINE_ITEM_CONTRACTED_QUANTITY" => Some(Self::LineItemContractedQuantity),
                "LINE_ITEM_COST_PER_UNIT" => Some(Self::LineItemCostPerUnit),
                "LINE_ITEM_COST_TYPE" => Some(Self::LineItemCostType),
                "LINE_ITEM_COST_TYPE_NAME" => Some(Self::LineItemCostTypeName),
                "LINE_ITEM_CREATIVE_END_DATE" => Some(Self::LineItemCreativeEndDate),
                "LINE_ITEM_CREATIVE_ROTATION_TYPE" => {
                    Some(Self::LineItemCreativeRotationType)
                }
                "LINE_ITEM_CREATIVE_ROTATION_TYPE_NAME" => {
                    Some(Self::LineItemCreativeRotationTypeName)
                }
                "LINE_ITEM_CREATIVE_START_DATE" => Some(Self::LineItemCreativeStartDate),
                "LINE_ITEM_CURRENCY_CODE" => Some(Self::LineItemCurrencyCode),
                "LINE_ITEM_DELIVERY_INDICATOR" => Some(Self::LineItemDeliveryIndicator),
                "LINE_ITEM_DELIVERY_RATE_TYPE" => Some(Self::LineItemDeliveryRateType),
                "LINE_ITEM_DELIVERY_RATE_TYPE_NAME" => {
                    Some(Self::LineItemDeliveryRateTypeName)
                }
                "LINE_ITEM_DISCOUNT_ABSOLUTE" => Some(Self::LineItemDiscountAbsolute),
                "LINE_ITEM_DISCOUNT_PERCENTAGE" => Some(Self::LineItemDiscountPercentage),
                "LINE_ITEM_END_DATE" => Some(Self::LineItemEndDate),
                "LINE_ITEM_END_DATE_TIME" => Some(Self::LineItemEndDateTime),
                "LINE_ITEM_ENVIRONMENT_TYPE" => Some(Self::LineItemEnvironmentType),
                "LINE_ITEM_ENVIRONMENT_TYPE_NAME" => {
                    Some(Self::LineItemEnvironmentTypeName)
                }
                "LINE_ITEM_EXTERNAL_DEAL_ID" => Some(Self::LineItemExternalDealId),
                "LINE_ITEM_EXTERNAL_ID" => Some(Self::LineItemExternalId),
                "LINE_ITEM_FREQUENCY_CAP" => Some(Self::LineItemFrequencyCap),
                "LINE_ITEM_ID" => Some(Self::LineItemId),
                "LINE_ITEM_LAST_MODIFIED_BY_APP" => Some(Self::LineItemLastModifiedByApp),
                "LINE_ITEM_LIFETIME_CLICKS" => Some(Self::LineItemLifetimeClicks),
                "LINE_ITEM_LIFETIME_IMPRESSIONS" => {
                    Some(Self::LineItemLifetimeImpressions)
                }
                "LINE_ITEM_LIFETIME_VIEWABLE_IMPRESSIONS" => {
                    Some(Self::LineItemLifetimeViewableImpressions)
                }
                "LINE_ITEM_MAKEGOOD" => Some(Self::LineItemMakegood),
                "LINE_ITEM_NAME" => Some(Self::LineItemName),
                "LINE_ITEM_NON_CPD_BOOKED_REVENUE" => {
                    Some(Self::LineItemNonCpdBookedRevenue)
                }
                "LINE_ITEM_OPTIMIZABLE" => Some(Self::LineItemOptimizable),
                "LINE_ITEM_PRIMARY_GOAL_TYPE" => Some(Self::LineItemPrimaryGoalType),
                "LINE_ITEM_PRIMARY_GOAL_TYPE_NAME" => {
                    Some(Self::LineItemPrimaryGoalTypeName)
                }
                "LINE_ITEM_PRIMARY_GOAL_UNITS_ABSOLUTE" => {
                    Some(Self::LineItemPrimaryGoalUnitsAbsolute)
                }
                "LINE_ITEM_PRIMARY_GOAL_UNITS_PERCENTAGE" => {
                    Some(Self::LineItemPrimaryGoalUnitsPercentage)
                }
                "LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE" => {
                    Some(Self::LineItemPrimaryGoalUnitType)
                }
                "LINE_ITEM_PRIMARY_GOAL_UNIT_TYPE_NAME" => {
                    Some(Self::LineItemPrimaryGoalUnitTypeName)
                }
                "LINE_ITEM_PRIORITY" => Some(Self::LineItemPriority),
                "LINE_ITEM_RESERVATION_STATUS" => Some(Self::LineItemReservationStatus),
                "LINE_ITEM_RESERVATION_STATUS_NAME" => {
                    Some(Self::LineItemReservationStatusName)
                }
                "LINE_ITEM_START_DATE" => Some(Self::LineItemStartDate),
                "LINE_ITEM_START_DATE_TIME" => Some(Self::LineItemStartDateTime),
                "LINE_ITEM_TYPE" => Some(Self::LineItemType),
                "LINE_ITEM_TYPE_NAME" => Some(Self::LineItemTypeName),
                "LINE_ITEM_UNLIMITED_END" => Some(Self::LineItemUnlimitedEnd),
                "LINE_ITEM_VALUE_COST_PER_UNIT" => Some(Self::LineItemValueCostPerUnit),
                "LINE_ITEM_WEB_PROPERTY_CODE" => Some(Self::LineItemWebPropertyCode),
                "MASTER_COMPANION_CREATIVE_ID" => Some(Self::MasterCompanionCreativeId),
                "MASTER_COMPANION_CREATIVE_NAME" => {
                    Some(Self::MasterCompanionCreativeName)
                }
                "MOBILE_APP_FREE" => Some(Self::MobileAppFree),
                "MOBILE_APP_ICON_URL" => Some(Self::MobileAppIconUrl),
                "MOBILE_APP_ID" => Some(Self::MobileAppId),
                "MOBILE_APP_NAME" => Some(Self::MobileAppName),
                "MOBILE_APP_OWNERSHIP_STATUS" => Some(Self::MobileAppOwnershipStatus),
                "MOBILE_APP_OWNERSHIP_STATUS_NAME" => {
                    Some(Self::MobileAppOwnershipStatusName)
                }
                "MOBILE_APP_STORE" => Some(Self::MobileAppStore),
                "MOBILE_APP_STORE_NAME" => Some(Self::MobileAppStoreName),
                "MOBILE_INVENTORY_TYPE" => Some(Self::MobileInventoryType),
                "MOBILE_INVENTORY_TYPE_NAME" => Some(Self::MobileInventoryTypeName),
                "MOBILE_SDK_VERSION_NAME" => Some(Self::MobileSdkVersionName),
                "MONTH_YEAR" => Some(Self::MonthYear),
                "NATIVE_AD_FORMAT_ID" => Some(Self::NativeAdFormatId),
                "NATIVE_AD_FORMAT_NAME" => Some(Self::NativeAdFormatName),
                "NATIVE_STYLE_ID" => Some(Self::NativeStyleId),
                "NATIVE_STYLE_NAME" => Some(Self::NativeStyleName),
                "OPERATING_SYSTEM_CATEGORY" => Some(Self::OperatingSystemCategory),
                "OPERATING_SYSTEM_CATEGORY_NAME" => {
                    Some(Self::OperatingSystemCategoryName)
                }
                "OPERATING_SYSTEM_VERSION_ID" => Some(Self::OperatingSystemVersionId),
                "OPERATING_SYSTEM_VERSION_NAME" => Some(Self::OperatingSystemVersionName),
                "ORDER_AGENCY" => Some(Self::OrderAgency),
                "ORDER_AGENCY_ID" => Some(Self::OrderAgencyId),
                "ORDER_BOOKED_CPC" => Some(Self::OrderBookedCpc),
                "ORDER_BOOKED_CPM" => Some(Self::OrderBookedCpm),
                "ORDER_DELIVERY_STATUS" => Some(Self::OrderDeliveryStatus),
                "ORDER_DELIVERY_STATUS_NAME" => Some(Self::OrderDeliveryStatusName),
                "ORDER_END_DATE" => Some(Self::OrderEndDate),
                "ORDER_END_DATE_TIME" => Some(Self::OrderEndDateTime),
                "ORDER_EXTERNAL_ID" => Some(Self::OrderExternalId),
                "ORDER_ID" => Some(Self::OrderId),
                "ORDER_LABELS" => Some(Self::OrderLabels),
                "ORDER_LABEL_IDS" => Some(Self::OrderLabelIds),
                "ORDER_LIFETIME_CLICKS" => Some(Self::OrderLifetimeClicks),
                "ORDER_LIFETIME_IMPRESSIONS" => Some(Self::OrderLifetimeImpressions),
                "ORDER_NAME" => Some(Self::OrderName),
                "ORDER_PO_NUMBER" => Some(Self::OrderPoNumber),
                "ORDER_PROGRAMMATIC" => Some(Self::OrderProgrammatic),
                "ORDER_SALESPERSON" => Some(Self::OrderSalesperson),
                "ORDER_SECONDARY_SALESPEOPLE" => Some(Self::OrderSecondarySalespeople),
                "ORDER_SECONDARY_SALESPEOPLE_ID" => {
                    Some(Self::OrderSecondarySalespeopleId)
                }
                "ORDER_SECONDARY_TRAFFICKERS" => Some(Self::OrderSecondaryTraffickers),
                "ORDER_SECONDARY_TRAFFICKERS_ID" => {
                    Some(Self::OrderSecondaryTraffickersId)
                }
                "ORDER_START_DATE" => Some(Self::OrderStartDate),
                "ORDER_START_DATE_TIME" => Some(Self::OrderStartDateTime),
                "ORDER_TRAFFICKER" => Some(Self::OrderTrafficker),
                "ORDER_TRAFFICKER_ID" => Some(Self::OrderTraffickerId),
                "ORDER_UNLIMITED_END" => Some(Self::OrderUnlimitedEnd),
                "PLACEMENT_ID" => Some(Self::PlacementId),
                "PLACEMENT_ID_ALL" => Some(Self::PlacementIdAll),
                "PLACEMENT_NAME" => Some(Self::PlacementName),
                "PLACEMENT_NAME_ALL" => Some(Self::PlacementNameAll),
                "PLACEMENT_STATUS" => Some(Self::PlacementStatus),
                "PLACEMENT_STATUS_ALL" => Some(Self::PlacementStatusAll),
                "PLACEMENT_STATUS_NAME" => Some(Self::PlacementStatusName),
                "PLACEMENT_STATUS_NAME_ALL" => Some(Self::PlacementStatusNameAll),
                "PROGRAMMATIC_BUYER_ID" => Some(Self::ProgrammaticBuyerId),
                "PROGRAMMATIC_BUYER_NAME" => Some(Self::ProgrammaticBuyerName),
                "PROGRAMMATIC_CHANNEL" => Some(Self::ProgrammaticChannel),
                "PROGRAMMATIC_CHANNEL_NAME" => Some(Self::ProgrammaticChannelName),
                "RENDERED_CREATIVE_SIZE" => Some(Self::RenderedCreativeSize),
                "REQUESTED_AD_SIZES" => Some(Self::RequestedAdSizes),
                "REQUEST_TYPE" => Some(Self::RequestType),
                "REQUEST_TYPE_NAME" => Some(Self::RequestTypeName),
                "SITE" => Some(Self::Site),
                "TARGETING_ID" => Some(Self::TargetingId),
                "TARGETING_NAME" => Some(Self::TargetingName),
                "TARGETING_TYPE" => Some(Self::TargetingType),
                "TARGETING_TYPE_NAME" => Some(Self::TargetingTypeName),
                "TRAFFIC_SOURCE" => Some(Self::TrafficSource),
                "TRAFFIC_SOURCE_NAME" => Some(Self::TrafficSourceName),
                "UNIFIED_PRICING_RULE_ID" => Some(Self::UnifiedPricingRuleId),
                "UNIFIED_PRICING_RULE_NAME" => Some(Self::UnifiedPricingRuleName),
                "VIDEO_PLCMT" => Some(Self::VideoPlcmt),
                "VIDEO_PLCMT_NAME" => Some(Self::VideoPlcmtName),
                "WEEK" => Some(Self::Week),
                "YIELD_GROUP_BUYER_NAME" => Some(Self::YieldGroupBuyerName),
                "YIELD_GROUP_ID" => Some(Self::YieldGroupId),
                "YIELD_GROUP_NAME" => Some(Self::YieldGroupName),
                "LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID" => {
                    Some(Self::LineItemCustomField0OptionId)
                }
                "LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID" => {
                    Some(Self::LineItemCustomField1OptionId)
                }
                "LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID" => {
                    Some(Self::LineItemCustomField2OptionId)
                }
                "LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID" => {
                    Some(Self::LineItemCustomField3OptionId)
                }
                "LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID" => {
                    Some(Self::LineItemCustomField4OptionId)
                }
                "LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID" => {
                    Some(Self::LineItemCustomField5OptionId)
                }
                "LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID" => {
                    Some(Self::LineItemCustomField6OptionId)
                }
                "LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID" => {
                    Some(Self::LineItemCustomField7OptionId)
                }
                "LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID" => {
                    Some(Self::LineItemCustomField8OptionId)
                }
                "LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID" => {
                    Some(Self::LineItemCustomField9OptionId)
                }
                "LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID" => {
                    Some(Self::LineItemCustomField10OptionId)
                }
                "LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID" => {
                    Some(Self::LineItemCustomField11OptionId)
                }
                "LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID" => {
                    Some(Self::LineItemCustomField12OptionId)
                }
                "LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID" => {
                    Some(Self::LineItemCustomField13OptionId)
                }
                "LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID" => {
                    Some(Self::LineItemCustomField14OptionId)
                }
                "LINE_ITEM_CUSTOM_FIELD_0_VALUE" => Some(Self::LineItemCustomField0Value),
                "LINE_ITEM_CUSTOM_FIELD_1_VALUE" => Some(Self::LineItemCustomField1Value),
                "LINE_ITEM_CUSTOM_FIELD_2_VALUE" => Some(Self::LineItemCustomField2Value),
                "LINE_ITEM_CUSTOM_FIELD_3_VALUE" => Some(Self::LineItemCustomField3Value),
                "LINE_ITEM_CUSTOM_FIELD_4_VALUE" => Some(Self::LineItemCustomField4Value),
                "LINE_ITEM_CUSTOM_FIELD_5_VALUE" => Some(Self::LineItemCustomField5Value),
                "LINE_ITEM_CUSTOM_FIELD_6_VALUE" => Some(Self::LineItemCustomField6Value),
                "LINE_ITEM_CUSTOM_FIELD_7_VALUE" => Some(Self::LineItemCustomField7Value),
                "LINE_ITEM_CUSTOM_FIELD_8_VALUE" => Some(Self::LineItemCustomField8Value),
                "LINE_ITEM_CUSTOM_FIELD_9_VALUE" => Some(Self::LineItemCustomField9Value),
                "LINE_ITEM_CUSTOM_FIELD_10_VALUE" => {
                    Some(Self::LineItemCustomField10Value)
                }
                "LINE_ITEM_CUSTOM_FIELD_11_VALUE" => {
                    Some(Self::LineItemCustomField11Value)
                }
                "LINE_ITEM_CUSTOM_FIELD_12_VALUE" => {
                    Some(Self::LineItemCustomField12Value)
                }
                "LINE_ITEM_CUSTOM_FIELD_13_VALUE" => {
                    Some(Self::LineItemCustomField13Value)
                }
                "LINE_ITEM_CUSTOM_FIELD_14_VALUE" => {
                    Some(Self::LineItemCustomField14Value)
                }
                "ORDER_CUSTOM_FIELD_0_OPTION_ID" => Some(Self::OrderCustomField0OptionId),
                "ORDER_CUSTOM_FIELD_1_OPTION_ID" => Some(Self::OrderCustomField1OptionId),
                "ORDER_CUSTOM_FIELD_2_OPTION_ID" => Some(Self::OrderCustomField2OptionId),
                "ORDER_CUSTOM_FIELD_3_OPTION_ID" => Some(Self::OrderCustomField3OptionId),
                "ORDER_CUSTOM_FIELD_4_OPTION_ID" => Some(Self::OrderCustomField4OptionId),
                "ORDER_CUSTOM_FIELD_5_OPTION_ID" => Some(Self::OrderCustomField5OptionId),
                "ORDER_CUSTOM_FIELD_6_OPTION_ID" => Some(Self::OrderCustomField6OptionId),
                "ORDER_CUSTOM_FIELD_7_OPTION_ID" => Some(Self::OrderCustomField7OptionId),
                "ORDER_CUSTOM_FIELD_8_OPTION_ID" => Some(Self::OrderCustomField8OptionId),
                "ORDER_CUSTOM_FIELD_9_OPTION_ID" => Some(Self::OrderCustomField9OptionId),
                "ORDER_CUSTOM_FIELD_10_OPTION_ID" => {
                    Some(Self::OrderCustomField10OptionId)
                }
                "ORDER_CUSTOM_FIELD_11_OPTION_ID" => {
                    Some(Self::OrderCustomField11OptionId)
                }
                "ORDER_CUSTOM_FIELD_12_OPTION_ID" => {
                    Some(Self::OrderCustomField12OptionId)
                }
                "ORDER_CUSTOM_FIELD_13_OPTION_ID" => {
                    Some(Self::OrderCustomField13OptionId)
                }
                "ORDER_CUSTOM_FIELD_14_OPTION_ID" => {
                    Some(Self::OrderCustomField14OptionId)
                }
                "ORDER_CUSTOM_FIELD_0_VALUE" => Some(Self::OrderCustomField0Value),
                "ORDER_CUSTOM_FIELD_1_VALUE" => Some(Self::OrderCustomField1Value),
                "ORDER_CUSTOM_FIELD_2_VALUE" => Some(Self::OrderCustomField2Value),
                "ORDER_CUSTOM_FIELD_3_VALUE" => Some(Self::OrderCustomField3Value),
                "ORDER_CUSTOM_FIELD_4_VALUE" => Some(Self::OrderCustomField4Value),
                "ORDER_CUSTOM_FIELD_5_VALUE" => Some(Self::OrderCustomField5Value),
                "ORDER_CUSTOM_FIELD_6_VALUE" => Some(Self::OrderCustomField6Value),
                "ORDER_CUSTOM_FIELD_7_VALUE" => Some(Self::OrderCustomField7Value),
                "ORDER_CUSTOM_FIELD_8_VALUE" => Some(Self::OrderCustomField8Value),
                "ORDER_CUSTOM_FIELD_9_VALUE" => Some(Self::OrderCustomField9Value),
                "ORDER_CUSTOM_FIELD_10_VALUE" => Some(Self::OrderCustomField10Value),
                "ORDER_CUSTOM_FIELD_11_VALUE" => Some(Self::OrderCustomField11Value),
                "ORDER_CUSTOM_FIELD_12_VALUE" => Some(Self::OrderCustomField12Value),
                "ORDER_CUSTOM_FIELD_13_VALUE" => Some(Self::OrderCustomField13Value),
                "ORDER_CUSTOM_FIELD_14_VALUE" => Some(Self::OrderCustomField14Value),
                "CREATIVE_CUSTOM_FIELD_0_OPTION_ID" => {
                    Some(Self::CreativeCustomField0OptionId)
                }
                "CREATIVE_CUSTOM_FIELD_1_OPTION_ID" => {
                    Some(Self::CreativeCustomField1OptionId)
                }
                "CREATIVE_CUSTOM_FIELD_2_OPTION_ID" => {
                    Some(Self::CreativeCustomField2OptionId)
                }
                "CREATIVE_CUSTOM_FIELD_3_OPTION_ID" => {
                    Some(Self::CreativeCustomField3OptionId)
                }
                "CREATIVE_CUSTOM_FIELD_4_OPTION_ID" => {
                    Some(Self::CreativeCustomField4OptionId)
                }
                "CREATIVE_CUSTOM_FIELD_5_OPTION_ID" => {
                    Some(Self::CreativeCustomField5OptionId)
                }
                "CREATIVE_CUSTOM_FIELD_6_OPTION_ID" => {
                    Some(Self::CreativeCustomField6OptionId)
                }
                "CREATIVE_CUSTOM_FIELD_7_OPTION_ID" => {
                    Some(Self::CreativeCustomField7OptionId)
                }
                "CREATIVE_CUSTOM_FIELD_8_OPTION_ID" => {
                    Some(Self::CreativeCustomField8OptionId)
                }
                "CREATIVE_CUSTOM_FIELD_9_OPTION_ID" => {
                    Some(Self::CreativeCustomField9OptionId)
                }
                "CREATIVE_CUSTOM_FIELD_10_OPTION_ID" => {
                    Some(Self::CreativeCustomField10OptionId)
                }
                "CREATIVE_CUSTOM_FIELD_11_OPTION_ID" => {
                    Some(Self::CreativeCustomField11OptionId)
                }
                "CREATIVE_CUSTOM_FIELD_12_OPTION_ID" => {
                    Some(Self::CreativeCustomField12OptionId)
                }
                "CREATIVE_CUSTOM_FIELD_13_OPTION_ID" => {
                    Some(Self::CreativeCustomField13OptionId)
                }
                "CREATIVE_CUSTOM_FIELD_14_OPTION_ID" => {
                    Some(Self::CreativeCustomField14OptionId)
                }
                "CREATIVE_CUSTOM_FIELD_0_VALUE" => Some(Self::CreativeCustomField0Value),
                "CREATIVE_CUSTOM_FIELD_1_VALUE" => Some(Self::CreativeCustomField1Value),
                "CREATIVE_CUSTOM_FIELD_2_VALUE" => Some(Self::CreativeCustomField2Value),
                "CREATIVE_CUSTOM_FIELD_3_VALUE" => Some(Self::CreativeCustomField3Value),
                "CREATIVE_CUSTOM_FIELD_4_VALUE" => Some(Self::CreativeCustomField4Value),
                "CREATIVE_CUSTOM_FIELD_5_VALUE" => Some(Self::CreativeCustomField5Value),
                "CREATIVE_CUSTOM_FIELD_6_VALUE" => Some(Self::CreativeCustomField6Value),
                "CREATIVE_CUSTOM_FIELD_7_VALUE" => Some(Self::CreativeCustomField7Value),
                "CREATIVE_CUSTOM_FIELD_8_VALUE" => Some(Self::CreativeCustomField8Value),
                "CREATIVE_CUSTOM_FIELD_9_VALUE" => Some(Self::CreativeCustomField9Value),
                "CREATIVE_CUSTOM_FIELD_10_VALUE" => {
                    Some(Self::CreativeCustomField10Value)
                }
                "CREATIVE_CUSTOM_FIELD_11_VALUE" => {
                    Some(Self::CreativeCustomField11Value)
                }
                "CREATIVE_CUSTOM_FIELD_12_VALUE" => {
                    Some(Self::CreativeCustomField12Value)
                }
                "CREATIVE_CUSTOM_FIELD_13_VALUE" => {
                    Some(Self::CreativeCustomField13Value)
                }
                "CREATIVE_CUSTOM_FIELD_14_VALUE" => {
                    Some(Self::CreativeCustomField14Value)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID" => {
                    Some(Self::BackfillLineItemCustomField0OptionId)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_OPTION_ID" => {
                    Some(Self::BackfillLineItemCustomField1OptionId)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_OPTION_ID" => {
                    Some(Self::BackfillLineItemCustomField2OptionId)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_OPTION_ID" => {
                    Some(Self::BackfillLineItemCustomField3OptionId)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_OPTION_ID" => {
                    Some(Self::BackfillLineItemCustomField4OptionId)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_OPTION_ID" => {
                    Some(Self::BackfillLineItemCustomField5OptionId)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_OPTION_ID" => {
                    Some(Self::BackfillLineItemCustomField6OptionId)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_OPTION_ID" => {
                    Some(Self::BackfillLineItemCustomField7OptionId)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_OPTION_ID" => {
                    Some(Self::BackfillLineItemCustomField8OptionId)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_OPTION_ID" => {
                    Some(Self::BackfillLineItemCustomField9OptionId)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_OPTION_ID" => {
                    Some(Self::BackfillLineItemCustomField10OptionId)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_OPTION_ID" => {
                    Some(Self::BackfillLineItemCustomField11OptionId)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_OPTION_ID" => {
                    Some(Self::BackfillLineItemCustomField12OptionId)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_OPTION_ID" => {
                    Some(Self::BackfillLineItemCustomField13OptionId)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_OPTION_ID" => {
                    Some(Self::BackfillLineItemCustomField14OptionId)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_0_VALUE" => {
                    Some(Self::BackfillLineItemCustomField0Value)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_1_VALUE" => {
                    Some(Self::BackfillLineItemCustomField1Value)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_2_VALUE" => {
                    Some(Self::BackfillLineItemCustomField2Value)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_3_VALUE" => {
                    Some(Self::BackfillLineItemCustomField3Value)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_4_VALUE" => {
                    Some(Self::BackfillLineItemCustomField4Value)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_5_VALUE" => {
                    Some(Self::BackfillLineItemCustomField5Value)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_6_VALUE" => {
                    Some(Self::BackfillLineItemCustomField6Value)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_7_VALUE" => {
                    Some(Self::BackfillLineItemCustomField7Value)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_8_VALUE" => {
                    Some(Self::BackfillLineItemCustomField8Value)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_9_VALUE" => {
                    Some(Self::BackfillLineItemCustomField9Value)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_10_VALUE" => {
                    Some(Self::BackfillLineItemCustomField10Value)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_11_VALUE" => {
                    Some(Self::BackfillLineItemCustomField11Value)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_12_VALUE" => {
                    Some(Self::BackfillLineItemCustomField12Value)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_13_VALUE" => {
                    Some(Self::BackfillLineItemCustomField13Value)
                }
                "BACKFILL_LINE_ITEM_CUSTOM_FIELD_14_VALUE" => {
                    Some(Self::BackfillLineItemCustomField14Value)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_0_OPTION_ID" => {
                    Some(Self::BackfillOrderCustomField0OptionId)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_1_OPTION_ID" => {
                    Some(Self::BackfillOrderCustomField1OptionId)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_2_OPTION_ID" => {
                    Some(Self::BackfillOrderCustomField2OptionId)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_3_OPTION_ID" => {
                    Some(Self::BackfillOrderCustomField3OptionId)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_4_OPTION_ID" => {
                    Some(Self::BackfillOrderCustomField4OptionId)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_5_OPTION_ID" => {
                    Some(Self::BackfillOrderCustomField5OptionId)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_6_OPTION_ID" => {
                    Some(Self::BackfillOrderCustomField6OptionId)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_7_OPTION_ID" => {
                    Some(Self::BackfillOrderCustomField7OptionId)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_8_OPTION_ID" => {
                    Some(Self::BackfillOrderCustomField8OptionId)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_9_OPTION_ID" => {
                    Some(Self::BackfillOrderCustomField9OptionId)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_10_OPTION_ID" => {
                    Some(Self::BackfillOrderCustomField10OptionId)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_11_OPTION_ID" => {
                    Some(Self::BackfillOrderCustomField11OptionId)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_12_OPTION_ID" => {
                    Some(Self::BackfillOrderCustomField12OptionId)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_13_OPTION_ID" => {
                    Some(Self::BackfillOrderCustomField13OptionId)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_14_OPTION_ID" => {
                    Some(Self::BackfillOrderCustomField14OptionId)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_0_VALUE" => {
                    Some(Self::BackfillOrderCustomField0Value)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_1_VALUE" => {
                    Some(Self::BackfillOrderCustomField1Value)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_2_VALUE" => {
                    Some(Self::BackfillOrderCustomField2Value)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_3_VALUE" => {
                    Some(Self::BackfillOrderCustomField3Value)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_4_VALUE" => {
                    Some(Self::BackfillOrderCustomField4Value)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_5_VALUE" => {
                    Some(Self::BackfillOrderCustomField5Value)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_6_VALUE" => {
                    Some(Self::BackfillOrderCustomField6Value)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_7_VALUE" => {
                    Some(Self::BackfillOrderCustomField7Value)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_8_VALUE" => {
                    Some(Self::BackfillOrderCustomField8Value)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_9_VALUE" => {
                    Some(Self::BackfillOrderCustomField9Value)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_10_VALUE" => {
                    Some(Self::BackfillOrderCustomField10Value)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_11_VALUE" => {
                    Some(Self::BackfillOrderCustomField11Value)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_12_VALUE" => {
                    Some(Self::BackfillOrderCustomField12Value)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_13_VALUE" => {
                    Some(Self::BackfillOrderCustomField13Value)
                }
                "BACKFILL_ORDER_CUSTOM_FIELD_14_VALUE" => {
                    Some(Self::BackfillOrderCustomField14Value)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_0_OPTION_ID" => {
                    Some(Self::BackfillCreativeCustomField0OptionId)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_1_OPTION_ID" => {
                    Some(Self::BackfillCreativeCustomField1OptionId)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_2_OPTION_ID" => {
                    Some(Self::BackfillCreativeCustomField2OptionId)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_3_OPTION_ID" => {
                    Some(Self::BackfillCreativeCustomField3OptionId)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_4_OPTION_ID" => {
                    Some(Self::BackfillCreativeCustomField4OptionId)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_5_OPTION_ID" => {
                    Some(Self::BackfillCreativeCustomField5OptionId)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_6_OPTION_ID" => {
                    Some(Self::BackfillCreativeCustomField6OptionId)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_7_OPTION_ID" => {
                    Some(Self::BackfillCreativeCustomField7OptionId)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_8_OPTION_ID" => {
                    Some(Self::BackfillCreativeCustomField8OptionId)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_9_OPTION_ID" => {
                    Some(Self::BackfillCreativeCustomField9OptionId)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_10_OPTION_ID" => {
                    Some(Self::BackfillCreativeCustomField10OptionId)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_11_OPTION_ID" => {
                    Some(Self::BackfillCreativeCustomField11OptionId)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_12_OPTION_ID" => {
                    Some(Self::BackfillCreativeCustomField12OptionId)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_13_OPTION_ID" => {
                    Some(Self::BackfillCreativeCustomField13OptionId)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_14_OPTION_ID" => {
                    Some(Self::BackfillCreativeCustomField14OptionId)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_0_VALUE" => {
                    Some(Self::BackfillCreativeCustomField0Value)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_1_VALUE" => {
                    Some(Self::BackfillCreativeCustomField1Value)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_2_VALUE" => {
                    Some(Self::BackfillCreativeCustomField2Value)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_3_VALUE" => {
                    Some(Self::BackfillCreativeCustomField3Value)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_4_VALUE" => {
                    Some(Self::BackfillCreativeCustomField4Value)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_5_VALUE" => {
                    Some(Self::BackfillCreativeCustomField5Value)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_6_VALUE" => {
                    Some(Self::BackfillCreativeCustomField6Value)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_7_VALUE" => {
                    Some(Self::BackfillCreativeCustomField7Value)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_8_VALUE" => {
                    Some(Self::BackfillCreativeCustomField8Value)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_9_VALUE" => {
                    Some(Self::BackfillCreativeCustomField9Value)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_10_VALUE" => {
                    Some(Self::BackfillCreativeCustomField10Value)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_11_VALUE" => {
                    Some(Self::BackfillCreativeCustomField11Value)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_12_VALUE" => {
                    Some(Self::BackfillCreativeCustomField12Value)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_13_VALUE" => {
                    Some(Self::BackfillCreativeCustomField13Value)
                }
                "BACKFILL_CREATIVE_CUSTOM_FIELD_14_VALUE" => {
                    Some(Self::BackfillCreativeCustomField14Value)
                }
                "CUSTOM_DIMENSION_0_VALUE_ID" => Some(Self::CustomDimension0ValueId),
                "CUSTOM_DIMENSION_1_VALUE_ID" => Some(Self::CustomDimension1ValueId),
                "CUSTOM_DIMENSION_2_VALUE_ID" => Some(Self::CustomDimension2ValueId),
                "CUSTOM_DIMENSION_3_VALUE_ID" => Some(Self::CustomDimension3ValueId),
                "CUSTOM_DIMENSION_4_VALUE_ID" => Some(Self::CustomDimension4ValueId),
                "CUSTOM_DIMENSION_5_VALUE_ID" => Some(Self::CustomDimension5ValueId),
                "CUSTOM_DIMENSION_6_VALUE_ID" => Some(Self::CustomDimension6ValueId),
                "CUSTOM_DIMENSION_7_VALUE_ID" => Some(Self::CustomDimension7ValueId),
                "CUSTOM_DIMENSION_8_VALUE_ID" => Some(Self::CustomDimension8ValueId),
                "CUSTOM_DIMENSION_9_VALUE_ID" => Some(Self::CustomDimension9ValueId),
                "CUSTOM_DIMENSION_0_VALUE" => Some(Self::CustomDimension0Value),
                "CUSTOM_DIMENSION_1_VALUE" => Some(Self::CustomDimension1Value),
                "CUSTOM_DIMENSION_2_VALUE" => Some(Self::CustomDimension2Value),
                "CUSTOM_DIMENSION_3_VALUE" => Some(Self::CustomDimension3Value),
                "CUSTOM_DIMENSION_4_VALUE" => Some(Self::CustomDimension4Value),
                "CUSTOM_DIMENSION_5_VALUE" => Some(Self::CustomDimension5Value),
                "CUSTOM_DIMENSION_6_VALUE" => Some(Self::CustomDimension6Value),
                "CUSTOM_DIMENSION_7_VALUE" => Some(Self::CustomDimension7Value),
                "CUSTOM_DIMENSION_8_VALUE" => Some(Self::CustomDimension8Value),
                "CUSTOM_DIMENSION_9_VALUE" => Some(Self::CustomDimension9Value),
                _ => None,
            }
        }
    }
    /// Reporting metrics.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Metric {
        /// Default value. This value is unused.
        Unspecified = 0,
        /// Active View total average time in seconds that specific impressions are
        /// reported as being viewable.
        ActiveViewAverageViewableTime = 61,
        /// Total number of impressions that were eligible to measure viewability.
        ActiveViewEligibleImpressions = 58,
        /// The total number of impressions that were sampled and measured by active
        /// view.
        ActiveViewMeasurableImpressions = 57,
        /// The percentage of total impressions that were measurable by active view
        /// (out of all the total impressions sampled for active view).
        ActiveViewMeasurableImpressionsRate = 60,
        /// The total number of impressions viewed on the user's screen.
        ActiveViewViewableImpressions = 56,
        /// The percentage of total impressions viewed on the user's screen (out of
        /// the total impressions measurable by active view).
        ActiveViewViewableImpressionsRate = 59,
        /// Active View AdSense average time in seconds that specific impressions are
        /// reported as being viewable.
        AdsenseActiveViewAverageViewableTime = 73,
        /// Total number of impressions delivered by AdSense that were eligible to
        /// measure viewability.
        AdsenseActiveViewEligibleImpressions = 70,
        /// The number of impressions delivered by AdSense that were sampled, and
        /// measurable by active view.
        AdsenseActiveViewMeasurableImpressions = 69,
        /// The percentage of impressions delivered by AdSense that were measurable
        /// by active view (out of all AdSense impressions sampled for active view).
        AdsenseActiveViewMeasurableImpressionsRate = 72,
        /// The number of impressions delivered by AdSense viewed on the user's
        /// screen.
        AdsenseActiveViewViewableImpressions = 68,
        /// The percentage of impressions delivered by AdSense viewed on the user's
        /// screen (out of AdSense impressions measurable by active view).
        AdsenseActiveViewViewableImpressionsRate = 71,
        /// The average effective cost-per-thousand-impressions earned from the ads
        /// delivered by AdSense through line item dynamic allocation.
        AdsenseAverageEcpm = 26,
        /// Number of clicks delivered by AdSense demand channel.
        AdsenseClicks = 23,
        /// The ratio of impressions served by AdSense that resulted in users
        /// clicking on an ad. The clickthrough rate (CTR) is updated nightly. The
        /// AdSense CTR is calculated as: (AdSense clicks / AdSense impressions).
        AdsenseCtr = 24,
        /// Total impressions delivered by AdSense.
        AdsenseImpressions = 22,
        /// Ratio of clicks delivered by AdSense through line item dynamic allocation
        /// in relation to the total clicks delivered.
        AdsensePercentClicks = 28,
        /// Ratio of impressions delivered by AdSense through line item dynamic
        /// allocation in relation to the total impressions delivered.
        AdsensePercentImpressions = 27,
        /// Ratio of revenue generated by AdSense through line item dynamic
        /// allocation in relation to the total revenue.
        AdsensePercentRevenue = 29,
        /// Ratio of revenue generated by AdSense through line item dynamic
        /// allocation in relation to the total revenue (excluding CPD).
        AdsensePercentRevenueWithoutCpd = 30,
        /// The total number of times that an AdSense ad is delivered.
        AdsenseResponsesServed = 41,
        /// Revenue generated from AdSense through line item dynamic allocation,
        /// calculated in the network's currency and time zone.
        AdsenseRevenue = 25,
        /// Active View AdExchange average time in seconds that specific impressions
        /// are reported as being viewable.
        AdExchangeActiveViewAverageViewableTime = 79,
        /// Total number of impressions delivered by Ad Exchange that were eligible
        /// to measure viewability.
        AdExchangeActiveViewEligibleImpressions = 76,
        /// The number of impressions delivered by Ad Exchange that were sampled, and
        /// measurable by active view.
        AdExchangeActiveViewMeasurableImpressions = 75,
        /// The percentage of impressions delivered by Ad Exchange that were
        /// measurable by active view (out of all Ad Exchange impressions sampled for
        /// active view).
        AdExchangeActiveViewMeasurableImpressionsRate = 78,
        /// The number of impressions delivered by Ad Exchange viewed on the user's
        /// screen.
        AdExchangeActiveViewViewableImpressions = 74,
        /// The percentage of impressions delivered by Ad Exchange viewed on the
        /// user's screen (out of Ad Exchange impressions measurable by active view).
        AdExchangeActiveViewViewableImpressionsRate = 77,
        /// The average effective cost-per-thousand-impressions earned from the ads
        /// delivered by Ad Exchange through line item dynamic allocation.
        AdExchangeAverageEcpm = 18,
        /// Number of clicks delivered by the Ad Exchange.
        AdExchangeClicks = 15,
        /// The ratio of impressions served by the Ad Exchange that resulted in users
        /// clicking on an ad. The clickthrough rate (CTR) is updated nightly. Ad
        /// Exchange CTR is calculated as: (Ad Exchange clicks / Ad Exchange
        /// impressions).
        AdExchangeCtr = 16,
        /// Total impressions delivered by the Ad Exchange.
        AdExchangeImpressions = 14,
        /// Ratio of clicks delivered by Ad Exchange through line item dynamic
        /// allocation in relation to the total clicks delivered.
        AdExchangePercentClicks = 20,
        /// Ratio of impressions delivered by Ad Exchange through line item dynamic
        /// allocation in relation to the total impressions delivered.
        AdExchangePercentImpressions = 19,
        /// Ratio of revenue generated by Ad Exchange through line item dynamic
        /// allocation in relation to the total revenue.
        AdExchangePercentRevenue = 21,
        /// Ratio of revenue generated by Ad Exchange through line item dynamic
        /// allocation in relation to the total revenue (excluding CPD).
        AdExchangePercentRevenueWithoutCpd = 31,
        /// The total number of times that an Ad Exchange ad is delivered.
        AdExchangeResponsesServed = 42,
        /// Revenue generated from the Ad Exchange through line item dynamic
        /// allocation, calculated in your network's currency and time zone.
        AdExchangeRevenue = 17,
        /// The total number of times that an ad request is sent to the ad server
        /// including dynamic allocation.
        AdRequests = 38,
        /// Active View ad server average time in seconds that specific impressions
        /// are reported as being viewable.
        AdServerActiveViewAverageViewableTime = 67,
        /// Total number of impressions delivered by the ad server that were eligible
        /// to measure viewability.
        AdServerActiveViewEligibleImpressions = 64,
        /// The number of impressions delivered by the ad server that were sampled,
        /// and measurable by active view.
        AdServerActiveViewMeasurableImpressions = 63,
        /// The percentage of impressions delivered by the ad server that were
        /// measurable by active view (out of all the ad server impressions sampled
        /// for active view).
        AdServerActiveViewMeasurableImpressionsRate = 66,
        /// The number of impressions delivered by the ad server viewed on the user's
        /// screen.
        AdServerActiveViewViewableImpressions = 62,
        /// The percentage of impressions delivered by the ad server viewed on the
        /// user's screen (out of the ad server impressions measurable by active
        /// view).
        AdServerActiveViewViewableImpressionsRate = 65,
        /// Average effective cost-per-thousand-impressions earned from the ads
        /// delivered by the Google Ad Manager server.
        AdServerAverageEcpm = 34,
        /// Average effective cost-per-thousand-impressions earned from the ads
        /// delivered by the Google Ad Manager server, excluding CPD value.
        AdServerAverageEcpmWithoutCpd = 10,
        /// Total clicks served by the Google Ad Manager server. It usually takes
        /// about 30 minutes for new clicks to be recorded and added to the total
        /// displayed in reporting.
        AdServerClicks = 7,
        /// CPD revenue earned, calculated in your network's currency, for
        /// the ads delivered by the Google Ad Manager server. Sum of all booked
        /// revenue.
        AdServerCpdRevenue = 32,
        /// Ratio of impressions served by the Google Ad Manager server that resulted
        /// in users clicking on an ad. The clickthrough rate (CTR) is updated
        /// nightly. The ad server CTR is calculated as: (Ad server clicks / Ad
        /// server impressions).
        AdServerCtr = 8,
        /// Total impressions delivered by the Ad Server.
        AdServerImpressions = 6,
        /// Ratio of clicks delivered by the Google Ad Manager server in relation to
        /// the total clicks delivered.
        AdServerPercentClicks = 12,
        /// Ratio of impressions delivered by the Google Ad Manager server in
        /// relation to the total impressions delivered.
        AdServerPercentImpressions = 11,
        /// Ratio of revenue generated by the Google Ad Manager server in relation
        /// to the total revenue.
        AdServerPercentRevenue = 35,
        /// Ratio of revenue generated by the Google Ad Manager server (excluding
        /// CPD) in relation to the total revenue.
        AdServerPercentRevenueWithoutCpd = 13,
        /// The total number of times that an ad is served by the ad server.
        AdServerResponsesServed = 40,
        /// All CPM, CPC, and CPD revenue earned, calculated in your network's
        /// currency, for the ads delivered by the Google Ad Manager server.
        /// Sum of all booked revenue.
        AdServerRevenue = 33,
        /// Revenue (excluding CPD) earned, calculated in your network's currency,
        /// for the ads delivered by the Google Ad Manager server. Sum of all booked
        /// revenue.
        AdServerRevenueWithoutCpd = 9,
        /// Number of winning bids received from Open Bidding buyers, even when the
        /// winning bid is placed at the end of a mediation for mobile apps chain.
        AuctionsWon = 80,
        /// eCPM averaged across the Google Ad Manager server, AdSense,
        /// and Ad Exchange.
        AverageEcpm = 37,
        /// eCPM averaged across the Google Ad Manager server (excluding CPD),
        /// AdSense, and Ad Exchange.
        AverageEcpmWithoutCpd = 5,
        /// Number of bids received from Open Bidding buyers, regardless of whether
        /// the returned bid competes in an auction.
        Bids = 81,
        /// Number of bids received from Open Bidding buyers that competed in
        /// the auction.
        BidsInAuction = 82,
        /// Number of times a yield partner is asked to return bid to fill
        /// a yield group request.
        Callouts = 83,
        /// The number of times a user clicked on an ad.
        Clicks = 2,
        /// The total number of times that the code for an ad is served by the ad
        /// server including dynamic allocation.
        CodeServedCount = 44,
        /// For standard ads, your ad clickthrough rate (CTR) is the number of ad
        ///   clicks divided by the number of individual ad impressions expressed as a
        ///   fraction. Ad CTR = Clicks / Ad impressions.
        Ctr = 3,
        /// The number of coviewed impressions sold by Google in partner sales.
        GoogleSoldAuctionCoviewedImpressions = 129,
        /// The number of auction impressions sold by Google in partner sales.
        GoogleSoldAuctionImpressions = 128,
        /// The number of coviewed impressions sold by Google in partner sales.
        GoogleSoldCoviewedImpressions = 131,
        /// The number of impressions sold by Google in partner sales.
        GoogleSoldImpressions = 130,
        /// The number of coviewed impressions sold by Google in partner sales.
        GoogleSoldReservationCoviewedImpressions = 127,
        /// The number of reservation impressions sold by Google in partner sales.
        GoogleSoldReservationImpressions = 126,
        /// Total impressions from the Google Ad Manager server, AdSense,
        /// Ad Exchange, and yield group partners.
        Impressions = 1,
        /// The number of filled pod requests (filled by partner or Google) in
        /// partner sales.
        PartnerSalesFilledPodRequests = 135,
        /// The percent of filled requests to total ad requests in
        /// partner sales.
        PartnerSalesFillRate = 136,
        /// The percent of partner filled requests to total ad requests
        /// in partner sales.
        PartnerSalesPartnerMatchRate = 137,
        /// The number of queries eligible for partner sales.
        PartnerSalesQueries = 132,
        /// The number of partner unfilled impressions in partner sales.
        /// If a pod request is not filled by partner but filled by Google, this
        /// metric will still count 1.
        PartnerSalesUnfilledImpressions = 133,
        /// The number of partner unmatched queries in partner sales.
        /// If an ad request is not filled by partner but filled by Google, this
        /// metric will still count 1.
        PartnerSalesUnmatchedQueries = 134,
        /// The number of code served sold by partner in partner sales.
        PartnerSoldCodeServed = 125,
        /// The number of coviewed impressions sold by partner in partner sales.
        PartnerSoldCoviewedImpressions = 124,
        /// The number of impressions sold by partner in partner sales.
        PartnerSoldImpressions = 123,
        /// The total number of ad requests eligible for programmatic inventory,
        /// including Programmatic Guaranteed, Preferred Deals, backfill, and open
        /// auction.
        ProgrammaticEligibleAdRequests = 177,
        /// The number of programmatic responses served divided by the number of
        /// programmatic eligible ad requests. Includes Ad Exchange, Open Bidding,
        /// and Preferred Deals.
        ProgrammaticMatchRate = 178,
        /// Total number of ad responses served from programmatic demand sources.
        /// Includes Ad Exchange, Open Bidding, and Preferred Deals.
        ///
        /// Differs from AD_EXCHANGE_RESPONSES_SERVED, which doesn't include Open
        /// Bidding ad requests.
        ProgrammaticResponsesServed = 176,
        /// The total number of times that an ad is served by the ad server including
        /// dynamic allocation.
        ResponsesServed = 39,
        /// Total amount of CPM, CPC, and CPD revenue based on the number of units
        /// served by the Google Ad Manager server, AdSense, Ad Exchange, and
        /// third-party Mediation networks.
        Revenue = 36,
        /// Total amount of revenue (excluding CPD) based on the number of units
        /// served by the Google Ad Manager server, AdSense, Ad Exchange, and
        /// third-party Mediation networks.
        RevenueWithoutCpd = 4,
        /// Number of times a yield group buyer successfully returned a bid in
        /// response to a yield group callout.
        SuccessfulResponses = 84,
        /// The total number of missed impressions due to the ad servers' inability
        /// to find ads to serve including dynamic allocation.
        UnfilledImpressions = 45,
        /// The total number of times that an ad is not returned by the ad server.
        UnmatchedAdRequests = 43,
        /// Number of times an Offerwall message was shown to users.
        UserMessagesOfferwallMessagesShown = 121,
        /// The number of messages where the user gained an entitlement.
        UserMessagesOfferwallSuccessfulEngagements = 122,
        /// The number of user interactions with a video, on average, such as pause,
        /// full screen, mute, etc.
        VideoInteractionAverageInteractionRate = 92,
        /// The number of times a user collapses a video, either to its original size
        /// or to a different size.
        VideoInteractionCollapses = 93,
        /// The number of times a user expands a video.
        VideoInteractionExpands = 95,
        /// The number of times ad clip played in full screen mode.
        VideoInteractionFullScreens = 96,
        /// The number of times video player was in mute state during play of ad
        ///   clip.
        VideoInteractionMutes = 97,
        /// The number of times user paused ad clip.
        VideoInteractionPauses = 98,
        /// The number of times the user unpaused the video.
        VideoInteractionResumes = 99,
        /// The number of times a user rewinds the video.
        VideoInteractionRewinds = 100,
        /// The number of times a user unmutes the video.
        VideoInteractionUnmutes = 101,
        /// The number of times a skippable video is skipped.
        VideoInteractionVideoSkips = 102,
        /// The number of total creative serves in video realtime reporting.
        VideoRealTimeCreativeServes = 139,
        /// The number of errors of type 100 in video realtime reporting.
        VideoRealTimeError100Count = 143,
        /// The number of errors of type 101 in video realtime reporting.
        VideoRealTimeError101Count = 144,
        /// The number of errors of type 102 in video realtime reporting.
        VideoRealTimeError102Count = 145,
        /// The number of errors of type 200 in video realtime reporting.
        VideoRealTimeError200Count = 146,
        /// The number of errors of type 201 in video realtime reporting.
        VideoRealTimeError201Count = 147,
        /// The number of errors of type 202 in video realtime reporting.
        VideoRealTimeError202Count = 148,
        /// The number of errors of type 203 in video realtime reporting.
        VideoRealTimeError203Count = 149,
        /// The number of errors of type 300 in video realtime reporting.
        VideoRealTimeError300Count = 150,
        /// The number of errors of type 301 in video realtime reporting.
        VideoRealTimeError301Count = 151,
        /// The number of errors of type 302 in video realtime reporting.
        VideoRealTimeError302Count = 152,
        /// The number of errors of type 303 in video realtime reporting.
        VideoRealTimeError303Count = 153,
        /// The number of errors of type 400 in video realtime reporting.
        VideoRealTimeError400Count = 154,
        /// The number of errors of type 401 in video realtime reporting.
        VideoRealTimeError401Count = 155,
        /// The number of errors of type 402 in video realtime reporting.
        VideoRealTimeError402Count = 156,
        /// The number of errors of type 403 in video realtime reporting.
        VideoRealTimeError403Count = 157,
        /// The number of errors of type 405 in video realtime reporting.
        VideoRealTimeError405Count = 158,
        /// The number of errors of type 406 in video realtime reporting.
        VideoRealTimeError406Count = 159,
        /// The number of errors of type 407 in video realtime reporting.
        VideoRealTimeError407Count = 160,
        /// The number of errors of type 408 in video realtime reporting.
        VideoRealTimeError408Count = 161,
        /// The number of errors of type 409 in video realtime reporting.
        VideoRealTimeError409Count = 162,
        /// The number of errors of type 410 in video realtime reporting.
        VideoRealTimeError410Count = 163,
        /// The number of errors of type 500 in video realtime reporting.
        VideoRealTimeError500Count = 164,
        /// The number of errors of type 501 in video realtime reporting.
        VideoRealTimeError501Count = 165,
        /// The number of errors of type 502 in video realtime reporting.
        VideoRealTimeError502Count = 166,
        /// The number of errors of type 503 in video realtime reporting.
        VideoRealTimeError503Count = 167,
        /// The number of errors of type 600 in video realtime reporting.
        VideoRealTimeError600Count = 168,
        /// The number of errors of type 601 in video realtime reporting.
        VideoRealTimeError601Count = 169,
        /// The number of errors of type 602 in video realtime reporting.
        VideoRealTimeError602Count = 170,
        /// The number of errors of type 603 in video realtime reporting.
        VideoRealTimeError603Count = 171,
        /// The number of errors of type 604 in video realtime reporting.
        VideoRealTimeError604Count = 172,
        /// The number of errors of type 900 in video realtime reporting.
        VideoRealTimeError900Count = 173,
        /// The number of errors of type 901 in video realtime reporting.
        VideoRealTimeError901Count = 174,
        /// The number of total impressions in video realtime reporting.
        VideoRealTimeImpressions = 138,
        /// The number of matched queries in video realtime reporting.
        VideoRealTimeMatchedQueries = 140,
        /// The number of all errors in video realtime reporting.
        VideoRealTimeTotalErrorCount = 175,
        /// The number of total queries in video realtime reporting.
        VideoRealTimeTotalQueries = 142,
        /// The number of unmatched queries in video realtime reporting.
        VideoRealTimeUnmatchedQueries = 141,
        /// Number of times that the publisher specified a video ad played
        /// automatically.
        VideoViewershipAutoPlays = 103,
        /// Average percentage of the video watched by users.
        VideoViewershipAverageViewRate = 104,
        /// Average time(seconds) users watched the video.
        VideoViewershipAverageViewTime = 105,
        /// Number of times that the publisher specified a video ad was clicked to
        /// play.
        VideoViewershipClickToPlays = 106,
        /// The number of times the video played to completion.
        VideoViewershipCompletes = 107,
        /// Percentage of times the video played to the end.
        VideoViewershipCompletionRate = 108,
        /// The number of engaged views: ad is viewed to completion or for 30s,
        /// whichever comes first.
        VideoViewershipEngagedViews = 109,
        /// The number of times the video played to 25% of its length.
        VideoViewershipFirstQuartiles = 110,
        /// The number of times the video reached its midpoint during play.
        VideoViewershipMidpoints = 111,
        /// The number of times a skip button is shown in video.
        VideoViewershipSkipButtonsShown = 112,
        /// The number of impressions where the video was played.
        VideoViewershipStarts = 113,
        /// The number of times the video played to 75% of its length.
        VideoViewershipThirdQuartiles = 114,
        /// The number of times an error occurred, such as a VAST redirect error, a
        /// video playback error, or an invalid response error.
        VideoViewershipTotalErrorCount = 115,
        /// The percentage of video error count.
        VideoViewershipTotalErrorRate = 94,
        /// Duration of the video creative.
        VideoViewershipVideoLength = 116,
        /// View-through rate represented as a percentage.
        VideoViewershipViewThroughRate = 117,
        /// The estimated net rate for yield groups or individual
        /// yield group partners.
        YieldGroupEstimatedCpm = 88,
        /// Total net revenue earned by a yield group, based upon the yield group
        /// estimated CPM and yield group impressions recorded.
        YieldGroupEstimatedRevenue = 87,
        /// Number of matched yield group requests where a yield partner delivered
        /// their ad to publisher inventory.
        YieldGroupImpressions = 85,
        /// Yield group Mediation fill rate indicating how often a network
        /// fills an ad request.
        YieldGroupMediationFillRate = 89,
        /// Total requests where a Mediation chain was served.
        YieldGroupMediationMatchedQueries = 86,
        /// The number of mediation chain passback across all channels.
        YieldGroupMediationPassbacks = 118,
        /// Revenue per thousand impressions based on data collected by Ad Manager
        /// from third-party ad network reports.
        YieldGroupMediationThirdPartyEcpm = 90,
    }
    impl Metric {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "METRIC_UNSPECIFIED",
                Self::ActiveViewAverageViewableTime => {
                    "ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME"
                }
                Self::ActiveViewEligibleImpressions => "ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS",
                Self::ActiveViewMeasurableImpressions => {
                    "ACTIVE_VIEW_MEASURABLE_IMPRESSIONS"
                }
                Self::ActiveViewMeasurableImpressionsRate => {
                    "ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE"
                }
                Self::ActiveViewViewableImpressions => "ACTIVE_VIEW_VIEWABLE_IMPRESSIONS",
                Self::ActiveViewViewableImpressionsRate => {
                    "ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE"
                }
                Self::AdsenseActiveViewAverageViewableTime => {
                    "ADSENSE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME"
                }
                Self::AdsenseActiveViewEligibleImpressions => {
                    "ADSENSE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS"
                }
                Self::AdsenseActiveViewMeasurableImpressions => {
                    "ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS"
                }
                Self::AdsenseActiveViewMeasurableImpressionsRate => {
                    "ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE"
                }
                Self::AdsenseActiveViewViewableImpressions => {
                    "ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS"
                }
                Self::AdsenseActiveViewViewableImpressionsRate => {
                    "ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE"
                }
                Self::AdsenseAverageEcpm => "ADSENSE_AVERAGE_ECPM",
                Self::AdsenseClicks => "ADSENSE_CLICKS",
                Self::AdsenseCtr => "ADSENSE_CTR",
                Self::AdsenseImpressions => "ADSENSE_IMPRESSIONS",
                Self::AdsensePercentClicks => "ADSENSE_PERCENT_CLICKS",
                Self::AdsensePercentImpressions => "ADSENSE_PERCENT_IMPRESSIONS",
                Self::AdsensePercentRevenue => "ADSENSE_PERCENT_REVENUE",
                Self::AdsensePercentRevenueWithoutCpd => {
                    "ADSENSE_PERCENT_REVENUE_WITHOUT_CPD"
                }
                Self::AdsenseResponsesServed => "ADSENSE_RESPONSES_SERVED",
                Self::AdsenseRevenue => "ADSENSE_REVENUE",
                Self::AdExchangeActiveViewAverageViewableTime => {
                    "AD_EXCHANGE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME"
                }
                Self::AdExchangeActiveViewEligibleImpressions => {
                    "AD_EXCHANGE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS"
                }
                Self::AdExchangeActiveViewMeasurableImpressions => {
                    "AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS"
                }
                Self::AdExchangeActiveViewMeasurableImpressionsRate => {
                    "AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE"
                }
                Self::AdExchangeActiveViewViewableImpressions => {
                    "AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS"
                }
                Self::AdExchangeActiveViewViewableImpressionsRate => {
                    "AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE"
                }
                Self::AdExchangeAverageEcpm => "AD_EXCHANGE_AVERAGE_ECPM",
                Self::AdExchangeClicks => "AD_EXCHANGE_CLICKS",
                Self::AdExchangeCtr => "AD_EXCHANGE_CTR",
                Self::AdExchangeImpressions => "AD_EXCHANGE_IMPRESSIONS",
                Self::AdExchangePercentClicks => "AD_EXCHANGE_PERCENT_CLICKS",
                Self::AdExchangePercentImpressions => "AD_EXCHANGE_PERCENT_IMPRESSIONS",
                Self::AdExchangePercentRevenue => "AD_EXCHANGE_PERCENT_REVENUE",
                Self::AdExchangePercentRevenueWithoutCpd => {
                    "AD_EXCHANGE_PERCENT_REVENUE_WITHOUT_CPD"
                }
                Self::AdExchangeResponsesServed => "AD_EXCHANGE_RESPONSES_SERVED",
                Self::AdExchangeRevenue => "AD_EXCHANGE_REVENUE",
                Self::AdRequests => "AD_REQUESTS",
                Self::AdServerActiveViewAverageViewableTime => {
                    "AD_SERVER_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME"
                }
                Self::AdServerActiveViewEligibleImpressions => {
                    "AD_SERVER_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS"
                }
                Self::AdServerActiveViewMeasurableImpressions => {
                    "AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS"
                }
                Self::AdServerActiveViewMeasurableImpressionsRate => {
                    "AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE"
                }
                Self::AdServerActiveViewViewableImpressions => {
                    "AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS"
                }
                Self::AdServerActiveViewViewableImpressionsRate => {
                    "AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE"
                }
                Self::AdServerAverageEcpm => "AD_SERVER_AVERAGE_ECPM",
                Self::AdServerAverageEcpmWithoutCpd => {
                    "AD_SERVER_AVERAGE_ECPM_WITHOUT_CPD"
                }
                Self::AdServerClicks => "AD_SERVER_CLICKS",
                Self::AdServerCpdRevenue => "AD_SERVER_CPD_REVENUE",
                Self::AdServerCtr => "AD_SERVER_CTR",
                Self::AdServerImpressions => "AD_SERVER_IMPRESSIONS",
                Self::AdServerPercentClicks => "AD_SERVER_PERCENT_CLICKS",
                Self::AdServerPercentImpressions => "AD_SERVER_PERCENT_IMPRESSIONS",
                Self::AdServerPercentRevenue => "AD_SERVER_PERCENT_REVENUE",
                Self::AdServerPercentRevenueWithoutCpd => {
                    "AD_SERVER_PERCENT_REVENUE_WITHOUT_CPD"
                }
                Self::AdServerResponsesServed => "AD_SERVER_RESPONSES_SERVED",
                Self::AdServerRevenue => "AD_SERVER_REVENUE",
                Self::AdServerRevenueWithoutCpd => "AD_SERVER_REVENUE_WITHOUT_CPD",
                Self::AuctionsWon => "AUCTIONS_WON",
                Self::AverageEcpm => "AVERAGE_ECPM",
                Self::AverageEcpmWithoutCpd => "AVERAGE_ECPM_WITHOUT_CPD",
                Self::Bids => "BIDS",
                Self::BidsInAuction => "BIDS_IN_AUCTION",
                Self::Callouts => "CALLOUTS",
                Self::Clicks => "CLICKS",
                Self::CodeServedCount => "CODE_SERVED_COUNT",
                Self::Ctr => "CTR",
                Self::GoogleSoldAuctionCoviewedImpressions => {
                    "GOOGLE_SOLD_AUCTION_COVIEWED_IMPRESSIONS"
                }
                Self::GoogleSoldAuctionImpressions => "GOOGLE_SOLD_AUCTION_IMPRESSIONS",
                Self::GoogleSoldCoviewedImpressions => "GOOGLE_SOLD_COVIEWED_IMPRESSIONS",
                Self::GoogleSoldImpressions => "GOOGLE_SOLD_IMPRESSIONS",
                Self::GoogleSoldReservationCoviewedImpressions => {
                    "GOOGLE_SOLD_RESERVATION_COVIEWED_IMPRESSIONS"
                }
                Self::GoogleSoldReservationImpressions => {
                    "GOOGLE_SOLD_RESERVATION_IMPRESSIONS"
                }
                Self::Impressions => "IMPRESSIONS",
                Self::PartnerSalesFilledPodRequests => {
                    "PARTNER_SALES_FILLED_POD_REQUESTS"
                }
                Self::PartnerSalesFillRate => "PARTNER_SALES_FILL_RATE",
                Self::PartnerSalesPartnerMatchRate => "PARTNER_SALES_PARTNER_MATCH_RATE",
                Self::PartnerSalesQueries => "PARTNER_SALES_QUERIES",
                Self::PartnerSalesUnfilledImpressions => {
                    "PARTNER_SALES_UNFILLED_IMPRESSIONS"
                }
                Self::PartnerSalesUnmatchedQueries => "PARTNER_SALES_UNMATCHED_QUERIES",
                Self::PartnerSoldCodeServed => "PARTNER_SOLD_CODE_SERVED",
                Self::PartnerSoldCoviewedImpressions => {
                    "PARTNER_SOLD_COVIEWED_IMPRESSIONS"
                }
                Self::PartnerSoldImpressions => "PARTNER_SOLD_IMPRESSIONS",
                Self::ProgrammaticEligibleAdRequests => {
                    "PROGRAMMATIC_ELIGIBLE_AD_REQUESTS"
                }
                Self::ProgrammaticMatchRate => "PROGRAMMATIC_MATCH_RATE",
                Self::ProgrammaticResponsesServed => "PROGRAMMATIC_RESPONSES_SERVED",
                Self::ResponsesServed => "RESPONSES_SERVED",
                Self::Revenue => "REVENUE",
                Self::RevenueWithoutCpd => "REVENUE_WITHOUT_CPD",
                Self::SuccessfulResponses => "SUCCESSFUL_RESPONSES",
                Self::UnfilledImpressions => "UNFILLED_IMPRESSIONS",
                Self::UnmatchedAdRequests => "UNMATCHED_AD_REQUESTS",
                Self::UserMessagesOfferwallMessagesShown => {
                    "USER_MESSAGES_OFFERWALL_MESSAGES_SHOWN"
                }
                Self::UserMessagesOfferwallSuccessfulEngagements => {
                    "USER_MESSAGES_OFFERWALL_SUCCESSFUL_ENGAGEMENTS"
                }
                Self::VideoInteractionAverageInteractionRate => {
                    "VIDEO_INTERACTION_AVERAGE_INTERACTION_RATE"
                }
                Self::VideoInteractionCollapses => "VIDEO_INTERACTION_COLLAPSES",
                Self::VideoInteractionExpands => "VIDEO_INTERACTION_EXPANDS",
                Self::VideoInteractionFullScreens => "VIDEO_INTERACTION_FULL_SCREENS",
                Self::VideoInteractionMutes => "VIDEO_INTERACTION_MUTES",
                Self::VideoInteractionPauses => "VIDEO_INTERACTION_PAUSES",
                Self::VideoInteractionResumes => "VIDEO_INTERACTION_RESUMES",
                Self::VideoInteractionRewinds => "VIDEO_INTERACTION_REWINDS",
                Self::VideoInteractionUnmutes => "VIDEO_INTERACTION_UNMUTES",
                Self::VideoInteractionVideoSkips => "VIDEO_INTERACTION_VIDEO_SKIPS",
                Self::VideoRealTimeCreativeServes => "VIDEO_REAL_TIME_CREATIVE_SERVES",
                Self::VideoRealTimeError100Count => "VIDEO_REAL_TIME_ERROR_100_COUNT",
                Self::VideoRealTimeError101Count => "VIDEO_REAL_TIME_ERROR_101_COUNT",
                Self::VideoRealTimeError102Count => "VIDEO_REAL_TIME_ERROR_102_COUNT",
                Self::VideoRealTimeError200Count => "VIDEO_REAL_TIME_ERROR_200_COUNT",
                Self::VideoRealTimeError201Count => "VIDEO_REAL_TIME_ERROR_201_COUNT",
                Self::VideoRealTimeError202Count => "VIDEO_REAL_TIME_ERROR_202_COUNT",
                Self::VideoRealTimeError203Count => "VIDEO_REAL_TIME_ERROR_203_COUNT",
                Self::VideoRealTimeError300Count => "VIDEO_REAL_TIME_ERROR_300_COUNT",
                Self::VideoRealTimeError301Count => "VIDEO_REAL_TIME_ERROR_301_COUNT",
                Self::VideoRealTimeError302Count => "VIDEO_REAL_TIME_ERROR_302_COUNT",
                Self::VideoRealTimeError303Count => "VIDEO_REAL_TIME_ERROR_303_COUNT",
                Self::VideoRealTimeError400Count => "VIDEO_REAL_TIME_ERROR_400_COUNT",
                Self::VideoRealTimeError401Count => "VIDEO_REAL_TIME_ERROR_401_COUNT",
                Self::VideoRealTimeError402Count => "VIDEO_REAL_TIME_ERROR_402_COUNT",
                Self::VideoRealTimeError403Count => "VIDEO_REAL_TIME_ERROR_403_COUNT",
                Self::VideoRealTimeError405Count => "VIDEO_REAL_TIME_ERROR_405_COUNT",
                Self::VideoRealTimeError406Count => "VIDEO_REAL_TIME_ERROR_406_COUNT",
                Self::VideoRealTimeError407Count => "VIDEO_REAL_TIME_ERROR_407_COUNT",
                Self::VideoRealTimeError408Count => "VIDEO_REAL_TIME_ERROR_408_COUNT",
                Self::VideoRealTimeError409Count => "VIDEO_REAL_TIME_ERROR_409_COUNT",
                Self::VideoRealTimeError410Count => "VIDEO_REAL_TIME_ERROR_410_COUNT",
                Self::VideoRealTimeError500Count => "VIDEO_REAL_TIME_ERROR_500_COUNT",
                Self::VideoRealTimeError501Count => "VIDEO_REAL_TIME_ERROR_501_COUNT",
                Self::VideoRealTimeError502Count => "VIDEO_REAL_TIME_ERROR_502_COUNT",
                Self::VideoRealTimeError503Count => "VIDEO_REAL_TIME_ERROR_503_COUNT",
                Self::VideoRealTimeError600Count => "VIDEO_REAL_TIME_ERROR_600_COUNT",
                Self::VideoRealTimeError601Count => "VIDEO_REAL_TIME_ERROR_601_COUNT",
                Self::VideoRealTimeError602Count => "VIDEO_REAL_TIME_ERROR_602_COUNT",
                Self::VideoRealTimeError603Count => "VIDEO_REAL_TIME_ERROR_603_COUNT",
                Self::VideoRealTimeError604Count => "VIDEO_REAL_TIME_ERROR_604_COUNT",
                Self::VideoRealTimeError900Count => "VIDEO_REAL_TIME_ERROR_900_COUNT",
                Self::VideoRealTimeError901Count => "VIDEO_REAL_TIME_ERROR_901_COUNT",
                Self::VideoRealTimeImpressions => "VIDEO_REAL_TIME_IMPRESSIONS",
                Self::VideoRealTimeMatchedQueries => "VIDEO_REAL_TIME_MATCHED_QUERIES",
                Self::VideoRealTimeTotalErrorCount => "VIDEO_REAL_TIME_TOTAL_ERROR_COUNT",
                Self::VideoRealTimeTotalQueries => "VIDEO_REAL_TIME_TOTAL_QUERIES",
                Self::VideoRealTimeUnmatchedQueries => {
                    "VIDEO_REAL_TIME_UNMATCHED_QUERIES"
                }
                Self::VideoViewershipAutoPlays => "VIDEO_VIEWERSHIP_AUTO_PLAYS",
                Self::VideoViewershipAverageViewRate => {
                    "VIDEO_VIEWERSHIP_AVERAGE_VIEW_RATE"
                }
                Self::VideoViewershipAverageViewTime => {
                    "VIDEO_VIEWERSHIP_AVERAGE_VIEW_TIME"
                }
                Self::VideoViewershipClickToPlays => "VIDEO_VIEWERSHIP_CLICK_TO_PLAYS",
                Self::VideoViewershipCompletes => "VIDEO_VIEWERSHIP_COMPLETES",
                Self::VideoViewershipCompletionRate => "VIDEO_VIEWERSHIP_COMPLETION_RATE",
                Self::VideoViewershipEngagedViews => "VIDEO_VIEWERSHIP_ENGAGED_VIEWS",
                Self::VideoViewershipFirstQuartiles => "VIDEO_VIEWERSHIP_FIRST_QUARTILES",
                Self::VideoViewershipMidpoints => "VIDEO_VIEWERSHIP_MIDPOINTS",
                Self::VideoViewershipSkipButtonsShown => {
                    "VIDEO_VIEWERSHIP_SKIP_BUTTONS_SHOWN"
                }
                Self::VideoViewershipStarts => "VIDEO_VIEWERSHIP_STARTS",
                Self::VideoViewershipThirdQuartiles => "VIDEO_VIEWERSHIP_THIRD_QUARTILES",
                Self::VideoViewershipTotalErrorCount => {
                    "VIDEO_VIEWERSHIP_TOTAL_ERROR_COUNT"
                }
                Self::VideoViewershipTotalErrorRate => {
                    "VIDEO_VIEWERSHIP_TOTAL_ERROR_RATE"
                }
                Self::VideoViewershipVideoLength => "VIDEO_VIEWERSHIP_VIDEO_LENGTH",
                Self::VideoViewershipViewThroughRate => {
                    "VIDEO_VIEWERSHIP_VIEW_THROUGH_RATE"
                }
                Self::YieldGroupEstimatedCpm => "YIELD_GROUP_ESTIMATED_CPM",
                Self::YieldGroupEstimatedRevenue => "YIELD_GROUP_ESTIMATED_REVENUE",
                Self::YieldGroupImpressions => "YIELD_GROUP_IMPRESSIONS",
                Self::YieldGroupMediationFillRate => "YIELD_GROUP_MEDIATION_FILL_RATE",
                Self::YieldGroupMediationMatchedQueries => {
                    "YIELD_GROUP_MEDIATION_MATCHED_QUERIES"
                }
                Self::YieldGroupMediationPassbacks => "YIELD_GROUP_MEDIATION_PASSBACKS",
                Self::YieldGroupMediationThirdPartyEcpm => {
                    "YIELD_GROUP_MEDIATION_THIRD_PARTY_ECPM"
                }
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "METRIC_UNSPECIFIED" => Some(Self::Unspecified),
                "ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME" => {
                    Some(Self::ActiveViewAverageViewableTime)
                }
                "ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS" => {
                    Some(Self::ActiveViewEligibleImpressions)
                }
                "ACTIVE_VIEW_MEASURABLE_IMPRESSIONS" => {
                    Some(Self::ActiveViewMeasurableImpressions)
                }
                "ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE" => {
                    Some(Self::ActiveViewMeasurableImpressionsRate)
                }
                "ACTIVE_VIEW_VIEWABLE_IMPRESSIONS" => {
                    Some(Self::ActiveViewViewableImpressions)
                }
                "ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE" => {
                    Some(Self::ActiveViewViewableImpressionsRate)
                }
                "ADSENSE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME" => {
                    Some(Self::AdsenseActiveViewAverageViewableTime)
                }
                "ADSENSE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS" => {
                    Some(Self::AdsenseActiveViewEligibleImpressions)
                }
                "ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS" => {
                    Some(Self::AdsenseActiveViewMeasurableImpressions)
                }
                "ADSENSE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE" => {
                    Some(Self::AdsenseActiveViewMeasurableImpressionsRate)
                }
                "ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS" => {
                    Some(Self::AdsenseActiveViewViewableImpressions)
                }
                "ADSENSE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE" => {
                    Some(Self::AdsenseActiveViewViewableImpressionsRate)
                }
                "ADSENSE_AVERAGE_ECPM" => Some(Self::AdsenseAverageEcpm),
                "ADSENSE_CLICKS" => Some(Self::AdsenseClicks),
                "ADSENSE_CTR" => Some(Self::AdsenseCtr),
                "ADSENSE_IMPRESSIONS" => Some(Self::AdsenseImpressions),
                "ADSENSE_PERCENT_CLICKS" => Some(Self::AdsensePercentClicks),
                "ADSENSE_PERCENT_IMPRESSIONS" => Some(Self::AdsensePercentImpressions),
                "ADSENSE_PERCENT_REVENUE" => Some(Self::AdsensePercentRevenue),
                "ADSENSE_PERCENT_REVENUE_WITHOUT_CPD" => {
                    Some(Self::AdsensePercentRevenueWithoutCpd)
                }
                "ADSENSE_RESPONSES_SERVED" => Some(Self::AdsenseResponsesServed),
                "ADSENSE_REVENUE" => Some(Self::AdsenseRevenue),
                "AD_EXCHANGE_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME" => {
                    Some(Self::AdExchangeActiveViewAverageViewableTime)
                }
                "AD_EXCHANGE_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS" => {
                    Some(Self::AdExchangeActiveViewEligibleImpressions)
                }
                "AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS" => {
                    Some(Self::AdExchangeActiveViewMeasurableImpressions)
                }
                "AD_EXCHANGE_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE" => {
                    Some(Self::AdExchangeActiveViewMeasurableImpressionsRate)
                }
                "AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS" => {
                    Some(Self::AdExchangeActiveViewViewableImpressions)
                }
                "AD_EXCHANGE_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE" => {
                    Some(Self::AdExchangeActiveViewViewableImpressionsRate)
                }
                "AD_EXCHANGE_AVERAGE_ECPM" => Some(Self::AdExchangeAverageEcpm),
                "AD_EXCHANGE_CLICKS" => Some(Self::AdExchangeClicks),
                "AD_EXCHANGE_CTR" => Some(Self::AdExchangeCtr),
                "AD_EXCHANGE_IMPRESSIONS" => Some(Self::AdExchangeImpressions),
                "AD_EXCHANGE_PERCENT_CLICKS" => Some(Self::AdExchangePercentClicks),
                "AD_EXCHANGE_PERCENT_IMPRESSIONS" => {
                    Some(Self::AdExchangePercentImpressions)
                }
                "AD_EXCHANGE_PERCENT_REVENUE" => Some(Self::AdExchangePercentRevenue),
                "AD_EXCHANGE_PERCENT_REVENUE_WITHOUT_CPD" => {
                    Some(Self::AdExchangePercentRevenueWithoutCpd)
                }
                "AD_EXCHANGE_RESPONSES_SERVED" => Some(Self::AdExchangeResponsesServed),
                "AD_EXCHANGE_REVENUE" => Some(Self::AdExchangeRevenue),
                "AD_REQUESTS" => Some(Self::AdRequests),
                "AD_SERVER_ACTIVE_VIEW_AVERAGE_VIEWABLE_TIME" => {
                    Some(Self::AdServerActiveViewAverageViewableTime)
                }
                "AD_SERVER_ACTIVE_VIEW_ELIGIBLE_IMPRESSIONS" => {
                    Some(Self::AdServerActiveViewEligibleImpressions)
                }
                "AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS" => {
                    Some(Self::AdServerActiveViewMeasurableImpressions)
                }
                "AD_SERVER_ACTIVE_VIEW_MEASURABLE_IMPRESSIONS_RATE" => {
                    Some(Self::AdServerActiveViewMeasurableImpressionsRate)
                }
                "AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS" => {
                    Some(Self::AdServerActiveViewViewableImpressions)
                }
                "AD_SERVER_ACTIVE_VIEW_VIEWABLE_IMPRESSIONS_RATE" => {
                    Some(Self::AdServerActiveViewViewableImpressionsRate)
                }
                "AD_SERVER_AVERAGE_ECPM" => Some(Self::AdServerAverageEcpm),
                "AD_SERVER_AVERAGE_ECPM_WITHOUT_CPD" => {
                    Some(Self::AdServerAverageEcpmWithoutCpd)
                }
                "AD_SERVER_CLICKS" => Some(Self::AdServerClicks),
                "AD_SERVER_CPD_REVENUE" => Some(Self::AdServerCpdRevenue),
                "AD_SERVER_CTR" => Some(Self::AdServerCtr),
                "AD_SERVER_IMPRESSIONS" => Some(Self::AdServerImpressions),
                "AD_SERVER_PERCENT_CLICKS" => Some(Self::AdServerPercentClicks),
                "AD_SERVER_PERCENT_IMPRESSIONS" => Some(Self::AdServerPercentImpressions),
                "AD_SERVER_PERCENT_REVENUE" => Some(Self::AdServerPercentRevenue),
                "AD_SERVER_PERCENT_REVENUE_WITHOUT_CPD" => {
                    Some(Self::AdServerPercentRevenueWithoutCpd)
                }
                "AD_SERVER_RESPONSES_SERVED" => Some(Self::AdServerResponsesServed),
                "AD_SERVER_REVENUE" => Some(Self::AdServerRevenue),
                "AD_SERVER_REVENUE_WITHOUT_CPD" => Some(Self::AdServerRevenueWithoutCpd),
                "AUCTIONS_WON" => Some(Self::AuctionsWon),
                "AVERAGE_ECPM" => Some(Self::AverageEcpm),
                "AVERAGE_ECPM_WITHOUT_CPD" => Some(Self::AverageEcpmWithoutCpd),
                "BIDS" => Some(Self::Bids),
                "BIDS_IN_AUCTION" => Some(Self::BidsInAuction),
                "CALLOUTS" => Some(Self::Callouts),
                "CLICKS" => Some(Self::Clicks),
                "CODE_SERVED_COUNT" => Some(Self::CodeServedCount),
                "CTR" => Some(Self::Ctr),
                "GOOGLE_SOLD_AUCTION_COVIEWED_IMPRESSIONS" => {
                    Some(Self::GoogleSoldAuctionCoviewedImpressions)
                }
                "GOOGLE_SOLD_AUCTION_IMPRESSIONS" => {
                    Some(Self::GoogleSoldAuctionImpressions)
                }
                "GOOGLE_SOLD_COVIEWED_IMPRESSIONS" => {
                    Some(Self::GoogleSoldCoviewedImpressions)
                }
                "GOOGLE_SOLD_IMPRESSIONS" => Some(Self::GoogleSoldImpressions),
                "GOOGLE_SOLD_RESERVATION_COVIEWED_IMPRESSIONS" => {
                    Some(Self::GoogleSoldReservationCoviewedImpressions)
                }
                "GOOGLE_SOLD_RESERVATION_IMPRESSIONS" => {
                    Some(Self::GoogleSoldReservationImpressions)
                }
                "IMPRESSIONS" => Some(Self::Impressions),
                "PARTNER_SALES_FILLED_POD_REQUESTS" => {
                    Some(Self::PartnerSalesFilledPodRequests)
                }
                "PARTNER_SALES_FILL_RATE" => Some(Self::PartnerSalesFillRate),
                "PARTNER_SALES_PARTNER_MATCH_RATE" => {
                    Some(Self::PartnerSalesPartnerMatchRate)
                }
                "PARTNER_SALES_QUERIES" => Some(Self::PartnerSalesQueries),
                "PARTNER_SALES_UNFILLED_IMPRESSIONS" => {
                    Some(Self::PartnerSalesUnfilledImpressions)
                }
                "PARTNER_SALES_UNMATCHED_QUERIES" => {
                    Some(Self::PartnerSalesUnmatchedQueries)
                }
                "PARTNER_SOLD_CODE_SERVED" => Some(Self::PartnerSoldCodeServed),
                "PARTNER_SOLD_COVIEWED_IMPRESSIONS" => {
                    Some(Self::PartnerSoldCoviewedImpressions)
                }
                "PARTNER_SOLD_IMPRESSIONS" => Some(Self::PartnerSoldImpressions),
                "PROGRAMMATIC_ELIGIBLE_AD_REQUESTS" => {
                    Some(Self::ProgrammaticEligibleAdRequests)
                }
                "PROGRAMMATIC_MATCH_RATE" => Some(Self::ProgrammaticMatchRate),
                "PROGRAMMATIC_RESPONSES_SERVED" => {
                    Some(Self::ProgrammaticResponsesServed)
                }
                "RESPONSES_SERVED" => Some(Self::ResponsesServed),
                "REVENUE" => Some(Self::Revenue),
                "REVENUE_WITHOUT_CPD" => Some(Self::RevenueWithoutCpd),
                "SUCCESSFUL_RESPONSES" => Some(Self::SuccessfulResponses),
                "UNFILLED_IMPRESSIONS" => Some(Self::UnfilledImpressions),
                "UNMATCHED_AD_REQUESTS" => Some(Self::UnmatchedAdRequests),
                "USER_MESSAGES_OFFERWALL_MESSAGES_SHOWN" => {
                    Some(Self::UserMessagesOfferwallMessagesShown)
                }
                "USER_MESSAGES_OFFERWALL_SUCCESSFUL_ENGAGEMENTS" => {
                    Some(Self::UserMessagesOfferwallSuccessfulEngagements)
                }
                "VIDEO_INTERACTION_AVERAGE_INTERACTION_RATE" => {
                    Some(Self::VideoInteractionAverageInteractionRate)
                }
                "VIDEO_INTERACTION_COLLAPSES" => Some(Self::VideoInteractionCollapses),
                "VIDEO_INTERACTION_EXPANDS" => Some(Self::VideoInteractionExpands),
                "VIDEO_INTERACTION_FULL_SCREENS" => {
                    Some(Self::VideoInteractionFullScreens)
                }
                "VIDEO_INTERACTION_MUTES" => Some(Self::VideoInteractionMutes),
                "VIDEO_INTERACTION_PAUSES" => Some(Self::VideoInteractionPauses),
                "VIDEO_INTERACTION_RESUMES" => Some(Self::VideoInteractionResumes),
                "VIDEO_INTERACTION_REWINDS" => Some(Self::VideoInteractionRewinds),
                "VIDEO_INTERACTION_UNMUTES" => Some(Self::VideoInteractionUnmutes),
                "VIDEO_INTERACTION_VIDEO_SKIPS" => Some(Self::VideoInteractionVideoSkips),
                "VIDEO_REAL_TIME_CREATIVE_SERVES" => {
                    Some(Self::VideoRealTimeCreativeServes)
                }
                "VIDEO_REAL_TIME_ERROR_100_COUNT" => {
                    Some(Self::VideoRealTimeError100Count)
                }
                "VIDEO_REAL_TIME_ERROR_101_COUNT" => {
                    Some(Self::VideoRealTimeError101Count)
                }
                "VIDEO_REAL_TIME_ERROR_102_COUNT" => {
                    Some(Self::VideoRealTimeError102Count)
                }
                "VIDEO_REAL_TIME_ERROR_200_COUNT" => {
                    Some(Self::VideoRealTimeError200Count)
                }
                "VIDEO_REAL_TIME_ERROR_201_COUNT" => {
                    Some(Self::VideoRealTimeError201Count)
                }
                "VIDEO_REAL_TIME_ERROR_202_COUNT" => {
                    Some(Self::VideoRealTimeError202Count)
                }
                "VIDEO_REAL_TIME_ERROR_203_COUNT" => {
                    Some(Self::VideoRealTimeError203Count)
                }
                "VIDEO_REAL_TIME_ERROR_300_COUNT" => {
                    Some(Self::VideoRealTimeError300Count)
                }
                "VIDEO_REAL_TIME_ERROR_301_COUNT" => {
                    Some(Self::VideoRealTimeError301Count)
                }
                "VIDEO_REAL_TIME_ERROR_302_COUNT" => {
                    Some(Self::VideoRealTimeError302Count)
                }
                "VIDEO_REAL_TIME_ERROR_303_COUNT" => {
                    Some(Self::VideoRealTimeError303Count)
                }
                "VIDEO_REAL_TIME_ERROR_400_COUNT" => {
                    Some(Self::VideoRealTimeError400Count)
                }
                "VIDEO_REAL_TIME_ERROR_401_COUNT" => {
                    Some(Self::VideoRealTimeError401Count)
                }
                "VIDEO_REAL_TIME_ERROR_402_COUNT" => {
                    Some(Self::VideoRealTimeError402Count)
                }
                "VIDEO_REAL_TIME_ERROR_403_COUNT" => {
                    Some(Self::VideoRealTimeError403Count)
                }
                "VIDEO_REAL_TIME_ERROR_405_COUNT" => {
                    Some(Self::VideoRealTimeError405Count)
                }
                "VIDEO_REAL_TIME_ERROR_406_COUNT" => {
                    Some(Self::VideoRealTimeError406Count)
                }
                "VIDEO_REAL_TIME_ERROR_407_COUNT" => {
                    Some(Self::VideoRealTimeError407Count)
                }
                "VIDEO_REAL_TIME_ERROR_408_COUNT" => {
                    Some(Self::VideoRealTimeError408Count)
                }
                "VIDEO_REAL_TIME_ERROR_409_COUNT" => {
                    Some(Self::VideoRealTimeError409Count)
                }
                "VIDEO_REAL_TIME_ERROR_410_COUNT" => {
                    Some(Self::VideoRealTimeError410Count)
                }
                "VIDEO_REAL_TIME_ERROR_500_COUNT" => {
                    Some(Self::VideoRealTimeError500Count)
                }
                "VIDEO_REAL_TIME_ERROR_501_COUNT" => {
                    Some(Self::VideoRealTimeError501Count)
                }
                "VIDEO_REAL_TIME_ERROR_502_COUNT" => {
                    Some(Self::VideoRealTimeError502Count)
                }
                "VIDEO_REAL_TIME_ERROR_503_COUNT" => {
                    Some(Self::VideoRealTimeError503Count)
                }
                "VIDEO_REAL_TIME_ERROR_600_COUNT" => {
                    Some(Self::VideoRealTimeError600Count)
                }
                "VIDEO_REAL_TIME_ERROR_601_COUNT" => {
                    Some(Self::VideoRealTimeError601Count)
                }
                "VIDEO_REAL_TIME_ERROR_602_COUNT" => {
                    Some(Self::VideoRealTimeError602Count)
                }
                "VIDEO_REAL_TIME_ERROR_603_COUNT" => {
                    Some(Self::VideoRealTimeError603Count)
                }
                "VIDEO_REAL_TIME_ERROR_604_COUNT" => {
                    Some(Self::VideoRealTimeError604Count)
                }
                "VIDEO_REAL_TIME_ERROR_900_COUNT" => {
                    Some(Self::VideoRealTimeError900Count)
                }
                "VIDEO_REAL_TIME_ERROR_901_COUNT" => {
                    Some(Self::VideoRealTimeError901Count)
                }
                "VIDEO_REAL_TIME_IMPRESSIONS" => Some(Self::VideoRealTimeImpressions),
                "VIDEO_REAL_TIME_MATCHED_QUERIES" => {
                    Some(Self::VideoRealTimeMatchedQueries)
                }
                "VIDEO_REAL_TIME_TOTAL_ERROR_COUNT" => {
                    Some(Self::VideoRealTimeTotalErrorCount)
                }
                "VIDEO_REAL_TIME_TOTAL_QUERIES" => Some(Self::VideoRealTimeTotalQueries),
                "VIDEO_REAL_TIME_UNMATCHED_QUERIES" => {
                    Some(Self::VideoRealTimeUnmatchedQueries)
                }
                "VIDEO_VIEWERSHIP_AUTO_PLAYS" => Some(Self::VideoViewershipAutoPlays),
                "VIDEO_VIEWERSHIP_AVERAGE_VIEW_RATE" => {
                    Some(Self::VideoViewershipAverageViewRate)
                }
                "VIDEO_VIEWERSHIP_AVERAGE_VIEW_TIME" => {
                    Some(Self::VideoViewershipAverageViewTime)
                }
                "VIDEO_VIEWERSHIP_CLICK_TO_PLAYS" => {
                    Some(Self::VideoViewershipClickToPlays)
                }
                "VIDEO_VIEWERSHIP_COMPLETES" => Some(Self::VideoViewershipCompletes),
                "VIDEO_VIEWERSHIP_COMPLETION_RATE" => {
                    Some(Self::VideoViewershipCompletionRate)
                }
                "VIDEO_VIEWERSHIP_ENGAGED_VIEWS" => {
                    Some(Self::VideoViewershipEngagedViews)
                }
                "VIDEO_VIEWERSHIP_FIRST_QUARTILES" => {
                    Some(Self::VideoViewershipFirstQuartiles)
                }
                "VIDEO_VIEWERSHIP_MIDPOINTS" => Some(Self::VideoViewershipMidpoints),
                "VIDEO_VIEWERSHIP_SKIP_BUTTONS_SHOWN" => {
                    Some(Self::VideoViewershipSkipButtonsShown)
                }
                "VIDEO_VIEWERSHIP_STARTS" => Some(Self::VideoViewershipStarts),
                "VIDEO_VIEWERSHIP_THIRD_QUARTILES" => {
                    Some(Self::VideoViewershipThirdQuartiles)
                }
                "VIDEO_VIEWERSHIP_TOTAL_ERROR_COUNT" => {
                    Some(Self::VideoViewershipTotalErrorCount)
                }
                "VIDEO_VIEWERSHIP_TOTAL_ERROR_RATE" => {
                    Some(Self::VideoViewershipTotalErrorRate)
                }
                "VIDEO_VIEWERSHIP_VIDEO_LENGTH" => Some(Self::VideoViewershipVideoLength),
                "VIDEO_VIEWERSHIP_VIEW_THROUGH_RATE" => {
                    Some(Self::VideoViewershipViewThroughRate)
                }
                "YIELD_GROUP_ESTIMATED_CPM" => Some(Self::YieldGroupEstimatedCpm),
                "YIELD_GROUP_ESTIMATED_REVENUE" => Some(Self::YieldGroupEstimatedRevenue),
                "YIELD_GROUP_IMPRESSIONS" => Some(Self::YieldGroupImpressions),
                "YIELD_GROUP_MEDIATION_FILL_RATE" => {
                    Some(Self::YieldGroupMediationFillRate)
                }
                "YIELD_GROUP_MEDIATION_MATCHED_QUERIES" => {
                    Some(Self::YieldGroupMediationMatchedQueries)
                }
                "YIELD_GROUP_MEDIATION_PASSBACKS" => {
                    Some(Self::YieldGroupMediationPassbacks)
                }
                "YIELD_GROUP_MEDIATION_THIRD_PARTY_ECPM" => {
                    Some(Self::YieldGroupMediationThirdPartyEcpm)
                }
                _ => None,
            }
        }
    }
    /// Possible metric value types to add.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum MetricValueType {
        /// The values for the primary date_range.
        Primary = 0,
        /// Each metrics' percent of the total for the primary date_range.
        PrimaryPercentOfTotal = 1,
        /// The values for the comparison_date_range.
        Comparison = 2,
        /// Each metrics' percent of the total for the comparison_date_range.
        ComparisonPercentOfTotal = 3,
        /// The absolute change between the primary and comparison date ranges.
        AbsoluteChange = 4,
        /// The relative change between the primary and comparison date ranges.
        RelativeChange = 5,
    }
    impl MetricValueType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Primary => "PRIMARY",
                Self::PrimaryPercentOfTotal => "PRIMARY_PERCENT_OF_TOTAL",
                Self::Comparison => "COMPARISON",
                Self::ComparisonPercentOfTotal => "COMPARISON_PERCENT_OF_TOTAL",
                Self::AbsoluteChange => "ABSOLUTE_CHANGE",
                Self::RelativeChange => "RELATIVE_CHANGE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "PRIMARY" => Some(Self::Primary),
                "PRIMARY_PERCENT_OF_TOTAL" => Some(Self::PrimaryPercentOfTotal),
                "COMPARISON" => Some(Self::Comparison),
                "COMPARISON_PERCENT_OF_TOTAL" => Some(Self::ComparisonPercentOfTotal),
                "ABSOLUTE_CHANGE" => Some(Self::AbsoluteChange),
                "RELATIVE_CHANGE" => Some(Self::RelativeChange),
                _ => None,
            }
        }
    }
    /// Supported report types.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ReportType {
        /// Default value. This value is unused.
        Unspecified = 0,
        /// Historical.
        Historical = 1,
    }
    impl ReportType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "REPORT_TYPE_UNSPECIFIED",
                Self::Historical => "HISTORICAL",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "REPORT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "HISTORICAL" => Some(Self::Historical),
                _ => None,
            }
        }
    }
    /// The visibility of a report.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Visibility {
        /// Default value. Reports with hidden visibility will not appear in the Ad
        /// Manager UI.
        Hidden = 0,
        /// Reports with draft visibility will appear in the Ad Manager UI only if
        /// the user has configured the UI to show them.
        Draft = 1,
        /// Reports with saved visibility will appear in the Ad Manager UI by
        /// default.
        Saved = 2,
    }
    impl Visibility {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Hidden => "HIDDEN",
                Self::Draft => "DRAFT",
                Self::Saved => "SAVED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "HIDDEN" => Some(Self::Hidden),
                "DRAFT" => Some(Self::Draft),
                "SAVED" => Some(Self::Saved),
                _ => None,
            }
        }
    }
}
/// Request message for a running a report.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunReportRequest {
    /// Required. The report to run.
    /// Format: `networks/{network_code}/reports/{report_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// `RunReport` operation metadata.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunReportMetadata {
    /// An estimate of how close this report is to being completed. Will always be
    /// 100 for failed and completed reports.
    #[prost(int32, tag = "2")]
    pub percent_complete: i32,
    /// The result's parent report.
    #[prost(string, tag = "4")]
    pub report: ::prost::alloc::string::String,
}
/// Response message for a completed `RunReport` operation.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RunReportResponse {
    /// The unique name of the generated result. Use with `FetchReportResultRows`
    /// to retrieve data.
    #[prost(string, tag = "1")]
    pub report_result: ::prost::alloc::string::String,
}
/// Request object for `GetReport` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetReportRequest {
    /// Required. The resource name of the report.
    /// Format: `networks/{network_code}/reports/{report_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request object for `ListReports` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListReportsRequest {
    /// Required. The parent, which owns this collection of reports.
    /// Format: `networks/{network_code}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. The maximum number of `Reports` to return. The service may return
    /// fewer than this value. If unspecified, at most 50 `Reports` will be
    /// returned. The maximum value is 1000; values above 1000 will be coerced to
    /// 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A page token, received from a previous `ListReports` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListReports` must
    /// match the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Expression to filter the response.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters>
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Expression to specify sorting order.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters#order>
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
    /// Optional. Number of individual resources to skip while paginating.
    #[prost(int32, tag = "6")]
    pub skip: i32,
}
/// Response object for `ListReportsResponse` containing matching `Report`
/// objects.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListReportsResponse {
    /// The `Report` objects from the specified network.
    #[prost(message, repeated, tag = "1")]
    pub reports: ::prost::alloc::vec::Vec<Report>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Total number of `Report` objects.
    /// If a filter was included in the request, this reflects the total number
    /// after the filtering is applied.
    ///
    /// `total_size` will not be calculated in the response unless it has been
    /// included in a response field mask. The response field mask can be provided
    /// to the method by using the URL parameter `$fields` or `fields`, or by using
    /// the HTTP/gRPC header `X-Goog-FieldMask`.
    ///
    /// For more information, see
    /// <https://developers.google.com/ad-manager/api/beta/field-masks>
    #[prost(int32, tag = "3")]
    pub total_size: i32,
}
/// Request object for `CreateReport` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateReportRequest {
    /// Required. The parent resource where this `Report` will be created.
    /// Format: `networks/{network_code}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The `Report` to create.
    #[prost(message, optional, tag = "2")]
    pub report: ::core::option::Option<Report>,
}
/// Request object for `UpdateReport` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateReportRequest {
    /// Required. The `Report` to update.
    #[prost(message, optional, tag = "1")]
    pub report: ::core::option::Option<Report>,
    /// Required. The list of fields to update.
    #[prost(message, optional, tag = "2")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
}
/// The request message for the fetch report result rows endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchReportResultRowsRequest {
    /// The report result being fetched.
    /// Format:
    /// `networks/{network_code}/reports/{report_id}/results/{report_result_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. The maximum number of rows to return. The service may return
    /// fewer than this value. If unspecified, at most 1,000 rows will be returned.
    /// The maximum value is 10,000; values above 10,000 will be reduced to 10,000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A page token, received from a previous `FetchReportResultRows`
    /// call. Provide this to retrieve the second and subsequent batches of rows.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
/// The response message for the fetch report result rows endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchReportResultRowsResponse {
    /// Up to `page_size` rows of report data.
    #[prost(message, repeated, tag = "1")]
    pub rows: ::prost::alloc::vec::Vec<report::data_table::Row>,
    /// The time at which the report was scheduled to run. For non-scheduled
    /// reports, this is the time at which the report was requested to be run.
    #[prost(message, optional, tag = "2")]
    pub run_time: ::core::option::Option<::prost_types::Timestamp>,
    /// The computed fixed date ranges this report includes.
    /// Only returned with the first page of results (when page_token is not
    /// included in the request).
    #[prost(message, repeated, tag = "3")]
    pub date_ranges: ::prost::alloc::vec::Vec<report::date_range::FixedDateRange>,
    /// The computed comparison fixed date ranges this report includes.
    /// Only returned with the first page of results (when page_token is not
    /// included in the request).
    #[prost(message, repeated, tag = "4")]
    pub comparison_date_ranges: ::prost::alloc::vec::Vec<
        report::date_range::FixedDateRange,
    >,
    /// The total number of rows available from this report. Useful for
    /// pagination.
    /// Only returned with the first page of results (when page_token is not
    /// included in the request).
    #[prost(int32, tag = "5")]
    pub total_row_count: i32,
    /// A token that can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "6")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// The definition of how a report should be run.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReportDefinition {
    /// Required. The list of dimensions to report on. If empty, the report will
    /// have no dimensions, and any metrics will be totals.
    #[prost(enumeration = "report::Dimension", repeated, packed = "false", tag = "1")]
    pub dimensions: ::prost::alloc::vec::Vec<i32>,
    /// Required. The list of metrics to report on. If empty, the report will have
    /// no metrics.
    #[prost(enumeration = "report::Metric", repeated, packed = "false", tag = "2")]
    pub metrics: ::prost::alloc::vec::Vec<i32>,
    /// Optional. The filters for this report.
    #[prost(message, repeated, tag = "3")]
    pub filters: ::prost::alloc::vec::Vec<report::Filter>,
    /// Optional. The time zone the date range is defined in for this report.
    /// Defaults to publisher's time zone if not specified. Time zone in IANA
    /// format. Acceptable values depend on the report type. Publisher time zone is
    /// always accepted. Use "America/Los_Angeles" for pacific time, or "Etc/UTC"
    /// for UTC.
    #[prost(string, tag = "4")]
    pub time_zone: ::prost::alloc::string::String,
    /// Optional. The ISO 4217 currency code for this report. Defaults to publisher
    /// currency code if not specified.
    #[prost(string, tag = "5")]
    pub currency_code: ::prost::alloc::string::String,
    /// Required. The primary date range of this report.
    #[prost(message, optional, tag = "6")]
    pub date_range: ::core::option::Option<report::DateRange>,
    /// Optional. The comparison date range of this report. If unspecified, the
    /// report will not have any comparison metrics.
    #[prost(message, optional, tag = "9")]
    pub comparison_date_range: ::core::option::Option<report::DateRange>,
    /// Optional. Custom Dimension keys that represent CUSTOM_DIMENSION_*
    /// dimensions. The index of this repeated field corresponds to the index on
    /// each dimension. For example, custom_dimension_key_ids\[0\] describes
    /// CUSTOM_DIMENSION_0_VALUE_ID and CUSTOM_DIMENSION_0_VALUE.
    #[prost(int64, repeated, packed = "false", tag = "7")]
    pub custom_dimension_key_ids: ::prost::alloc::vec::Vec<i64>,
    /// Optional. Custom field IDs that represent LINE_ITEM_CUSTOM_FIELD_*
    /// dimensions. The index of this repeated field corresponds to the index on
    /// each dimension. For example, line_item_custom_field_ids\[0\] describes
    /// LINE_ITEM_CUSTOM_FIELD_0_OPTION_ID and LINE_ITEM_CUSTOM_FIELD_0_VALUE.
    #[prost(int64, repeated, packed = "false", tag = "11")]
    pub line_item_custom_field_ids: ::prost::alloc::vec::Vec<i64>,
    /// Optional. Custom field IDs that represent ORDER_CUSTOM_FIELD_*
    /// dimensions. The index of this repeated field corresponds to the index on
    /// each dimension. For example, order_custom_field_ids\[0\] describes
    /// ORDER_CUSTOM_FIELD_0_OPTION_ID and ORDER_CUSTOM_FIELD_0_VALUE.
    #[prost(int64, repeated, packed = "false", tag = "12")]
    pub order_custom_field_ids: ::prost::alloc::vec::Vec<i64>,
    /// Optional. Custom field IDs that represent CREATIVE_CUSTOM_FIELD_*
    /// dimensions. The index of this repeated field corresponds to the index on
    /// each dimension. For example, creative_custom_field_ids\[0\] describes
    /// CREATIVE_CUSTOM_FIELD_0_OPTION_ID and CREATIVE_CUSTOM_FIELD_0_VALUE.
    #[prost(int64, repeated, packed = "false", tag = "13")]
    pub creative_custom_field_ids: ::prost::alloc::vec::Vec<i64>,
    /// Required. The type of this report.
    #[prost(enumeration = "report::ReportType", tag = "8")]
    pub report_type: i32,
    /// Optional. Include a time period column to introduce comparison columns in
    /// the report for each generated period. For example, set to  "QUARTERS" here
    /// to have a column for each quarter present in the primary date range. If
    /// "PREVIOUS PERIOD" is specified in comparison_date_range, then each quarter
    /// column will also include comparison values for its relative previous
    /// quarter.
    #[prost(enumeration = "report::TimePeriodColumn", tag = "10")]
    pub time_period_column: i32,
    /// Optional. List of flags for this report. Used to flag rows in a result set
    /// based on a set of defined filters.
    #[prost(message, repeated, tag = "14")]
    pub flags: ::prost::alloc::vec::Vec<report::Flag>,
    /// Optional. Default sorts to apply to this report.
    #[prost(message, repeated, tag = "15")]
    pub sorts: ::prost::alloc::vec::Vec<report::Sort>,
}
/// The options for a scheduled report.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScheduleOptions {
    /// Information pertaining to schedule itself.
    #[prost(message, optional, tag = "1")]
    pub schedule: ::core::option::Option<Schedule>,
    /// Option for when to deliver the scheduled report.
    #[prost(enumeration = "schedule_options::DeliveryCondition", tag = "2")]
    pub delivery_condition: i32,
    /// Optional. The flags evaluated when ReportDeliveryOption.WHEN_FLAG_PRESENT
    /// is specified.
    #[prost(message, repeated, tag = "3")]
    pub flags: ::prost::alloc::vec::Vec<report::Flag>,
}
/// Nested message and enum types in `ScheduleOptions`.
pub mod schedule_options {
    /// Condition for when to email the scheduled report.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum DeliveryCondition {
        /// Never deliver report.
        Never = 0,
        /// Always deliver report.
        Always = 1,
        /// Deliver report when flag's conditions are met.
        WhenFlagConditionsMet = 2,
    }
    impl DeliveryCondition {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Never => "NEVER",
                Self::Always => "ALWAYS",
                Self::WhenFlagConditionsMet => "WHEN_FLAG_CONDITIONS_MET",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "NEVER" => Some(Self::Never),
                "ALWAYS" => Some(Self::Always),
                "WHEN_FLAG_CONDITIONS_MET" => Some(Self::WhenFlagConditionsMet),
                _ => None,
            }
        }
    }
}
/// The schedule for the report
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Schedule {
    /// Date for the first run of the report.
    #[prost(message, optional, tag = "1")]
    pub start_date: ::core::option::Option<super::super::super::r#type::Date>,
    /// Date for the final run of the report.
    #[prost(message, optional, tag = "2")]
    pub end_date: ::core::option::Option<super::super::super::r#type::Date>,
    /// Frequency to run report.
    #[prost(enumeration = "schedule::Frequency", tag = "3")]
    pub frequency: i32,
    /// Indicates start time for schedule to run
    /// Will use the time_zone from `ReportDefinition`. Defaults
    /// to the publisher's time zone if not specified.
    ///
    /// For HOURLY, TWO_TIMES_DAILY, THREE_TIMES_DAILY, or FOUR_TIMES_DAILY, this
    /// will be the time of day that the first report will run on the first day.
    /// For example, if the start time is 2:00 PM, and the frequency is
    /// THREE_TIMES_DAILY, the first day will have reports scheduled at 2:00 PM,
    /// 10:00 PM. Each subsequent day will have reports scheduled at 6:00 AM,
    /// 2:00 PM, 10:00 PM.
    #[prost(message, optional, tag = "4")]
    pub start_time: ::core::option::Option<super::super::super::r#type::TimeOfDay>,
    /// The scheduled values based on the frequency selected.
    /// WEEKLY - uses WeeklySchedule
    /// MONTHLY - uses MonthlySchedule
    #[prost(oneof = "schedule::FrequencySchedule", tags = "6, 7")]
    pub frequency_schedule: ::core::option::Option<schedule::FrequencySchedule>,
}
/// Nested message and enum types in `Schedule`.
pub mod schedule {
    /// Days of week to schedule report run.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct WeeklySchedule {
        /// Specifies days of the week on which to run report.
        #[prost(
            enumeration = "super::super::super::super::r#type::DayOfWeek",
            repeated,
            tag = "1"
        )]
        pub weekly_scheduled_days: ::prost::alloc::vec::Vec<i32>,
    }
    /// Days of Month to schedule report run.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MonthlySchedule {
        /// Specifies days of the month to run report. Range is from 1-31.
        /// Will ignore days that are not valid for the given month.
        #[prost(int32, repeated, tag = "1")]
        pub monthly_scheduled_days: ::prost::alloc::vec::Vec<i32>,
    }
    /// Frequency to run report.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Frequency {
        /// No Frequency specified.
        Unspecified = 0,
        /// Schedule report to run every hour.
        Hourly = 1,
        /// Schedule report to run twice a day (every 12 hours).
        TwoTimesDaily = 2,
        /// Schedule report to run three times a day (every 8 hours).
        ThreeTimesDaily = 3,
        /// Schedule report to run four times a day (every 6 hours).
        FourTimesDaily = 4,
        /// Schedule report to run on a daily basis.
        Daily = 5,
        /// Schedule report to run on a weekly basis.
        Weekly = 6,
        /// Schedule report to run on a monthly basis.
        Monthly = 7,
    }
    impl Frequency {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "FREQUENCY_UNSPECIFIED",
                Self::Hourly => "HOURLY",
                Self::TwoTimesDaily => "TWO_TIMES_DAILY",
                Self::ThreeTimesDaily => "THREE_TIMES_DAILY",
                Self::FourTimesDaily => "FOUR_TIMES_DAILY",
                Self::Daily => "DAILY",
                Self::Weekly => "WEEKLY",
                Self::Monthly => "MONTHLY",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "FREQUENCY_UNSPECIFIED" => Some(Self::Unspecified),
                "HOURLY" => Some(Self::Hourly),
                "TWO_TIMES_DAILY" => Some(Self::TwoTimesDaily),
                "THREE_TIMES_DAILY" => Some(Self::ThreeTimesDaily),
                "FOUR_TIMES_DAILY" => Some(Self::FourTimesDaily),
                "DAILY" => Some(Self::Daily),
                "WEEKLY" => Some(Self::Weekly),
                "MONTHLY" => Some(Self::Monthly),
                _ => None,
            }
        }
    }
    /// The scheduled values based on the frequency selected.
    /// WEEKLY - uses WeeklySchedule
    /// MONTHLY - uses MonthlySchedule
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum FrequencySchedule {
        /// Days of week to schedule report run.
        #[prost(message, tag = "6")]
        WeeklySchedule(WeeklySchedule),
        /// Days of month to schedule report run.
        #[prost(message, tag = "7")]
        MonthlySchedule(MonthlySchedule),
    }
}
/// Generated client implementations.
pub mod report_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provides methods for interacting with reports.
    #[derive(Debug, Clone)]
    pub struct ReportServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ReportServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ReportServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ReportServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ReportServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// API to retrieve a `Report` object.
        pub async fn get_report(
            &mut self,
            request: impl tonic::IntoRequest<super::GetReportRequest>,
        ) -> std::result::Result<tonic::Response<super::Report>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.ReportService/GetReport",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.ads.admanager.v1.ReportService", "GetReport"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to retrieve a list of `Report` objects.
        pub async fn list_reports(
            &mut self,
            request: impl tonic::IntoRequest<super::ListReportsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListReportsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.ReportService/ListReports",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.ReportService",
                        "ListReports",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to create a `Report` object.
        pub async fn create_report(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateReportRequest>,
        ) -> std::result::Result<tonic::Response<super::Report>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.ReportService/CreateReport",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.ReportService",
                        "CreateReport",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to update a `Report` object.
        pub async fn update_report(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateReportRequest>,
        ) -> std::result::Result<tonic::Response<super::Report>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.ReportService/UpdateReport",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.ReportService",
                        "UpdateReport",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Initiates the execution of an existing report asynchronously. Users can
        /// get the report by polling this operation via
        /// `OperationsService.GetOperation`.
        /// Poll every 5 seconds initially, with an exponential
        /// backoff. Once a report is complete, the operation will contain a
        /// `RunReportResponse` in its response field containing a report_result that
        /// can be passed to the `FetchReportResultRows` method to retrieve the report
        /// data.
        pub async fn run_report(
            &mut self,
            request: impl tonic::IntoRequest<super::RunReportRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.ReportService/RunReport",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.ads.admanager.v1.ReportService", "RunReport"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Returns the result rows from a completed report.
        /// The caller must have previously called `RunReport` and waited for that
        /// operation to complete. The rows will be returned according to the order
        /// specified by the `sorts` member of the report definition.
        pub async fn fetch_report_result_rows(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchReportResultRowsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchReportResultRowsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.ReportService/FetchReportResultRows",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.ReportService",
                        "FetchReportResultRows",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Wrapper message for
/// [RoleStatus][google.ads.admanager.v1.RoleStatusEnum.RoleStatus]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RoleStatusEnum {}
/// Nested message and enum types in `RoleStatusEnum`.
pub mod role_status_enum {
    /// The status of the role.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum RoleStatus {
        /// No value specified.
        Unspecified = 0,
        /// Role is active.
        Active = 1,
        /// Role is inactive.
        Inactive = 2,
    }
    impl RoleStatus {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "ROLE_STATUS_UNSPECIFIED",
                Self::Active => "ACTIVE",
                Self::Inactive => "INACTIVE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "ROLE_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
                "ACTIVE" => Some(Self::Active),
                "INACTIVE" => Some(Self::Inactive),
                _ => None,
            }
        }
    }
}
/// The `Role` resource.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Role {
    /// Identifier. The resource name of the `Role`.
    /// Format: `networks/{network_code}/roles/{role_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. `Role` ID.
    #[prost(int64, tag = "2")]
    pub role_id: i64,
    /// Required. The display name of the `Role`.
    #[prost(string, tag = "3")]
    pub display_name: ::prost::alloc::string::String,
    /// Optional. The description of the `Role`.
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
    /// Output only. Whether the `Role` is a built-in or custom user role.
    #[prost(bool, tag = "5")]
    pub built_in: bool,
    /// Output only. The status of the `Role`.
    #[prost(enumeration = "role_status_enum::RoleStatus", tag = "6")]
    pub status: i32,
}
/// Request object for `GetRole` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRoleRequest {
    /// Required. The resource name of the Role.
    /// Format: `networks/{network_code}/roles/{role_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request object for `ListRoles` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRolesRequest {
    /// Required. The parent, which owns this collection of Roles.
    /// Format: `networks/{network_code}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. The maximum number of `Roles` to return. The service may return
    /// fewer than this value. If unspecified, at most 50 `Roles` will be returned.
    /// The maximum value is 1000; values above 1000 will be coerced to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A page token, received from a previous `ListRoles` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListRoles` must match
    /// the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Expression to filter the response.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters>
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Expression to specify sorting order.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters#order>
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
    /// Optional. Number of individual resources to skip while paginating.
    #[prost(int32, tag = "6")]
    pub skip: i32,
}
/// Response object for `ListRolesRequest` containing matching `Role` objects.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRolesResponse {
    /// The `Role` objects from the specified network.
    #[prost(message, repeated, tag = "1")]
    pub roles: ::prost::alloc::vec::Vec<Role>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Total number of `Role` objects.
    /// If a filter was included in the request, this reflects the total number
    /// after the filtering is applied.
    ///
    /// `total_size` will not be calculated in the response unless it has been
    /// included in a response field mask. The response field mask can be provided
    /// to the method by using the URL parameter `$fields` or `fields`, or by using
    /// the HTTP/gRPC header `X-Goog-FieldMask`.
    ///
    /// For more information, see
    /// <https://developers.google.com/ad-manager/api/beta/field-masks>
    #[prost(int32, tag = "3")]
    pub total_size: i32,
}
/// Generated client implementations.
pub mod role_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provides methods for handling `Role` objects.
    #[derive(Debug, Clone)]
    pub struct RoleServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl RoleServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> RoleServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RoleServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            RoleServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// API to retrieve a `Role` object.
        pub async fn get_role(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRoleRequest>,
        ) -> std::result::Result<tonic::Response<super::Role>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.RoleService/GetRole",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.ads.admanager.v1.RoleService", "GetRole"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to retrieve a list of `Role` objects.
        pub async fn list_roles(
            &mut self,
            request: impl tonic::IntoRequest<super::ListRolesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListRolesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.RoleService/ListRoles",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.ads.admanager.v1.RoleService", "ListRoles"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Wrapper for
/// [TaxonomyType][google.ads.admanager.v1.TaxonomyTypeEnum.TaxonomyType]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TaxonomyTypeEnum {}
/// Nested message and enum types in `TaxonomyTypeEnum`.
pub mod taxonomy_type_enum {
    /// The taxonomy type of the IAB defined taxonomies.
    /// Used for Publisher provided signals.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum TaxonomyType {
        /// Unspecified/not present
        Unspecified = 0,
        /// The IAB Audience Taxonomy v1.1.
        TaxonomyIabAudience11 = 3,
        /// The IAB Content Taxonomy v2.1.
        TaxonomyIabContent21 = 4,
        /// The IAB Content Taxonomy v2.2.
        TaxonomyIabContent22 = 6,
        /// The IAB Content Taxonomy v3.0.
        TaxonomyIabContent30 = 5,
        /// The PPS structured video signals taxonomy.
        TaxonomyGoogleStructuredVideo10 = 7,
    }
    impl TaxonomyType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "TAXONOMY_TYPE_UNSPECIFIED",
                Self::TaxonomyIabAudience11 => "TAXONOMY_IAB_AUDIENCE_1_1",
                Self::TaxonomyIabContent21 => "TAXONOMY_IAB_CONTENT_2_1",
                Self::TaxonomyIabContent22 => "TAXONOMY_IAB_CONTENT_2_2",
                Self::TaxonomyIabContent30 => "TAXONOMY_IAB_CONTENT_3_0",
                Self::TaxonomyGoogleStructuredVideo10 => {
                    "TAXONOMY_GOOGLE_STRUCTURED_VIDEO_1_0"
                }
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "TAXONOMY_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "TAXONOMY_IAB_AUDIENCE_1_1" => Some(Self::TaxonomyIabAudience11),
                "TAXONOMY_IAB_CONTENT_2_1" => Some(Self::TaxonomyIabContent21),
                "TAXONOMY_IAB_CONTENT_2_2" => Some(Self::TaxonomyIabContent22),
                "TAXONOMY_IAB_CONTENT_3_0" => Some(Self::TaxonomyIabContent30),
                "TAXONOMY_GOOGLE_STRUCTURED_VIDEO_1_0" => {
                    Some(Self::TaxonomyGoogleStructuredVideo10)
                }
                _ => None,
            }
        }
    }
}
/// The `TaxonomyCategory` resource.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaxonomyCategory {
    /// Identifier. The resource name of the `TaxonomyCategory`.
    /// Format: `networks/{network_code}/taxonomyCategories/{taxonomy_category_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. `TaxonomyCategory` ID.
    #[prost(int64, tag = "2")]
    pub taxonomy_category_id: i64,
    /// Output only. Display name of the `TaxonomyCategory`.
    #[prost(string, tag = "3")]
    pub display_name: ::prost::alloc::string::String,
    /// Output only. Whether this `TaxonomyCategory` only serves to group its
    /// children.
    #[prost(bool, tag = "5")]
    pub grouping_only: bool,
    /// Output only. The ID of the parent category this `TaxonomyCategory` descends
    /// from.
    #[prost(int64, tag = "6")]
    pub parent_taxonomy_category_id: i64,
    /// Output only. The taxonomy that this `TaxonomyCategory` belongs to.
    #[prost(enumeration = "taxonomy_type_enum::TaxonomyType", tag = "9")]
    pub taxonomy_type: i32,
    /// Output only. The list of names of the ancestors of this `TaxonomyCategory`.
    #[prost(string, repeated, tag = "7")]
    pub ancestor_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Output only. The list of IDs of the ancestors of this `TaxonomyCategory`.
    #[prost(int64, repeated, packed = "false", tag = "8")]
    pub ancestor_taxonomy_category_ids: ::prost::alloc::vec::Vec<i64>,
}
/// Request object for `GetTaxonomyCategory` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTaxonomyCategoryRequest {
    /// Required. The resource name of the TaxonomyCategory.
    /// Format: `networks/{network_code}/taxonomyCategories/{taxonomy_category_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Request object for `ListTaxonomyCategories` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTaxonomyCategoriesRequest {
    /// Required. The parent, which owns this collection of TaxonomyCategories.
    /// Format: `networks/{network_code}`
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. The maximum number of `TaxonomyCategories` to return. The service
    /// may return fewer than this value. If unspecified, at most 50
    /// `TaxonomyCategories` will be returned. The maximum value is 1000; values
    /// above 1000 will be coerced to 1000.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A page token, received from a previous `ListTaxonomyCategories`
    /// call. Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListTaxonomyCategories`
    /// must match the call that provided the page token.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Expression to filter the response.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters>
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Expression to specify sorting order.
    /// See syntax details at
    /// <https://developers.google.com/ad-manager/api/beta/filters#order>
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
    /// Optional. Number of individual resources to skip while paginating.
    #[prost(int32, tag = "6")]
    pub skip: i32,
}
/// Response object for `ListTaxonomyCategoriesRequest` containing matching
/// `TaxonomyCategory` objects.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListTaxonomyCategoriesResponse {
    /// The `TaxonomyCategory` objects.
    #[prost(message, repeated, tag = "1")]
    pub taxonomy_categories: ::prost::alloc::vec::Vec<TaxonomyCategory>,
    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Total number of `TaxonomyCategory` objects.
    /// If a filter was included in the request, this reflects the total number
    /// after the filtering is applied.
    ///
    /// `total_size` will not be calculated in the response unless it has been
    /// included in a response field mask. The response field mask can be provided
    /// to the method by using the URL parameter `$fields` or `fields`, or by using
    /// the HTTP/gRPC header `X-Goog-FieldMask`.
    ///
    /// For more information, see
    /// <https://developers.google.com/ad-manager/api/beta/field-masks>
    #[prost(int32, tag = "3")]
    pub total_size: i32,
}
/// Generated client implementations.
pub mod taxonomy_category_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provides methods for handling `TaxonomyCategory` objects.
    #[derive(Debug, Clone)]
    pub struct TaxonomyCategoryServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl TaxonomyCategoryServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> TaxonomyCategoryServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> TaxonomyCategoryServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            TaxonomyCategoryServiceClient::new(
                InterceptedService::new(inner, interceptor),
            )
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// API to retrieve a `TaxonomyCategory` object.
        pub async fn get_taxonomy_category(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTaxonomyCategoryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::TaxonomyCategory>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.TaxonomyCategoryService/GetTaxonomyCategory",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.TaxonomyCategoryService",
                        "GetTaxonomyCategory",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// API to retrieve a list of `TaxonomyCategory` objects.
        pub async fn list_taxonomy_categories(
            &mut self,
            request: impl tonic::IntoRequest<super::ListTaxonomyCategoriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListTaxonomyCategoriesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.TaxonomyCategoryService/ListTaxonomyCategories",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.ads.admanager.v1.TaxonomyCategoryService",
                        "ListTaxonomyCategories",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// A Team defines a grouping of users and what entities they have access to.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Team {
    /// Identifier. The resource name of the `Team`.
    /// Format: `networks/{network_code}/teams/{team_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. The unique ID of the Team. This value is assigned by Google.
    /// Teams that are created by Google will have negative IDs.
    #[prost(int64, tag = "2")]
    pub team_id: i64,
}
/// The User resource.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    /// Identifier. The resource name of the User.
    /// Format: `networks/{network_code}/users/{user_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. `User` ID.
    #[prost(int64, tag = "10")]
    pub user_id: i64,
    /// Required. The name of the User. It has a maximum length of 128 characters.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// Required. The email or login of the User. In order to create a new user,
    /// you must already have a Google Account.
    #[prost(string, tag = "3")]
    pub email: ::prost::alloc::string::String,
    /// Required. The unique Role ID of the User. Roles that are created by Google
    /// will have negative IDs.
    #[prost(string, tag = "4")]
    pub role: ::prost::alloc::string::String,
    /// Output only. Specifies whether or not the User is active. An inactive user
    /// cannot log in to the system or perform any operations.
    #[prost(bool, tag = "6")]
    pub active: bool,
    /// Optional. An identifier for the User that is meaningful to the publisher.
    /// This attribute has a maximum length of 255 characters.
    #[prost(string, tag = "7")]
    pub external_id: ::prost::alloc::string::String,
    /// Output only. Whether the user is an OAuth2 service account user.
    /// Service account users can only be added through the UI.
    #[prost(bool, tag = "8")]
    pub service_account: bool,
    /// Optional. The IANA Time Zone Database time zone, e.g. "America/New_York",
    /// used in the orders and line items UI for this User. If not provided, the UI
    /// then defaults to using the Network's timezone. This setting only affects
    /// the UI for this user and does not affect the timezone of any dates and
    /// times returned in API responses.
    #[prost(string, tag = "9")]
    pub orders_ui_local_time_zone: ::prost::alloc::string::String,
}
/// Request object for GetUser method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserRequest {
    /// Required. The resource name of the User.
    /// Format: `networks/{network_code}/users/{user_id}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod user_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Provides methods for handling User objects.
    #[derive(Debug, Clone)]
    pub struct UserServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl UserServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> UserServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> UserServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            UserServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// API to retrieve a User object.
        ///
        /// To get the current user, the resource name
        /// `networks/{networkCode}/users/me` can be used.
        pub async fn get_user(
            &mut self,
            request: impl tonic::IntoRequest<super::GetUserRequest>,
        ) -> std::result::Result<tonic::Response<super::User>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.ads.admanager.v1.UserService/GetUser",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("google.ads.admanager.v1.UserService", "GetUser"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
