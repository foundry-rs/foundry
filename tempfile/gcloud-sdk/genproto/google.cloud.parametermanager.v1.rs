// This file is @generated by prost-build.
/// Message describing Parameter resource
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Parameter {
    /// Identifier. \[Output only\] The resource name of the Parameter in the format
    /// `projects/*/locations/*/parameters/*`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. \[Output only\] Create time stamp
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. \[Output only\] Update time stamp
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Optional. Labels as key value pairs
    #[prost(map = "string, string", tag = "4")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Optional. Specifies the format of a Parameter.
    #[prost(enumeration = "ParameterFormat", tag = "5")]
    pub format: i32,
    /// Output only. \[Output-only\] policy member strings of a Google Cloud
    /// resource.
    #[prost(message, optional, tag = "6")]
    pub policy_member: ::core::option::Option<
        super::super::super::iam::v1::ResourcePolicyMember,
    >,
}
/// Message for requesting list of Parameters
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListParametersRequest {
    /// Required. Parent value for ListParametersRequest in the format
    /// `projects/*/locations/*`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Message for response to listing Parameters
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListParametersResponse {
    /// The list of Parameters
    #[prost(message, repeated, tag = "1")]
    pub parameters: ::prost::alloc::vec::Vec<Parameter>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Unordered list. Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Message for getting a Parameter
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetParameterRequest {
    /// Required. Name of the resource in the format
    /// `projects/*/locations/*/parameters/*`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Message for creating a Parameter
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateParameterRequest {
    /// Required. Value for parent in the format
    /// `projects/*/locations/*`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. Id of the Parameter resource
    #[prost(string, tag = "2")]
    pub parameter_id: ::prost::alloc::string::String,
    /// Required. The Parameter resource being created
    #[prost(message, optional, tag = "3")]
    pub parameter: ::core::option::Option<Parameter>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
/// Message for updating a Parameter
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateParameterRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// Parameter resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A mutable field will be overwritten if it is in the
    /// mask. If the user does not provide a mask then all mutable fields present
    /// in the request will be overwritten.
    #[prost(message, optional, tag = "1")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    /// Required. The Parameter resource being updated
    #[prost(message, optional, tag = "2")]
    pub parameter: ::core::option::Option<Parameter>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
}
/// Message for deleting a Parameter
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteParameterRequest {
    /// Required. Name of the resource in the format
    /// `projects/*/locations/*/parameters/*`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
/// Message describing ParameterVersion resource
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParameterVersion {
    /// Identifier. \[Output only\] The resource name of the ParameterVersion in the
    /// format `projects/*/locations/*/parameters/*/versions/*`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. \[Output only\] Create time stamp
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. \[Output only\] Update time stamp
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Optional. Disabled boolean to determine if a ParameterVersion acts as a
    /// metadata only resource (payload is never returned if disabled is true). If
    /// true any calls will always default to BASIC view even if the user
    /// explicitly passes FULL view as part of the request. A render call on a
    /// disabled resource fails with an error. Default value is False.
    #[prost(bool, tag = "4")]
    pub disabled: bool,
    /// Required. Immutable. Payload content of a ParameterVersion resource.  This
    /// is only returned when the request provides the View value of FULL (default
    /// for GET request).
    #[prost(message, optional, tag = "5")]
    pub payload: ::core::option::Option<ParameterVersionPayload>,
}
/// Message for storing a ParameterVersion resource's payload data
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParameterVersionPayload {
    /// Required. bytes data for storing payload.
    #[prost(bytes = "vec", tag = "1")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
/// Message for requesting list of ParameterVersions
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListParameterVersionsRequest {
    /// Required. Parent value for ListParameterVersionsRequest in the format
    /// `projects/*/locations/*/parameters/*`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Message for response to listing ParameterVersions
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListParameterVersionsResponse {
    /// The list of ParameterVersions
    #[prost(message, repeated, tag = "1")]
    pub parameter_versions: ::prost::alloc::vec::Vec<ParameterVersion>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Unordered list. Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Message for getting a ParameterVersion
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetParameterVersionRequest {
    /// Required. Name of the resource in the format
    /// `projects/*/locations/*/parameters/*/versions/*`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. View of the ParameterVersion.
    /// In the default FULL view, all metadata & payload associated with the
    /// ParameterVersion will be returned.
    #[prost(enumeration = "View", tag = "6")]
    pub view: i32,
}
/// Message for getting a ParameterVersionRender
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenderParameterVersionRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Message describing RenderParameterVersionResponse resource
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RenderParameterVersionResponse {
    /// Output only. Resource identifier of a ParameterVersion in the format
    /// `projects/*/locations/*/parameters/*/versions/*`.
    #[prost(string, tag = "1")]
    pub parameter_version: ::prost::alloc::string::String,
    /// Payload content of a ParameterVersion resource.
    #[prost(message, optional, tag = "2")]
    pub payload: ::core::option::Option<ParameterVersionPayload>,
    /// Output only. Server generated rendered version of the user provided payload
    /// data (ParameterVersionPayload) which has substitutions of all (if any)
    /// references to a SecretManager SecretVersion resources. This substituion
    /// only works for a Parameter which is in JSON or YAML format.
    #[prost(bytes = "vec", tag = "3")]
    pub rendered_payload: ::prost::alloc::vec::Vec<u8>,
}
/// Message for creating a ParameterVersion
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateParameterVersionRequest {
    /// Required. Value for parent in the format
    /// `projects/*/locations/*/parameters/*`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. Id of the ParameterVersion resource
    #[prost(string, tag = "2")]
    pub parameter_version_id: ::prost::alloc::string::String,
    /// Required. The ParameterVersion resource being created
    #[prost(message, optional, tag = "3")]
    pub parameter_version: ::core::option::Option<ParameterVersion>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
}
/// Message for updating a ParameterVersion
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateParameterVersionRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// ParameterVersion resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A mutable field will be overwritten if it is in the
    /// mask. If the user does not provide a mask then all mutable fields present
    /// in the request will be overwritten.
    #[prost(message, optional, tag = "1")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    /// Required. The ParameterVersion resource being updated
    #[prost(message, optional, tag = "2")]
    pub parameter_version: ::core::option::Option<ParameterVersion>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
}
/// Message for deleting a ParameterVersion
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteParameterVersionRequest {
    /// Required. Name of the resource in the format
    /// `projects/*/locations/*/parameters/*/versions/*`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
}
/// Option to specify the format of a Parameter resource (UNFORMATTED / YAML /
/// JSON). This option is user specified at the time of creation of the resource
/// and is immutable.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ParameterFormat {
    /// The default / unset value.
    /// The API will default to the UNFORMATTED format.
    Unspecified = 0,
    /// Unformatted.
    Unformatted = 1,
    /// YAML format.
    Yaml = 2,
    /// JSON format.
    Json = 3,
}
impl ParameterFormat {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "PARAMETER_FORMAT_UNSPECIFIED",
            Self::Unformatted => "UNFORMATTED",
            Self::Yaml => "YAML",
            Self::Json => "JSON",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PARAMETER_FORMAT_UNSPECIFIED" => Some(Self::Unspecified),
            "UNFORMATTED" => Some(Self::Unformatted),
            "YAML" => Some(Self::Yaml),
            "JSON" => Some(Self::Json),
            _ => None,
        }
    }
}
/// Option for requesting only metadata, or user provided payload
/// of a ParameterVersion resource.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum View {
    /// The default / unset value.
    /// The API will default to the FULL view..
    Unspecified = 0,
    /// Include only the metadata for the resource.
    Basic = 1,
    /// Include metadata & other relevant payload data as well.
    /// This is the default view.
    Full = 2,
}
impl View {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "VIEW_UNSPECIFIED",
            Self::Basic => "BASIC",
            Self::Full => "FULL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VIEW_UNSPECIFIED" => Some(Self::Unspecified),
            "BASIC" => Some(Self::Basic),
            "FULL" => Some(Self::Full),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod parameter_manager_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service describing handlers for resources
    #[derive(Debug, Clone)]
    pub struct ParameterManagerClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ParameterManagerClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ParameterManagerClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ParameterManagerClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ParameterManagerClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Lists Parameters in a given project and location.
        pub async fn list_parameters(
            &mut self,
            request: impl tonic::IntoRequest<super::ListParametersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListParametersResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parametermanager.v1.ParameterManager/ListParameters",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parametermanager.v1.ParameterManager",
                        "ListParameters",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single Parameter.
        pub async fn get_parameter(
            &mut self,
            request: impl tonic::IntoRequest<super::GetParameterRequest>,
        ) -> std::result::Result<tonic::Response<super::Parameter>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parametermanager.v1.ParameterManager/GetParameter",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parametermanager.v1.ParameterManager",
                        "GetParameter",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new Parameter in a given project and location.
        pub async fn create_parameter(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateParameterRequest>,
        ) -> std::result::Result<tonic::Response<super::Parameter>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parametermanager.v1.ParameterManager/CreateParameter",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parametermanager.v1.ParameterManager",
                        "CreateParameter",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates a single Parameter.
        pub async fn update_parameter(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateParameterRequest>,
        ) -> std::result::Result<tonic::Response<super::Parameter>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parametermanager.v1.ParameterManager/UpdateParameter",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parametermanager.v1.ParameterManager",
                        "UpdateParameter",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single Parameter.
        pub async fn delete_parameter(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteParameterRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parametermanager.v1.ParameterManager/DeleteParameter",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parametermanager.v1.ParameterManager",
                        "DeleteParameter",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists ParameterVersions in a given project, location, and parameter.
        pub async fn list_parameter_versions(
            &mut self,
            request: impl tonic::IntoRequest<super::ListParameterVersionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListParameterVersionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parametermanager.v1.ParameterManager/ListParameterVersions",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parametermanager.v1.ParameterManager",
                        "ListParameterVersions",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single ParameterVersion.
        pub async fn get_parameter_version(
            &mut self,
            request: impl tonic::IntoRequest<super::GetParameterVersionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ParameterVersion>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parametermanager.v1.ParameterManager/GetParameterVersion",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parametermanager.v1.ParameterManager",
                        "GetParameterVersion",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets rendered version of a ParameterVersion.
        pub async fn render_parameter_version(
            &mut self,
            request: impl tonic::IntoRequest<super::RenderParameterVersionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RenderParameterVersionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parametermanager.v1.ParameterManager/RenderParameterVersion",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parametermanager.v1.ParameterManager",
                        "RenderParameterVersion",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new ParameterVersion in a given project, location, and parameter.
        pub async fn create_parameter_version(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateParameterVersionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ParameterVersion>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parametermanager.v1.ParameterManager/CreateParameterVersion",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parametermanager.v1.ParameterManager",
                        "CreateParameterVersion",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates a single ParameterVersion.
        pub async fn update_parameter_version(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateParameterVersionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ParameterVersion>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parametermanager.v1.ParameterManager/UpdateParameterVersion",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parametermanager.v1.ParameterManager",
                        "UpdateParameterVersion",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single ParameterVersion.
        pub async fn delete_parameter_version(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteParameterVersionRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.parametermanager.v1.ParameterManager/DeleteParameterVersion",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.parametermanager.v1.ParameterManager",
                        "DeleteParameterVersion",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
