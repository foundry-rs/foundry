// This file is @generated by prost-build.
/// Message describing Connection object
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Connection {
    /// Identifier. The resource name of the connection, in the format
    /// `projects/{project}/locations/{location}/connections/{connection_id}`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. \[Output only\] Create timestamp
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. \[Output only\] Update timestamp
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. \[Output only\] Delete timestamp
    #[prost(message, optional, tag = "11")]
    pub delete_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Optional. Labels as key value pairs
    #[prost(map = "string, string", tag = "4")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Output only. Installation state of the Connection.
    #[prost(message, optional, tag = "6")]
    pub installation_state: ::core::option::Option<InstallationState>,
    /// Optional. If disabled is set to true, functionality is disabled for this
    /// connection. Repository based API methods and webhooks processing for
    /// repositories in this connection will be disabled.
    #[prost(bool, tag = "7")]
    pub disabled: bool,
    /// Output only. Set to true when the connection is being set up or updated in
    /// the background.
    #[prost(bool, tag = "8")]
    pub reconciling: bool,
    /// Optional. Allows clients to store small amounts of arbitrary data.
    #[prost(map = "string, string", tag = "9")]
    pub annotations: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[prost(string, tag = "10")]
    pub etag: ::prost::alloc::string::String,
    /// Output only. A system-assigned unique identifier for a the
    /// GitRepositoryLink.
    #[prost(string, tag = "12")]
    pub uid: ::prost::alloc::string::String,
    /// Optional. The crypto key configuration. This field is used by the
    /// Customer-Managed Encryption Keys (CMEK) feature.
    #[prost(message, optional, tag = "15")]
    pub crypto_key_config: ::core::option::Option<CryptoKeyConfig>,
    /// Configuration for the connection depending on the type of provider.
    #[prost(oneof = "connection::ConnectionConfig", tags = "5, 13, 14, 16")]
    pub connection_config: ::core::option::Option<connection::ConnectionConfig>,
}
/// Nested message and enum types in `Connection`.
pub mod connection {
    /// Configuration for the connection depending on the type of provider.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ConnectionConfig {
        /// Configuration for connections to github.com.
        #[prost(message, tag = "5")]
        GithubConfig(super::GitHubConfig),
        /// Configuration for connections to an instance of GitHub Enterprise.
        #[prost(message, tag = "13")]
        GithubEnterpriseConfig(super::GitHubEnterpriseConfig),
        /// Configuration for connections to gitlab.com.
        #[prost(message, tag = "14")]
        GitlabConfig(super::GitLabConfig),
        /// Configuration for connections to an instance of GitLab Enterprise.
        #[prost(message, tag = "16")]
        GitlabEnterpriseConfig(super::GitLabEnterpriseConfig),
    }
}
/// The crypto key configuration. This field is used by the Customer-managed
/// encryption keys (CMEK) feature.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CryptoKeyConfig {
    /// Required. The name of the key which is used to encrypt/decrypt customer
    /// data. For key in Cloud KMS, the key should be in the format of
    /// `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
    #[prost(string, tag = "1")]
    pub key_reference: ::prost::alloc::string::String,
}
/// Describes stage and necessary actions to be taken by the
/// user to complete the installation. Used for GitHub and GitHub Enterprise
/// based connections.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstallationState {
    /// Output only. Current step of the installation process.
    #[prost(enumeration = "installation_state::Stage", tag = "1")]
    pub stage: i32,
    /// Output only. Message of what the user should do next to continue the
    /// installation. Empty string if the installation is already complete.
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    /// Output only. Link to follow for next action. Empty string if the
    /// installation is already complete.
    #[prost(string, tag = "3")]
    pub action_uri: ::prost::alloc::string::String,
}
/// Nested message and enum types in `InstallationState`.
pub mod installation_state {
    /// Stage of the installation process.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Stage {
        /// No stage specified.
        Unspecified = 0,
        /// Only for GitHub Enterprise. An App creation has been requested.
        /// The user needs to confirm the creation in their GitHub enterprise host.
        PendingCreateApp = 1,
        /// User needs to authorize the GitHub (or Enterprise) App via OAuth.
        PendingUserOauth = 2,
        /// User needs to follow the link to install the GitHub (or Enterprise) App.
        PendingInstallApp = 3,
        /// Installation process has been completed.
        Complete = 10,
    }
    impl Stage {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STAGE_UNSPECIFIED",
                Self::PendingCreateApp => "PENDING_CREATE_APP",
                Self::PendingUserOauth => "PENDING_USER_OAUTH",
                Self::PendingInstallApp => "PENDING_INSTALL_APP",
                Self::Complete => "COMPLETE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STAGE_UNSPECIFIED" => Some(Self::Unspecified),
                "PENDING_CREATE_APP" => Some(Self::PendingCreateApp),
                "PENDING_USER_OAUTH" => Some(Self::PendingUserOauth),
                "PENDING_INSTALL_APP" => Some(Self::PendingInstallApp),
                "COMPLETE" => Some(Self::Complete),
                _ => None,
            }
        }
    }
}
/// Configuration for connections to github.com.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitHubConfig {
    /// Required. Immutable. The GitHub Application that was installed to the
    /// GitHub user or organization.
    #[prost(enumeration = "git_hub_config::GitHubApp", tag = "1")]
    pub github_app: i32,
    /// Optional. OAuth credential of the account that authorized the GitHub App.
    /// It is recommended to use a robot account instead of a human user account.
    /// The OAuth token must be tied to the GitHub App of this config.
    #[prost(message, optional, tag = "2")]
    pub authorizer_credential: ::core::option::Option<OAuthCredential>,
    /// Optional. GitHub App installation id.
    #[prost(int64, tag = "3")]
    pub app_installation_id: i64,
    /// Output only. The URI to navigate to in order to manage the installation
    /// associated with this GitHubConfig.
    #[prost(string, tag = "4")]
    pub installation_uri: ::prost::alloc::string::String,
}
/// Nested message and enum types in `GitHubConfig`.
pub mod git_hub_config {
    /// Represents the various GitHub Applications that can be installed to a
    /// GitHub user or organization and used with Developer Connect.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum GitHubApp {
        /// GitHub App not specified.
        Unspecified = 0,
        /// The Developer Connect GitHub Application.
        DeveloperConnect = 1,
        /// The Firebase GitHub Application.
        Firebase = 2,
    }
    impl GitHubApp {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "GIT_HUB_APP_UNSPECIFIED",
                Self::DeveloperConnect => "DEVELOPER_CONNECT",
                Self::Firebase => "FIREBASE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "GIT_HUB_APP_UNSPECIFIED" => Some(Self::Unspecified),
                "DEVELOPER_CONNECT" => Some(Self::DeveloperConnect),
                "FIREBASE" => Some(Self::Firebase),
                _ => None,
            }
        }
    }
}
/// Configuration for connections to an instance of GitHub Enterprise.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitHubEnterpriseConfig {
    /// Required. The URI of the GitHub Enterprise host this connection is for.
    #[prost(string, tag = "1")]
    pub host_uri: ::prost::alloc::string::String,
    /// Optional. ID of the GitHub App created from the manifest.
    #[prost(int64, tag = "2")]
    pub app_id: i64,
    /// Output only. The URL-friendly name of the GitHub App.
    #[prost(string, tag = "3")]
    pub app_slug: ::prost::alloc::string::String,
    /// Optional. SecretManager resource containing the private key of the GitHub
    /// App, formatted as `projects/*/secrets/*/versions/*`.
    #[prost(string, tag = "4")]
    pub private_key_secret_version: ::prost::alloc::string::String,
    /// Optional. SecretManager resource containing the webhook secret of the
    /// GitHub App, formatted as `projects/*/secrets/*/versions/*`.
    #[prost(string, tag = "5")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    /// Optional. ID of the installation of the GitHub App.
    #[prost(int64, tag = "8")]
    pub app_installation_id: i64,
    /// Output only. The URI to navigate to in order to manage the installation
    /// associated with this GitHubEnterpriseConfig.
    #[prost(string, tag = "9")]
    pub installation_uri: ::prost::alloc::string::String,
    /// Optional. Configuration for using Service Directory to privately connect to
    /// a GitHub Enterprise server. This should only be set if the GitHub
    /// Enterprise server is hosted on-premises and not reachable by public
    /// internet. If this field is left empty, calls to the GitHub Enterprise
    /// server will be made over the public internet.
    #[prost(message, optional, tag = "10")]
    pub service_directory_config: ::core::option::Option<ServiceDirectoryConfig>,
    /// Output only. GitHub Enterprise version installed at the host_uri.
    #[prost(string, tag = "12")]
    pub server_version: ::prost::alloc::string::String,
    /// Optional. SSL certificate to use for requests to GitHub Enterprise.
    #[prost(string, tag = "14")]
    pub ssl_ca_certificate: ::prost::alloc::string::String,
}
/// ServiceDirectoryConfig represents Service Directory configuration for a
/// connection.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServiceDirectoryConfig {
    /// Required. The Service Directory service name.
    /// Format:
    /// projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
    #[prost(string, tag = "1")]
    pub service: ::prost::alloc::string::String,
}
/// Represents an OAuth token of the account that authorized the Connection,
/// and associated metadata.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OAuthCredential {
    /// Required. A SecretManager resource containing the OAuth token that
    /// authorizes the connection. Format: `projects/*/secrets/*/versions/*`.
    #[prost(string, tag = "1")]
    pub oauth_token_secret_version: ::prost::alloc::string::String,
    /// Output only. The username associated with this token.
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
}
/// Configuration for connections to gitlab.com.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitLabConfig {
    /// Required. Immutable. SecretManager resource containing the webhook secret
    /// of a GitLab project, formatted as `projects/*/secrets/*/versions/*`. This
    /// is used to validate webhooks.
    #[prost(string, tag = "1")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    /// Required. A GitLab personal access token with the minimum `read_api` scope
    /// access and a minimum role of `reporter`. The GitLab Projects visible to
    /// this Personal Access Token will control which Projects Developer Connect
    /// has access to.
    #[prost(message, optional, tag = "2")]
    pub read_authorizer_credential: ::core::option::Option<UserCredential>,
    /// Required. A GitLab personal access token with the minimum `api` scope
    /// access and a minimum role of `maintainer`. The GitLab Projects visible to
    /// this Personal Access Token will control which Projects Developer Connect
    /// has access to.
    #[prost(message, optional, tag = "3")]
    pub authorizer_credential: ::core::option::Option<UserCredential>,
}
/// Represents a personal access token that authorized the Connection,
/// and associated metadata.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserCredential {
    /// Required. A SecretManager resource containing the user token that
    /// authorizes the Developer Connect connection. Format:
    /// `projects/*/secrets/*/versions/*`.
    #[prost(string, tag = "1")]
    pub user_token_secret_version: ::prost::alloc::string::String,
    /// Output only. The username associated with this token.
    #[prost(string, tag = "2")]
    pub username: ::prost::alloc::string::String,
}
/// Configuration for connections to an instance of GitLab Enterprise.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitLabEnterpriseConfig {
    /// Required. The URI of the GitLab Enterprise host this connection is for.
    #[prost(string, tag = "1")]
    pub host_uri: ::prost::alloc::string::String,
    /// Required. Immutable. SecretManager resource containing the webhook secret
    /// of a GitLab project, formatted as `projects/*/secrets/*/versions/*`. This
    /// is used to validate webhooks.
    #[prost(string, tag = "2")]
    pub webhook_secret_secret_version: ::prost::alloc::string::String,
    /// Required. A GitLab personal access token with the minimum `read_api` scope
    /// access and a minimum role of `reporter`. The GitLab Projects visible to
    /// this Personal Access Token will control which Projects Developer Connect
    /// has access to.
    #[prost(message, optional, tag = "3")]
    pub read_authorizer_credential: ::core::option::Option<UserCredential>,
    /// Required. A GitLab personal access token with the minimum `api` scope
    /// access and a minimum role of `maintainer`. The GitLab Projects visible to
    /// this Personal Access Token will control which Projects Developer Connect
    /// has access to.
    #[prost(message, optional, tag = "4")]
    pub authorizer_credential: ::core::option::Option<UserCredential>,
    /// Optional. Configuration for using Service Directory to privately connect to
    /// a GitLab Enterprise instance. This should only be set if the GitLab
    /// Enterprise server is hosted on-premises and not reachable by public
    /// internet. If this field is left empty, calls to the GitLab Enterprise
    /// server will be made over the public internet.
    #[prost(message, optional, tag = "5")]
    pub service_directory_config: ::core::option::Option<ServiceDirectoryConfig>,
    /// Optional. SSL Certificate Authority certificate to use for requests to
    /// GitLab Enterprise instance.
    #[prost(string, tag = "6")]
    pub ssl_ca_certificate: ::prost::alloc::string::String,
    /// Output only. Version of the GitLab Enterprise server running on the
    /// `host_uri`.
    #[prost(string, tag = "7")]
    pub server_version: ::prost::alloc::string::String,
}
/// Message for requesting list of Connections
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListConnectionsRequest {
    /// Required. Parent value for ListConnectionsRequest
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Message for response to listing Connections
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListConnectionsResponse {
    /// The list of Connection
    #[prost(message, repeated, tag = "1")]
    pub connections: ::prost::alloc::vec::Vec<Connection>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Message for getting a Connection
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConnectionRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Message for creating a Connection
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateConnectionRequest {
    /// Required. Value for parent.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. Id of the requesting object
    /// If auto-generating Id server-side, remove this field and
    /// connection_id from the method_signature of Create RPC
    #[prost(string, tag = "2")]
    pub connection_id: ::prost::alloc::string::String,
    /// Required. The resource being created
    #[prost(message, optional, tag = "3")]
    pub connection: ::core::option::Option<Connection>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "5")]
    pub validate_only: bool,
}
/// Message for updating a Connection
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateConnectionRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// Connection resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[prost(message, optional, tag = "1")]
    pub update_mask: ::core::option::Option<::prost_types::FieldMask>,
    /// Required. The resource being updated
    #[prost(message, optional, tag = "2")]
    pub connection: ::core::option::Option<Connection>,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "3")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set to true, and the connection is not found a new connection
    /// will be created. In this situation `update_mask` is ignored.
    /// The creation will succeed only if the input connection has all the
    /// necessary information (e.g a github_config with both  user_oauth_token and
    /// installation_id properties).
    #[prost(bool, tag = "4")]
    pub allow_missing: bool,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "5")]
    pub validate_only: bool,
}
/// Message for deleting a Connection
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteConnectionRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "3")]
    pub validate_only: bool,
    /// Optional. The current etag of the Connection.
    /// If an etag is provided and does not match the current etag of the
    /// Connection, deletion will be blocked and an ABORTED error will be returned.
    #[prost(string, tag = "4")]
    pub etag: ::prost::alloc::string::String,
}
/// Represents the metadata of the long-running operation.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[prost(message, optional, tag = "1")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. The time the operation finished running.
    #[prost(message, optional, tag = "2")]
    pub end_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. Server-defined resource path for the target of the operation.
    #[prost(string, tag = "3")]
    pub target: ::prost::alloc::string::String,
    /// Output only. Name of the verb executed by the operation.
    #[prost(string, tag = "4")]
    pub verb: ::prost::alloc::string::String,
    /// Output only. Human-readable status of the operation, if any.
    #[prost(string, tag = "5")]
    pub status_message: ::prost::alloc::string::String,
    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have been cancelled successfully
    /// have
    /// [google.longrunning.Operation.error][google.longrunning.Operation.error]
    /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
    /// corresponding to `Code.CANCELLED`.
    #[prost(bool, tag = "6")]
    pub requested_cancellation: bool,
    /// Output only. API version used to start the operation.
    #[prost(string, tag = "7")]
    pub api_version: ::prost::alloc::string::String,
}
/// Message describing the GitRepositoryLink object
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GitRepositoryLink {
    /// Identifier. Resource name of the repository, in the format
    /// `projects/*/locations/*/connections/*/gitRepositoryLinks/*`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Required. Git Clone URI.
    #[prost(string, tag = "2")]
    pub clone_uri: ::prost::alloc::string::String,
    /// Output only. \[Output only\] Create timestamp
    #[prost(message, optional, tag = "3")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. \[Output only\] Update timestamp
    #[prost(message, optional, tag = "4")]
    pub update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Output only. \[Output only\] Delete timestamp
    #[prost(message, optional, tag = "5")]
    pub delete_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Optional. Labels as key value pairs
    #[prost(map = "string, string", tag = "6")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[prost(string, tag = "7")]
    pub etag: ::prost::alloc::string::String,
    /// Output only. Set to true when the connection is being set up or updated in
    /// the background.
    #[prost(bool, tag = "8")]
    pub reconciling: bool,
    /// Optional. Allows clients to store small amounts of arbitrary data.
    #[prost(map = "string, string", tag = "9")]
    pub annotations: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Output only. A system-assigned unique identifier for a the
    /// GitRepositoryLink.
    #[prost(string, tag = "10")]
    pub uid: ::prost::alloc::string::String,
    /// Output only. External ID of the webhook created for the repository.
    #[prost(string, tag = "11")]
    pub webhook_id: ::prost::alloc::string::String,
}
/// Message for creating a GitRepositoryLink
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateGitRepositoryLinkRequest {
    /// Required. Value for parent.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The resource being created
    #[prost(message, optional, tag = "2")]
    pub git_repository_link: ::core::option::Option<GitRepositoryLink>,
    /// Required. The ID to use for the repository, which will become the final
    /// component of the repository's resource name. This ID should be unique in
    /// the connection. Allows alphanumeric characters and any of
    /// -._~%!$&'()*+,;=@.
    #[prost(string, tag = "3")]
    pub git_repository_link_id: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "4")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "5")]
    pub validate_only: bool,
}
/// Message for deleting a GitRepositoryLink
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteGitRepositoryLinkRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[prost(string, tag = "2")]
    pub request_id: ::prost::alloc::string::String,
    /// Optional. If set, validate the request, but do not actually post it.
    #[prost(bool, tag = "3")]
    pub validate_only: bool,
    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[prost(string, tag = "4")]
    pub etag: ::prost::alloc::string::String,
}
/// Message for requesting a list of GitRepositoryLinks
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListGitRepositoryLinksRequest {
    /// Required. Parent value for ListGitRepositoryLinksRequest
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. A token identifying a page of results the server should return.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
    /// Optional. Filtering results
    #[prost(string, tag = "4")]
    pub filter: ::prost::alloc::string::String,
    /// Optional. Hint for how to order the results
    #[prost(string, tag = "5")]
    pub order_by: ::prost::alloc::string::String,
}
/// Message for response to listing GitRepositoryLinks
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListGitRepositoryLinksResponse {
    /// The list of GitRepositoryLinks
    #[prost(message, repeated, tag = "1")]
    pub git_repository_links: ::prost::alloc::vec::Vec<GitRepositoryLink>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
    /// Locations that could not be reached.
    #[prost(string, repeated, tag = "3")]
    pub unreachable: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Message for getting a GitRepositoryLink
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetGitRepositoryLinkRequest {
    /// Required. Name of the resource
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
/// Message for fetching SCM read/write token.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchReadWriteTokenRequest {
    /// Required. The resource name of the gitRepositoryLink in the format
    /// `projects/*/locations/*/connections/*/gitRepositoryLinks/*`.
    #[prost(string, tag = "1")]
    pub git_repository_link: ::prost::alloc::string::String,
}
/// Message for fetching SCM read token.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchReadTokenRequest {
    /// Required. The resource name of the gitRepositoryLink in the format
    /// `projects/*/locations/*/connections/*/gitRepositoryLinks/*`.
    #[prost(string, tag = "1")]
    pub git_repository_link: ::prost::alloc::string::String,
}
/// Message for responding to get read token.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchReadTokenResponse {
    /// The token content.
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    /// Expiration timestamp. Can be empty if unknown or non-expiring.
    #[prost(message, optional, tag = "2")]
    pub expiration_time: ::core::option::Option<::prost_types::Timestamp>,
    /// The git_username to specify when making a git clone with the
    /// token. For example, for GitHub GitRepositoryLinks, this would be
    /// "x-access-token"
    #[prost(string, tag = "3")]
    pub git_username: ::prost::alloc::string::String,
}
/// Message for responding to get read/write token.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchReadWriteTokenResponse {
    /// The token content.
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    /// Expiration timestamp. Can be empty if unknown or non-expiring.
    #[prost(message, optional, tag = "2")]
    pub expiration_time: ::core::option::Option<::prost_types::Timestamp>,
    /// The git_username to specify when making a git clone with the
    /// token. For example, for GitHub GitRepositoryLinks, this would be
    /// "x-access-token"
    #[prost(string, tag = "3")]
    pub git_username: ::prost::alloc::string::String,
}
/// Request message for FetchLinkableGitRepositoriesRequest.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchLinkableGitRepositoriesRequest {
    /// Required. The name of the Connection.
    /// Format: `projects/*/locations/*/connections/*`.
    #[prost(string, tag = "1")]
    pub connection: ::prost::alloc::string::String,
    /// Optional. Number of results to return in the list. Defaults to 20.
    #[prost(int32, tag = "2")]
    pub page_size: i32,
    /// Optional. Page start.
    #[prost(string, tag = "3")]
    pub page_token: ::prost::alloc::string::String,
}
/// Response message for FetchLinkableGitRepositories.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchLinkableGitRepositoriesResponse {
    /// The git repositories that can be linked to the connection.
    #[prost(message, repeated, tag = "1")]
    pub linkable_git_repositories: ::prost::alloc::vec::Vec<LinkableGitRepository>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// LinkableGitRepository represents a git repository that can be linked to a
/// connection.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LinkableGitRepository {
    /// The clone uri of the repository.
    #[prost(string, tag = "1")]
    pub clone_uri: ::prost::alloc::string::String,
}
/// Request for fetching github installations.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchGitHubInstallationsRequest {
    /// Required. The resource name of the connection in the format
    /// `projects/*/locations/*/connections/*`.
    #[prost(string, tag = "1")]
    pub connection: ::prost::alloc::string::String,
}
/// Response of fetching github installations.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchGitHubInstallationsResponse {
    /// List of installations available to the OAuth user (for github.com)
    /// or all the installations (for GitHub enterprise).
    #[prost(message, repeated, tag = "1")]
    pub installations: ::prost::alloc::vec::Vec<
        fetch_git_hub_installations_response::Installation,
    >,
}
/// Nested message and enum types in `FetchGitHubInstallationsResponse`.
pub mod fetch_git_hub_installations_response {
    /// Represents an installation of the GitHub App.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Installation {
        /// ID of the installation in GitHub.
        #[prost(int64, tag = "1")]
        pub id: i64,
        /// Name of the GitHub user or organization that owns this installation.
        #[prost(string, tag = "2")]
        pub name: ::prost::alloc::string::String,
        /// Either "user" or "organization".
        #[prost(string, tag = "3")]
        pub r#type: ::prost::alloc::string::String,
    }
}
/// Request for fetching git refs.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchGitRefsRequest {
    /// Required. The resource name of GitRepositoryLink in the format
    /// `projects/*/locations/*/connections/*/gitRepositoryLinks/*`.
    #[prost(string, tag = "1")]
    pub git_repository_link: ::prost::alloc::string::String,
    /// Required. Type of refs to fetch.
    #[prost(enumeration = "fetch_git_refs_request::RefType", tag = "2")]
    pub ref_type: i32,
    /// Optional. Number of results to return in the list. Default to 20.
    #[prost(int32, tag = "4")]
    pub page_size: i32,
    /// Optional. Page start.
    #[prost(string, tag = "5")]
    pub page_token: ::prost::alloc::string::String,
}
/// Nested message and enum types in `FetchGitRefsRequest`.
pub mod fetch_git_refs_request {
    /// Type of refs.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum RefType {
        /// No type specified.
        Unspecified = 0,
        /// To fetch tags.
        Tag = 1,
        /// To fetch branches.
        Branch = 2,
    }
    impl RefType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "REF_TYPE_UNSPECIFIED",
                Self::Tag => "TAG",
                Self::Branch => "BRANCH",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "REF_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
                "TAG" => Some(Self::Tag),
                "BRANCH" => Some(Self::Branch),
                _ => None,
            }
        }
    }
}
/// Response for fetching git refs.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchGitRefsResponse {
    /// Name of the refs fetched.
    #[prost(string, repeated, tag = "1")]
    pub ref_names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// A token identifying a page of results the server should return.
    #[prost(string, tag = "2")]
    pub next_page_token: ::prost::alloc::string::String,
}
/// Generated client implementations.
pub mod developer_connect_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service describing handlers for resources
    #[derive(Debug, Clone)]
    pub struct DeveloperConnectClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl DeveloperConnectClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> DeveloperConnectClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> DeveloperConnectClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            DeveloperConnectClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Lists Connections in a given project and location.
        pub async fn list_connections(
            &mut self,
            request: impl tonic::IntoRequest<super::ListConnectionsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListConnectionsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/ListConnections",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "ListConnections",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single Connection.
        pub async fn get_connection(
            &mut self,
            request: impl tonic::IntoRequest<super::GetConnectionRequest>,
        ) -> std::result::Result<tonic::Response<super::Connection>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/GetConnection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "GetConnection",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a new Connection in a given project and location.
        pub async fn create_connection(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateConnectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/CreateConnection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "CreateConnection",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates the parameters of a single Connection.
        pub async fn update_connection(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateConnectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/UpdateConnection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "UpdateConnection",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single Connection.
        pub async fn delete_connection(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteConnectionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/DeleteConnection",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "DeleteConnection",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Creates a GitRepositoryLink. Upon linking a Git Repository, Developer
        /// Connect will configure the Git Repository to send webhook events to
        /// Developer Connect. Connections that use Firebase GitHub Application will
        /// have events forwarded to the Firebase service. All other Connections will
        /// have events forwarded to Cloud Build.
        pub async fn create_git_repository_link(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateGitRepositoryLinkRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/CreateGitRepositoryLink",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "CreateGitRepositoryLink",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Deletes a single GitRepositoryLink.
        pub async fn delete_git_repository_link(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteGitRepositoryLinkRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/DeleteGitRepositoryLink",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "DeleteGitRepositoryLink",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Lists GitRepositoryLinks in a given project, location, and connection.
        pub async fn list_git_repository_links(
            &mut self,
            request: impl tonic::IntoRequest<super::ListGitRepositoryLinksRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListGitRepositoryLinksResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/ListGitRepositoryLinks",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "ListGitRepositoryLinks",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Gets details of a single GitRepositoryLink.
        pub async fn get_git_repository_link(
            &mut self,
            request: impl tonic::IntoRequest<super::GetGitRepositoryLinkRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GitRepositoryLink>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/GetGitRepositoryLink",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "GetGitRepositoryLink",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Fetches read/write token of a given gitRepositoryLink.
        pub async fn fetch_read_write_token(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchReadWriteTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchReadWriteTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/FetchReadWriteToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "FetchReadWriteToken",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Fetches read token of a given gitRepositoryLink.
        pub async fn fetch_read_token(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchReadTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchReadTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/FetchReadToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "FetchReadToken",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// FetchLinkableGitRepositories returns a list of git repositories from an SCM
        /// that are available to be added to a Connection.
        pub async fn fetch_linkable_git_repositories(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchLinkableGitRepositoriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchLinkableGitRepositoriesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/FetchLinkableGitRepositories",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "FetchLinkableGitRepositories",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// FetchGitHubInstallations returns the list of GitHub Installations that
        /// are available to be added to a Connection.
        /// For github.com, only installations accessible to the authorizer token
        /// are returned. For GitHub Enterprise, all installations are returned.
        pub async fn fetch_git_hub_installations(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchGitHubInstallationsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchGitHubInstallationsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/FetchGitHubInstallations",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "FetchGitHubInstallations",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Fetch the list of branches or tags for a given repository.
        pub async fn fetch_git_refs(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchGitRefsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FetchGitRefsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.developerconnect.v1.DeveloperConnect/FetchGitRefs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.developerconnect.v1.DeveloperConnect",
                        "FetchGitRefs",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
