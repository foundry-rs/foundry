// This file is @generated by prost-build.
/// Request sent to FCM from the connected client.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpstreamRequest {
    /// The type of request the client is making to FCM.
    #[prost(oneof = "upstream_request::RequestType", tags = "1")]
    pub request_type: ::core::option::Option<upstream_request::RequestType>,
}
/// Nested message and enum types in `UpstreamRequest`.
pub mod upstream_request {
    /// The type of request the client is making to FCM.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum RequestType {
        /// Message acknowledgement.
        #[prost(message, tag = "1")]
        Ack(super::Ack),
    }
}
/// Response sent to the connected client from FCM.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DownstreamResponse {
    /// The type of response FCM is sending to the client.
    #[prost(oneof = "downstream_response::ResponseType", tags = "1")]
    pub response_type: ::core::option::Option<downstream_response::ResponseType>,
}
/// Nested message and enum types in `DownstreamResponse`.
pub mod downstream_response {
    /// The type of response FCM is sending to the client.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ResponseType {
        /// Message sent to FCM via the [Send
        /// API](<https://firebase.google.com/docs/cloud-messaging/send-message>)
        /// targeting this client.
        #[prost(message, tag = "1")]
        Message(super::Message),
    }
}
/// Acknowledgement to indicate a client successfully received an FCM message.
///
/// If a message is not acked, FCM will continously resend the message until
/// it expires. Duplicate delivery in this case is working as intended.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ack {
    /// Id of message being acknowledged
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
}
/// Message created through the [Send
/// API](<https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#resource-message>).
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Message {
    /// The identifier of the message. Used to ack the message.
    #[prost(string, tag = "1")]
    pub message_id: ::prost::alloc::string::String,
    /// Time the message was received in FCM.
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Expiry time of the message. Currently it is always 4 weeks.
    #[prost(message, optional, tag = "3")]
    pub expire_time: ::core::option::Option<::prost_types::Timestamp>,
    /// The arbitrary payload set in the [Send
    /// API](<https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#resource-message>).
    #[prost(map = "string, string", tag = "4")]
    pub data: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Generated client implementations.
pub mod connection_api_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// FCM's service to create client connections to send/receive messages.
    #[derive(Debug, Clone)]
    pub struct ConnectionApiClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ConnectionApiClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ConnectionApiClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ConnectionApiClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ConnectionApiClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Creates a streaming connection with FCM to send messages and their
        /// respective ACKs.
        ///
        /// The client credentials need to be passed in the [gRPC
        /// Metadata](https://grpc.io/docs/guides/concepts.html#metadata). The Format
        /// of the header is:
        ///   Key: "authorization"
        ///   Value: "Checkin [client_id:secret]"
        ///
        ///
        /// The project's API key also needs to be sent to authorize the project.
        /// That can be set in the X-Goog-Api-Key Metadata header.
        pub async fn connect(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::UpstreamRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::DownstreamResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.firebase.fcm.connection.v1alpha1.ConnectionApi/Connect",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.firebase.fcm.connection.v1alpha1.ConnectionApi",
                        "Connect",
                    ),
                );
            self.inner.streaming(req, path, codec).await
        }
    }
}
