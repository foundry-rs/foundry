// This file is @generated by prost-build.
/// Logged during the processing of an enrollment on an event in a message bus.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnrollmentActivity {
    /// The unique system generated ID associated with the event passed from the
    /// message bus.
    #[prost(string, tag = "1")]
    pub message_uid: ::prost::alloc::string::String,
    /// The CloudEvent ID and source from the attributes of the event.
    #[prost(map = "string, string", tag = "2")]
    pub attributes: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// The point in time when the activity occurred.
    #[prost(message, optional, tag = "3")]
    pub activity_time: ::core::option::Option<::prost_types::Timestamp>,
    /// One of the activities that can be logged during the processing of an
    /// enrollment.
    #[prost(oneof = "enrollment_activity::Activity", tags = "4")]
    pub activity: ::core::option::Option<enrollment_activity::Activity>,
}
/// Nested message and enum types in `EnrollmentActivity`.
pub mod enrollment_activity {
    /// Structured log message that is emitted when an event matches an enrollment.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Matched {
        /// Informational details about the matched event.
        #[prost(string, tag = "1")]
        pub details: ::prost::alloc::string::String,
        /// The destination this enrollment is matched to, such as the name of the
        /// pipeline.
        #[prost(string, tag = "2")]
        pub event_destination: ::prost::alloc::string::String,
        /// Logged when the enrollment encounters an error.
        #[prost(message, optional, tag = "3")]
        pub error: ::core::option::Option<
            super::super::super::super::super::rpc::Status,
        >,
    }
    /// One of the activities that can be logged during the processing of an
    /// enrollment.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Activity {
        /// Logged when an event matches an enrollment.
        #[prost(message, tag = "4")]
        Matched(Matched),
    }
}
/// Logged during the processing of a Google API event being sent to a
/// message bus.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GoogleApiSourceActivity {
    /// The unique system generated ID when a message bus receives an event. This
    /// ID is propagated throughout the request.
    #[prost(string, tag = "1")]
    pub message_uid: ::prost::alloc::string::String,
    /// The CloudEvent ID and source from the attributes of the event.
    #[prost(map = "string, string", tag = "2")]
    pub attributes: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// The point in time when the activity occurred.
    #[prost(message, optional, tag = "3")]
    pub activity_time: ::core::option::Option<::prost_types::Timestamp>,
    /// One of the activities that can be logged during the processing of a Google
    /// API event.
    #[prost(oneof = "google_api_source_activity::Activity", tags = "4")]
    pub activity: ::core::option::Option<google_api_source_activity::Activity>,
}
/// Nested message and enum types in `GoogleApiSourceActivity`.
pub mod google_api_source_activity {
    /// Structured log message that is emitted when an event is published to a
    /// message bus.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Published {
        /// The message bus associated with this GoogleApiEvent configuration.
        #[prost(string, tag = "1")]
        pub message_bus: ::prost::alloc::string::String,
        /// The event provider that produced the event.
        #[prost(string, tag = "2")]
        pub event_provider: ::prost::alloc::string::String,
        /// Any additional information about the event sent.
        #[prost(string, tag = "3")]
        pub details: ::prost::alloc::string::String,
        /// Logged if the event encounters an error.
        #[prost(message, optional, tag = "4")]
        pub error: ::core::option::Option<
            super::super::super::super::super::rpc::Status,
        >,
    }
    /// One of the activities that can be logged during the processing of a Google
    /// API event.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Activity {
        /// Logged when an event is published to a message bus.
        #[prost(message, tag = "4")]
        Published(Published),
    }
}
/// Logged during the processing of an event published to a message bus.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MessageBusActivity {
    /// The unique system generated ID when a message bus receives an event. This
    /// ID is propagated throughout the request.
    #[prost(string, tag = "1")]
    pub message_uid: ::prost::alloc::string::String,
    /// The CloudEvent ID and source from the attributes of the event.
    #[prost(map = "string, string", tag = "2")]
    pub attributes: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// The point in time when the activity occurred.
    #[prost(message, optional, tag = "3")]
    pub activity_time: ::core::option::Option<::prost_types::Timestamp>,
    /// One of the activities that can be logged during the processing of an event
    /// published to a message bus.
    #[prost(oneof = "message_bus_activity::Activity", tags = "4")]
    pub activity: ::core::option::Option<message_bus_activity::Activity>,
}
/// Nested message and enum types in `MessageBusActivity`.
pub mod message_bus_activity {
    /// Structured log message that is emitted when an event is received by a
    /// message bus.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Received {
        /// Informational details about the event received.
        #[prost(string, tag = "4")]
        pub details: ::prost::alloc::string::String,
        /// Logged when the enrollment encounters an error.
        #[prost(message, optional, tag = "5")]
        pub error: ::core::option::Option<
            super::super::super::super::super::rpc::Status,
        >,
    }
    /// One of the activities that can be logged during the processing of an event
    /// published to a message bus.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Activity {
        /// Logged when an event is received by a message bus.
        #[prost(message, tag = "4")]
        Received(Received),
    }
}
/// Logged during the processing of a message in a pipeline.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PipelineActivity {
    /// The unique system generated ID associated with the event passed from the
    /// message bus.
    #[prost(string, tag = "1")]
    pub message_uid: ::prost::alloc::string::String,
    /// The CloudEvent ID and source from the attributes of the event.
    #[prost(map = "string, string", tag = "2")]
    pub attributes: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// The point in time when the activity occurred.
    #[prost(message, optional, tag = "3")]
    pub activity_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Oneof for the different logging activities in a pipeline.
    #[prost(oneof = "pipeline_activity::Activity", tags = "4, 5, 6, 7, 8")]
    pub activity: ::core::option::Option<pipeline_activity::Activity>,
}
/// Nested message and enum types in `PipelineActivity`.
pub mod pipeline_activity {
    /// Structured log that is emitted when a message is received in this Pipeline
    /// (or an error encountered).
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MessageReceived {
        /// Informational details when a message is received from a source.
        #[prost(string, tag = "1")]
        pub details: ::prost::alloc::string::String,
        /// Input payload format of the message.
        #[prost(enumeration = "PayloadFormat", tag = "2")]
        pub input_payload_format: i32,
        /// Error encountered when receiving a message from a Channel, or if the
        /// message is malformed.
        #[prost(message, optional, tag = "3")]
        pub error: ::core::option::Option<
            super::super::super::super::super::rpc::Status,
        >,
    }
    /// Structured log that is emitted when a message is transformed during
    /// mediation (or an error encountered) in a Pipeline.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MessageTransformed {
        /// Informational details when a message is transformed during mediation.
        #[prost(string, tag = "1")]
        pub details: ::prost::alloc::string::String,
        /// Error encountered when transforming a message.
        #[prost(message, optional, tag = "2")]
        pub error: ::core::option::Option<
            super::super::super::super::super::rpc::Status,
        >,
    }
    /// Structured log that is emitted when a message is converted during
    /// mediation (or an error encountered) in a Pipeline.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MessageConverted {
        /// Informational details when a message is converted during mediation.
        #[prost(string, tag = "1")]
        pub details: ::prost::alloc::string::String,
        /// Input payload format of the message.
        #[prost(enumeration = "PayloadFormat", tag = "2")]
        pub input_payload_format: i32,
        /// Output payload format of the message.
        #[prost(enumeration = "PayloadFormat", tag = "3")]
        pub output_payload_format: i32,
        /// Error encountered when converting a message.
        #[prost(message, optional, tag = "4")]
        pub error: ::core::option::Option<
            super::super::super::super::super::rpc::Status,
        >,
    }
    /// Structured log that is emitted when a message request is dispatched to a
    /// destination (or an error encountered) in a Pipeline.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MessageRequestDispatched {
        /// Informational details when a message is dispatched to a destination.
        #[prost(string, tag = "1")]
        pub details: ::prost::alloc::string::String,
        /// The destination where the event is sent to.
        #[prost(string, tag = "2")]
        pub destination: ::prost::alloc::string::String,
        /// Error encountered before dispatching a message, e.g., malformed
        /// destination.
        #[prost(message, optional, tag = "3")]
        pub error: ::core::option::Option<
            super::super::super::super::super::rpc::Status,
        >,
    }
    /// Structured log that is emitted when a message response (or error) is
    /// received from a destination for a message request that was dispatched
    /// earlier in a Pipeline.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct MessageResponseReceived {
        /// Informational details when a message response was received by the target,
        /// or when the request failed.
        #[prost(string, tag = "1")]
        pub details: ::prost::alloc::string::String,
        /// The retry decision for the message after the response is received.
        #[prost(enumeration = "message_response_received::RetryStatus", tag = "2")]
        pub retry_status: i32,
        /// The future time when the message request will be retried. Present if and
        /// only if the `retry_status` is `WILL_RETRY`.
        #[prost(message, optional, tag = "3")]
        pub retry_time: ::core::option::Option<::prost_types::Timestamp>,
        /// The HTTP response code received with the message response.
        #[prost(int32, tag = "4")]
        pub http_response_code: i32,
        /// Status of the message response received.
        #[prost(message, optional, tag = "5")]
        pub error: ::core::option::Option<
            super::super::super::super::super::rpc::Status,
        >,
    }
    /// Nested message and enum types in `MessageResponseReceived`.
    pub mod message_response_received {
        /// Enum to encode the retry decision for the message after the response is
        /// received.
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            Eq,
            Hash,
            PartialOrd,
            Ord,
            ::prost::Enumeration
        )]
        #[repr(i32)]
        pub enum RetryStatus {
            /// Default value. This value is unused.
            Unspecified = 0,
            /// The Pipeline will retry dispatching the message to the destination.
            WillRetry = 1,
            /// The Pipeline will not retry this message anymore.
            RetryExhausted = 2,
        }
        impl RetryStatus {
            /// String value of the enum field names used in the ProtoBuf definition.
            ///
            /// The values are not transformed in any way and thus are considered stable
            /// (if the ProtoBuf definition does not change) and safe for programmatic use.
            pub fn as_str_name(&self) -> &'static str {
                match self {
                    Self::Unspecified => "RETRY_STATUS_UNSPECIFIED",
                    Self::WillRetry => "WILL_RETRY",
                    Self::RetryExhausted => "RETRY_EXHAUSTED",
                }
            }
            /// Creates an enum from field names used in the ProtoBuf definition.
            pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                match value {
                    "RETRY_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
                    "WILL_RETRY" => Some(Self::WillRetry),
                    "RETRY_EXHAUSTED" => Some(Self::RetryExhausted),
                    _ => None,
                }
            }
        }
    }
    /// Format of the payload.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum PayloadFormat {
        /// Default value. This value is unused.
        Unspecified = 0,
        /// JSON payload format.
        Json = 1,
        /// Proto payload format.
        Proto = 2,
        /// Avro payload format.
        Avro = 3,
    }
    impl PayloadFormat {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "PAYLOAD_FORMAT_UNSPECIFIED",
                Self::Json => "JSON",
                Self::Proto => "PROTO",
                Self::Avro => "AVRO",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "PAYLOAD_FORMAT_UNSPECIFIED" => Some(Self::Unspecified),
                "JSON" => Some(Self::Json),
                "PROTO" => Some(Self::Proto),
                "AVRO" => Some(Self::Avro),
                _ => None,
            }
        }
    }
    /// Oneof for the different logging activities in a pipeline.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Activity {
        /// Logging when a message is received in this Pipeline (or an error
        /// encountered).
        #[prost(message, tag = "4")]
        MessageReceived(MessageReceived),
        /// Logging when a message is transformed during mediation (or an error
        /// encountered).
        #[prost(message, tag = "5")]
        MessageTransformed(MessageTransformed),
        /// Logging when a message is converted during mediation (or an error
        /// encountered).
        #[prost(message, tag = "6")]
        MessageConverted(MessageConverted),
        /// Logging when a message request is dispatched to a destination (or an
        /// error encountered).
        #[prost(message, tag = "7")]
        MessageRequestDispatched(MessageRequestDispatched),
        /// Logging when a message response (or error) is received from a
        /// destination.
        #[prost(message, tag = "8")]
        MessageResponseReceived(MessageResponseReceived),
    }
}
