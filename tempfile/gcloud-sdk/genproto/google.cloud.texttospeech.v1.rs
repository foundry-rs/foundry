// This file is @generated by prost-build.
/// The top-level message sent by the client for the `ListVoices` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListVoicesRequest {
    /// Optional. Recommended.
    /// [BCP-47](<https://www.rfc-editor.org/rfc/bcp/bcp47.txt>) language tag.
    /// If not specified, the API will return all supported voices.
    /// If specified, the ListVoices call will only return voices that can be used
    /// to synthesize this language_code. For example, if you specify `"en-NZ"`,
    /// all `"en-NZ"` voices will be returned. If you specify `"no"`, both
    /// `"no-\*"` (Norwegian) and `"nb-\*"` (Norwegian Bokmal) voices will be
    /// returned.
    #[prost(string, tag = "1")]
    pub language_code: ::prost::alloc::string::String,
}
/// The message returned to the client by the `ListVoices` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListVoicesResponse {
    /// The list of voices.
    #[prost(message, repeated, tag = "1")]
    pub voices: ::prost::alloc::vec::Vec<Voice>,
}
/// Description of a voice supported by the TTS service.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Voice {
    /// The languages that this voice supports, expressed as
    /// [BCP-47](<https://www.rfc-editor.org/rfc/bcp/bcp47.txt>) language tags (e.g.
    /// "en-US", "es-419", "cmn-tw").
    #[prost(string, repeated, tag = "1")]
    pub language_codes: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// The name of this voice.  Each distinct voice has a unique name.
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// The gender of this voice.
    #[prost(enumeration = "SsmlVoiceGender", tag = "3")]
    pub ssml_gender: i32,
    /// The natural sample rate (in hertz) for this voice.
    #[prost(int32, tag = "4")]
    pub natural_sample_rate_hertz: i32,
}
/// Used for advanced voice options.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AdvancedVoiceOptions {
    /// Only for Journey voices. If false, the synthesis will be context aware
    /// and have higher latency.
    #[prost(bool, optional, tag = "1")]
    pub low_latency_journey_synthesis: ::core::option::Option<bool>,
}
/// The top-level message sent by the client for the `SynthesizeSpeech` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SynthesizeSpeechRequest {
    /// Required. The Synthesizer requires either plain text or SSML as input.
    #[prost(message, optional, tag = "1")]
    pub input: ::core::option::Option<SynthesisInput>,
    /// Required. The desired voice of the synthesized audio.
    #[prost(message, optional, tag = "2")]
    pub voice: ::core::option::Option<VoiceSelectionParams>,
    /// Required. The configuration of the synthesized audio.
    #[prost(message, optional, tag = "3")]
    pub audio_config: ::core::option::Option<AudioConfig>,
    /// Advanced voice options.
    #[prost(message, optional, tag = "8")]
    pub advanced_voice_options: ::core::option::Option<AdvancedVoiceOptions>,
}
/// Pronunciation customization for a phrase.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomPronunciationParams {
    /// The phrase to which the customization will be applied.
    /// The phrase can be multiple words (in the case of proper nouns etc), but
    /// should not span to a whole sentence.
    #[prost(string, optional, tag = "1")]
    pub phrase: ::core::option::Option<::prost::alloc::string::String>,
    /// The phonetic encoding of the phrase.
    #[prost(
        enumeration = "custom_pronunciation_params::PhoneticEncoding",
        optional,
        tag = "2"
    )]
    pub phonetic_encoding: ::core::option::Option<i32>,
    /// The pronunciation of the phrase. This must be in the phonetic encoding
    /// specified above.
    #[prost(string, optional, tag = "3")]
    pub pronunciation: ::core::option::Option<::prost::alloc::string::String>,
}
/// Nested message and enum types in `CustomPronunciationParams`.
pub mod custom_pronunciation_params {
    /// The phonetic encoding of the phrase.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum PhoneticEncoding {
        /// Not specified.
        Unspecified = 0,
        /// IPA. (e.g. apple -> ˈæpəl )
        /// <https://en.wikipedia.org/wiki/International_Phonetic_Alphabet>
        Ipa = 1,
        /// X-SAMPA (e.g. apple -> "{p@l" )
        /// <https://en.wikipedia.org/wiki/X-SAMPA>
        XSampa = 2,
    }
    impl PhoneticEncoding {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "PHONETIC_ENCODING_UNSPECIFIED",
                Self::Ipa => "PHONETIC_ENCODING_IPA",
                Self::XSampa => "PHONETIC_ENCODING_X_SAMPA",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "PHONETIC_ENCODING_UNSPECIFIED" => Some(Self::Unspecified),
                "PHONETIC_ENCODING_IPA" => Some(Self::Ipa),
                "PHONETIC_ENCODING_X_SAMPA" => Some(Self::XSampa),
                _ => None,
            }
        }
    }
}
/// A collection of pronunciation customizations.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomPronunciations {
    /// The pronunciation customizations to be applied.
    #[prost(message, repeated, tag = "1")]
    pub pronunciations: ::prost::alloc::vec::Vec<CustomPronunciationParams>,
}
/// A collection of turns for multi-speaker synthesis.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiSpeakerMarkup {
    /// Required. Speaker turns.
    #[prost(message, repeated, tag = "1")]
    pub turns: ::prost::alloc::vec::Vec<multi_speaker_markup::Turn>,
}
/// Nested message and enum types in `MultiSpeakerMarkup`.
pub mod multi_speaker_markup {
    /// A Multi-speaker turn.
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Turn {
        /// Required. The speaker of the turn, for example, 'O' or 'Q'. Please refer
        /// to documentation for available speakers.
        #[prost(string, tag = "1")]
        pub speaker: ::prost::alloc::string::String,
        /// Required. The text to speak.
        #[prost(string, tag = "2")]
        pub text: ::prost::alloc::string::String,
    }
}
/// Contains text input to be synthesized. Either `text` or `ssml` must be
/// supplied. Supplying both or neither returns
/// [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]. The
/// input size is limited to 5000 bytes.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SynthesisInput {
    /// Optional. The pronunciation customizations to be applied to the input. If
    /// this is set, the input will be synthesized using the given pronunciation
    /// customizations.
    ///
    /// The initial support will be for EFIGS (English, French,
    /// Italian, German, Spanish) languages, as provided in
    /// VoiceSelectionParams. Journey and Instant Clone voices are
    /// not supported yet.
    ///
    /// In order to customize the pronunciation of a phrase, there must be an exact
    /// match of the phrase in the input types. If using SSML, the phrase must not
    /// be inside a phoneme tag (entirely or partially).
    #[prost(message, optional, tag = "3")]
    pub custom_pronunciations: ::core::option::Option<CustomPronunciations>,
    /// The input source, which is either plain text or SSML.
    #[prost(oneof = "synthesis_input::InputSource", tags = "1, 2, 4")]
    pub input_source: ::core::option::Option<synthesis_input::InputSource>,
}
/// Nested message and enum types in `SynthesisInput`.
pub mod synthesis_input {
    /// The input source, which is either plain text or SSML.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InputSource {
        /// The raw text to be synthesized.
        #[prost(string, tag = "1")]
        Text(::prost::alloc::string::String),
        /// The SSML document to be synthesized. The SSML document must be valid
        /// and well-formed. Otherwise the RPC will fail and return
        /// [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT]. For
        /// more information, see
        /// [SSML](<https://cloud.google.com/text-to-speech/docs/ssml>).
        #[prost(string, tag = "2")]
        Ssml(::prost::alloc::string::String),
        /// The multi-speaker input to be synthesized. Only applicable for
        /// multi-speaker synthesis.
        #[prost(message, tag = "4")]
        MultiSpeakerMarkup(super::MultiSpeakerMarkup),
    }
}
/// Description of which voice to use for a synthesis request.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VoiceSelectionParams {
    /// Required. The language (and potentially also the region) of the voice
    /// expressed as a [BCP-47](<https://www.rfc-editor.org/rfc/bcp/bcp47.txt>)
    /// language tag, e.g. "en-US". This should not include a script tag (e.g. use
    /// "cmn-cn" rather than "cmn-Hant-cn"), because the script will be inferred
    /// from the input provided in the SynthesisInput.  The TTS service
    /// will use this parameter to help choose an appropriate voice.  Note that
    /// the TTS service may choose a voice with a slightly different language code
    /// than the one selected; it may substitute a different region
    /// (e.g. using en-US rather than en-CA if there isn't a Canadian voice
    /// available), or even a different language, e.g. using "nb" (Norwegian
    /// Bokmal) instead of "no" (Norwegian)".
    #[prost(string, tag = "1")]
    pub language_code: ::prost::alloc::string::String,
    /// The name of the voice. If both the name and the gender are not set,
    /// the service will choose a voice based on the other parameters such as
    /// language_code.
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    /// The preferred gender of the voice. If not set, the service will
    /// choose a voice based on the other parameters such as language_code and
    /// name. Note that this is only a preference, not requirement; if a
    /// voice of the appropriate gender is not available, the synthesizer should
    /// substitute a voice with a different gender rather than failing the request.
    #[prost(enumeration = "SsmlVoiceGender", tag = "3")]
    pub ssml_gender: i32,
    /// The configuration for a custom voice. If \[CustomVoiceParams.model\] is set,
    /// the service will choose the custom voice matching the specified
    /// configuration.
    #[prost(message, optional, tag = "4")]
    pub custom_voice: ::core::option::Option<CustomVoiceParams>,
    /// Optional. The configuration for a voice clone. If
    /// \[VoiceCloneParams.voice_clone_key\] is set, the service will choose the
    /// voice clone matching the specified configuration.
    #[prost(message, optional, tag = "5")]
    pub voice_clone: ::core::option::Option<VoiceCloneParams>,
}
/// Description of audio data to be synthesized.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AudioConfig {
    /// Required. The format of the audio byte stream.
    #[prost(enumeration = "AudioEncoding", tag = "1")]
    pub audio_encoding: i32,
    /// Optional. Input only. Speaking rate/speed, in the range \[0.25, 4.0\]. 1.0 is
    /// the normal native speed supported by the specific voice. 2.0 is twice as
    /// fast, and 0.5 is half as fast. If unset(0.0), defaults to the native 1.0
    /// speed. Any other values < 0.25 or > 4.0 will return an error.
    #[prost(double, tag = "2")]
    pub speaking_rate: f64,
    /// Optional. Input only. Speaking pitch, in the range \[-20.0, 20.0\]. 20 means
    /// increase 20 semitones from the original pitch. -20 means decrease 20
    /// semitones from the original pitch.
    #[prost(double, tag = "3")]
    pub pitch: f64,
    /// Optional. Input only. Volume gain (in dB) of the normal native volume
    /// supported by the specific voice, in the range \[-96.0, 16.0\]. If unset, or
    /// set to a value of 0.0 (dB), will play at normal native signal amplitude. A
    /// value of -6.0 (dB) will play at approximately half the amplitude of the
    /// normal native signal amplitude. A value of +6.0 (dB) will play at
    /// approximately twice the amplitude of the normal native signal amplitude.
    /// Strongly recommend not to exceed +10 (dB) as there's usually no effective
    /// increase in loudness for any value greater than that.
    #[prost(double, tag = "4")]
    pub volume_gain_db: f64,
    /// Optional. The synthesis sample rate (in hertz) for this audio. When this is
    /// specified in SynthesizeSpeechRequest, if this is different from the voice's
    /// natural sample rate, then the synthesizer will honor this request by
    /// converting to the desired sample rate (which might result in worse audio
    /// quality), unless the specified sample rate is not supported for the
    /// encoding chosen, in which case it will fail the request and return
    /// [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT].
    #[prost(int32, tag = "5")]
    pub sample_rate_hertz: i32,
    /// Optional. Input only. An identifier which selects 'audio effects' profiles
    /// that are applied on (post synthesized) text to speech. Effects are applied
    /// on top of each other in the order they are given. See
    /// [audio
    /// profiles](<https://cloud.google.com/text-to-speech/docs/audio-profiles>) for
    /// current supported profile ids.
    #[prost(string, repeated, tag = "6")]
    pub effects_profile_id: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// Description of the custom voice to be synthesized.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomVoiceParams {
    /// Required. The name of the AutoML model that synthesizes the custom voice.
    #[prost(string, tag = "1")]
    pub model: ::prost::alloc::string::String,
    /// Optional. Deprecated. The usage of the synthesized audio to be reported.
    #[deprecated]
    #[prost(enumeration = "custom_voice_params::ReportedUsage", tag = "3")]
    pub reported_usage: i32,
}
/// Nested message and enum types in `CustomVoiceParams`.
pub mod custom_voice_params {
    /// Deprecated. The usage of the synthesized audio. Usage does not affect
    /// billing.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ReportedUsage {
        /// Request with reported usage unspecified will be rejected.
        Unspecified = 0,
        /// For scenarios where the synthesized audio is not downloadable and can
        /// only be used once. For example, real-time request in IVR system.
        Realtime = 1,
        /// For scenarios where the synthesized audio is downloadable and can be
        /// reused. For example, the synthesized audio is downloaded, stored in
        /// customer service system and played repeatedly.
        Offline = 2,
    }
    impl ReportedUsage {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "REPORTED_USAGE_UNSPECIFIED",
                Self::Realtime => "REALTIME",
                Self::Offline => "OFFLINE",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "REPORTED_USAGE_UNSPECIFIED" => Some(Self::Unspecified),
                "REALTIME" => Some(Self::Realtime),
                "OFFLINE" => Some(Self::Offline),
                _ => None,
            }
        }
    }
}
/// The configuration of Voice Clone feature.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VoiceCloneParams {
    /// Required. Created by GenerateVoiceCloningKey.
    #[prost(string, tag = "1")]
    pub voice_cloning_key: ::prost::alloc::string::String,
}
/// The message returned to the client by the `SynthesizeSpeech` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SynthesizeSpeechResponse {
    /// The audio data bytes encoded as specified in the request, including the
    /// header for encodings that are wrapped in containers (e.g. MP3, OGG_OPUS).
    /// For LINEAR16 audio, we include the WAV header. Note: as
    /// with all bytes fields, protobuffers use a pure binary representation,
    /// whereas JSON representations use base64.
    #[prost(bytes = "vec", tag = "1")]
    pub audio_content: ::prost::alloc::vec::Vec<u8>,
}
/// Description of the desired output audio data.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StreamingAudioConfig {
    /// Required. The format of the audio byte stream.
    /// For now, streaming only supports PCM and OGG_OPUS. All other encodings
    /// will return an error.
    #[prost(enumeration = "AudioEncoding", tag = "1")]
    pub audio_encoding: i32,
    /// Optional. The synthesis sample rate (in hertz) for this audio.
    #[prost(int32, tag = "2")]
    pub sample_rate_hertz: i32,
}
/// Provides configuration information for the StreamingSynthesize request.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamingSynthesizeConfig {
    /// Required. The desired voice of the synthesized audio.
    #[prost(message, optional, tag = "1")]
    pub voice: ::core::option::Option<VoiceSelectionParams>,
    /// Optional. The configuration of the synthesized audio.
    #[prost(message, optional, tag = "4")]
    pub streaming_audio_config: ::core::option::Option<StreamingAudioConfig>,
}
/// Input to be synthesized.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamingSynthesisInput {
    #[prost(oneof = "streaming_synthesis_input::InputSource", tags = "1")]
    pub input_source: ::core::option::Option<streaming_synthesis_input::InputSource>,
}
/// Nested message and enum types in `StreamingSynthesisInput`.
pub mod streaming_synthesis_input {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum InputSource {
        /// The raw text to be synthesized. It is recommended that each input
        /// contains complete, terminating sentences, as this will likely result in
        /// better prosody in the output audio. That being said, users are free to
        /// input text however they please.
        #[prost(string, tag = "1")]
        Text(::prost::alloc::string::String),
    }
}
/// Request message for the `StreamingSynthesize` method. Multiple
/// `StreamingSynthesizeRequest` messages are sent in one call.
/// The first message must contain a `streaming_config` that
/// fully specifies the request configuration and must not contain `input`. All
/// subsequent messages must only have `input` set.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamingSynthesizeRequest {
    /// The request to be sent, either a StreamingSynthesizeConfig or
    /// StreamingSynthesisInput.
    #[prost(oneof = "streaming_synthesize_request::StreamingRequest", tags = "1, 2")]
    pub streaming_request: ::core::option::Option<
        streaming_synthesize_request::StreamingRequest,
    >,
}
/// Nested message and enum types in `StreamingSynthesizeRequest`.
pub mod streaming_synthesize_request {
    /// The request to be sent, either a StreamingSynthesizeConfig or
    /// StreamingSynthesisInput.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum StreamingRequest {
        /// StreamingSynthesizeConfig to be used in this streaming attempt. Only
        /// specified in the first message sent in a `StreamingSynthesize` call.
        #[prost(message, tag = "1")]
        StreamingConfig(super::StreamingSynthesizeConfig),
        /// Input to synthesize. Specified in all messages but the first in a
        /// `StreamingSynthesize` call.
        #[prost(message, tag = "2")]
        Input(super::StreamingSynthesisInput),
    }
}
/// `StreamingSynthesizeResponse` is the only message returned to the
/// client by `StreamingSynthesize` method. A series of zero or more
/// `StreamingSynthesizeResponse` messages are streamed back to the client.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StreamingSynthesizeResponse {
    /// The audio data bytes encoded as specified in the request. This is
    /// headerless LINEAR16 audio with a sample rate of 24000.
    #[prost(bytes = "vec", tag = "1")]
    pub audio_content: ::prost::alloc::vec::Vec<u8>,
}
/// Gender of the voice as described in
/// [SSML voice element](<https://www.w3.org/TR/speech-synthesis11/#edef_voice>).
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SsmlVoiceGender {
    /// An unspecified gender.
    /// In VoiceSelectionParams, this means that the client doesn't care which
    /// gender the selected voice will have. In the Voice field of
    /// ListVoicesResponse, this may mean that the voice doesn't fit any of the
    /// other categories in this enum, or that the gender of the voice isn't known.
    Unspecified = 0,
    /// A male voice.
    Male = 1,
    /// A female voice.
    Female = 2,
    /// A gender-neutral voice. This voice is not yet supported.
    Neutral = 3,
}
impl SsmlVoiceGender {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SSML_VOICE_GENDER_UNSPECIFIED",
            Self::Male => "MALE",
            Self::Female => "FEMALE",
            Self::Neutral => "NEUTRAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SSML_VOICE_GENDER_UNSPECIFIED" => Some(Self::Unspecified),
            "MALE" => Some(Self::Male),
            "FEMALE" => Some(Self::Female),
            "NEUTRAL" => Some(Self::Neutral),
            _ => None,
        }
    }
}
/// Configuration to set up audio encoder. The encoding determines the output
/// audio format that we'd like.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AudioEncoding {
    /// Not specified. Will return result
    /// [google.rpc.Code.INVALID_ARGUMENT][google.rpc.Code.INVALID_ARGUMENT].
    Unspecified = 0,
    /// Uncompressed 16-bit signed little-endian samples (Linear PCM).
    /// Audio content returned as LINEAR16 also contains a WAV header.
    Linear16 = 1,
    /// MP3 audio at 32kbps.
    Mp3 = 2,
    /// Opus encoded audio wrapped in an ogg container. The result will be a
    /// file which can be played natively on Android, and in browsers (at least
    /// Chrome and Firefox). The quality of the encoding is considerably higher
    /// than MP3 while using approximately the same bitrate.
    OggOpus = 3,
    /// 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
    /// Audio content returned as MULAW also contains a WAV header.
    Mulaw = 5,
    /// 8-bit samples that compand 14-bit audio samples using G.711 PCMU/A-law.
    /// Audio content returned as ALAW also contains a WAV header.
    Alaw = 6,
    /// Uncompressed 16-bit signed little-endian samples (Linear PCM).
    /// Note that as opposed to LINEAR16, audio will not be wrapped in a WAV (or
    /// any other) header.
    Pcm = 7,
}
impl AudioEncoding {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "AUDIO_ENCODING_UNSPECIFIED",
            Self::Linear16 => "LINEAR16",
            Self::Mp3 => "MP3",
            Self::OggOpus => "OGG_OPUS",
            Self::Mulaw => "MULAW",
            Self::Alaw => "ALAW",
            Self::Pcm => "PCM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AUDIO_ENCODING_UNSPECIFIED" => Some(Self::Unspecified),
            "LINEAR16" => Some(Self::Linear16),
            "MP3" => Some(Self::Mp3),
            "OGG_OPUS" => Some(Self::OggOpus),
            "MULAW" => Some(Self::Mulaw),
            "ALAW" => Some(Self::Alaw),
            "PCM" => Some(Self::Pcm),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod text_to_speech_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service that implements Google Cloud Text-to-Speech API.
    #[derive(Debug, Clone)]
    pub struct TextToSpeechClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl TextToSpeechClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> TextToSpeechClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> TextToSpeechClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            TextToSpeechClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Returns a list of Voice supported for synthesis.
        pub async fn list_voices(
            &mut self,
            request: impl tonic::IntoRequest<super::ListVoicesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListVoicesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.texttospeech.v1.TextToSpeech/ListVoices",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.texttospeech.v1.TextToSpeech",
                        "ListVoices",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Synthesizes speech synchronously: receive results after all text input
        /// has been processed.
        pub async fn synthesize_speech(
            &mut self,
            request: impl tonic::IntoRequest<super::SynthesizeSpeechRequest>,
        ) -> std::result::Result<
            tonic::Response<super::SynthesizeSpeechResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.texttospeech.v1.TextToSpeech/SynthesizeSpeech",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.texttospeech.v1.TextToSpeech",
                        "SynthesizeSpeech",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Performs bidirectional streaming speech synthesis: receive audio while
        /// sending text.
        pub async fn streaming_synthesize(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::StreamingSynthesizeRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::StreamingSynthesizeResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.texttospeech.v1.TextToSpeech/StreamingSynthesize",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.texttospeech.v1.TextToSpeech",
                        "StreamingSynthesize",
                    ),
                );
            self.inner.streaming(req, path, codec).await
        }
    }
}
/// The top-level message sent by the client for the
/// `SynthesizeLongAudio` method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SynthesizeLongAudioRequest {
    /// The resource states of the request in the form of
    /// `projects/*/locations/*`.
    #[prost(string, tag = "1")]
    pub parent: ::prost::alloc::string::String,
    /// Required. The Synthesizer requires either plain text or SSML as input.
    #[prost(message, optional, tag = "2")]
    pub input: ::core::option::Option<SynthesisInput>,
    /// Required. The configuration of the synthesized audio.
    #[prost(message, optional, tag = "3")]
    pub audio_config: ::core::option::Option<AudioConfig>,
    /// Required. Specifies a Cloud Storage URI for the synthesis results. Must be
    /// specified in the format: `gs://bucket_name/object_name`, and the bucket
    /// must already exist.
    #[prost(string, tag = "4")]
    pub output_gcs_uri: ::prost::alloc::string::String,
    /// Required. The desired voice of the synthesized audio.
    #[prost(message, optional, tag = "5")]
    pub voice: ::core::option::Option<VoiceSelectionParams>,
}
/// The message returned to the client by the `SynthesizeLongAudio` method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SynthesizeLongAudioResponse {}
/// Metadata for response returned by the `SynthesizeLongAudio` method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SynthesizeLongAudioMetadata {
    /// Time when the request was received.
    #[prost(message, optional, tag = "1")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
    /// Deprecated. Do not use.
    #[deprecated]
    #[prost(message, optional, tag = "2")]
    pub last_update_time: ::core::option::Option<::prost_types::Timestamp>,
    /// The progress of the most recent processing update in percentage, ie. 70.0%.
    #[prost(double, tag = "3")]
    pub progress_percentage: f64,
}
/// Generated client implementations.
pub mod text_to_speech_long_audio_synthesize_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service that implements Google Cloud Text-to-Speech API.
    #[derive(Debug, Clone)]
    pub struct TextToSpeechLongAudioSynthesizeClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl TextToSpeechLongAudioSynthesizeClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> TextToSpeechLongAudioSynthesizeClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> TextToSpeechLongAudioSynthesizeClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            TextToSpeechLongAudioSynthesizeClient::new(
                InterceptedService::new(inner, interceptor),
            )
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Synthesizes long form text asynchronously.
        pub async fn synthesize_long_audio(
            &mut self,
            request: impl tonic::IntoRequest<super::SynthesizeLongAudioRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::super::longrunning::Operation>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/google.cloud.texttospeech.v1.TextToSpeechLongAudioSynthesize/SynthesizeLongAudio",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "google.cloud.texttospeech.v1.TextToSpeechLongAudioSynthesize",
                        "SynthesizeLongAudio",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
