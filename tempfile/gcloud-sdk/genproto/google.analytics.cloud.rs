// This file is @generated by prost-build.
/// ExportStatusLog is used in a log entry to represent the status of a given
/// BigQuery export job from Google Analytics. Typically, it is sent at the
/// beginning of the day to indicate the completion of the previous day's export.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExportStatusLog {
    /// The date of the export. Usually set to the collection date (YYYYMMDD).
    #[prost(string, tag = "1")]
    pub export_date: ::prost::alloc::string::String,
    /// The status of the export.
    #[prost(enumeration = "export_status_log::Status", tag = "2")]
    pub status: i32,
    /// The number of events exported, may include events not eligible for SLA.
    #[prost(int64, tag = "3")]
    pub event_count: i64,
    /// Additional information associated with the status.
    #[prost(string, tag = "4")]
    pub message: ::prost::alloc::string::String,
}
/// Nested message and enum types in `ExportStatusLog`.
pub mod export_status_log {
    /// The status of the export.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Status {
        /// The export status is unknown.
        Unknown = 0,
        /// The export completed and data is complete.
        Complete = 1,
        /// The export completed but data is incomplete.
        Incomplete = 2,
        /// The export failed.
        Failed = 3,
    }
    impl Status {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unknown => "UNKNOWN",
                Self::Complete => "COMPLETE",
                Self::Incomplete => "INCOMPLETE",
                Self::Failed => "FAILED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNKNOWN" => Some(Self::Unknown),
                "COMPLETE" => Some(Self::Complete),
                "INCOMPLETE" => Some(Self::Incomplete),
                "FAILED" => Some(Self::Failed),
                _ => None,
            }
        }
    }
}
