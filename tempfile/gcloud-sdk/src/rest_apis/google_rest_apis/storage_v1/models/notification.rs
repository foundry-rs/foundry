/*
 * Cloud Storage JSON API
 *
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::storage_v1::models;
use serde::{Deserialize, Serialize};

/// Notification : A subscription to receive Google PubSub notifications.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Notification {
    /// An optional list of additional attributes to attach to each Cloud PubSub message published for this notification subscription.
    #[serde(rename = "custom_attributes", skip_serializing_if = "Option::is_none")]
    pub custom_attributes: Option<std::collections::HashMap<String, String>>,
    /// HTTP 1.1 Entity tag for this subscription notification.
    #[serde(rename = "etag", skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// If present, only send notifications about listed event types. If empty, sent notifications for all event types.
    #[serde(rename = "event_types", skip_serializing_if = "Option::is_none")]
    pub event_types: Option<Vec<String>>,
    /// The ID of the notification.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The kind of item this is. For notifications, this is always storage#notification.
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// If present, only apply this notification configuration to object names that begin with this prefix.
    #[serde(rename = "object_name_prefix", skip_serializing_if = "Option::is_none")]
    pub object_name_prefix: Option<String>,
    /// The desired content of the Payload.
    #[serde(rename = "payload_format", skip_serializing_if = "Option::is_none")]
    pub payload_format: Option<String>,
    /// The canonical URL of this notification.
    #[serde(rename = "selfLink", skip_serializing_if = "Option::is_none")]
    pub self_link: Option<String>,
    /// The Cloud PubSub topic to which this subscription publishes. Formatted as: '//pubsub.googleapis.com/projects/{project-identifier}/topics/{my-topic}'
    #[serde(rename = "topic", skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
}

impl Notification {
    /// A subscription to receive Google PubSub notifications.
    pub fn new() -> Notification {
        Notification {
            custom_attributes: None,
            etag: None,
            event_types: None,
            id: None,
            kind: None,
            object_name_prefix: None,
            payload_format: None,
            self_link: None,
            topic: None,
        }
    }
}
