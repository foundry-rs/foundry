/*
 * Cloud Storage JSON API
 *
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::storage_v1::models;
use serde::{Deserialize, Serialize};

/// TestIamPermissionsResponse : A storage.(buckets|objects|managedFolders).testIamPermissions response.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TestIamPermissionsResponse {
    /// The kind of item this is.
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The permissions held by the caller. Permissions are always of the format storage.resource.capability, where resource is one of buckets, objects, or managedFolders. The supported permissions are as follows:   - storage.buckets.delete — Delete bucket.   - storage.buckets.get — Read bucket metadata.   - storage.buckets.getIamPolicy — Read bucket IAM policy.   - storage.buckets.create — Create bucket.   - storage.buckets.list — List buckets.   - storage.buckets.setIamPolicy — Update bucket IAM policy.   - storage.buckets.update — Update bucket metadata.   - storage.objects.delete — Delete object.   - storage.objects.get — Read object data and metadata.   - storage.objects.getIamPolicy — Read object IAM policy.   - storage.objects.create — Create object.   - storage.objects.list — List objects.   - storage.objects.setIamPolicy — Update object IAM policy.   - storage.objects.update — Update object metadata.  - storage.managedFolders.delete — Delete managed folder.   - storage.managedFolders.get — Read managed folder metadata.   - storage.managedFolders.getIamPolicy — Read managed folder IAM policy.   - storage.managedFolders.create — Create managed folder.   - storage.managedFolders.list — List managed folders.   - storage.managedFolders.setIamPolicy — Update managed folder IAM policy.
    #[serde(rename = "permissions", skip_serializing_if = "Option::is_none")]
    pub permissions: Option<Vec<String>>,
}

impl TestIamPermissionsResponse {
    /// A storage.(buckets|objects|managedFolders).testIamPermissions response.
    pub fn new() -> TestIamPermissionsResponse {
        TestIamPermissionsResponse {
            kind: None,
            permissions: None,
        }
    }
}
