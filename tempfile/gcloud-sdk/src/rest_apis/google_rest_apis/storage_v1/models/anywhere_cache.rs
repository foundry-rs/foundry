/*
 * Cloud Storage JSON API
 *
 * Stores and retrieves potentially large, immutable data objects.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::storage_v1::models;
use serde::{Deserialize, Serialize};

/// AnywhereCache : An Anywhere Cache instance.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AnywhereCache {
    /// The cache-level entry admission policy.
    #[serde(rename = "admissionPolicy", skip_serializing_if = "Option::is_none")]
    pub admission_policy: Option<String>,
    /// The ID of the Anywhere cache instance.
    #[serde(rename = "anywhereCacheId", skip_serializing_if = "Option::is_none")]
    pub anywhere_cache_id: Option<String>,
    /// The name of the bucket containing this cache instance.
    #[serde(rename = "bucket", skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// The creation time of the cache instance in RFC 3339 format.
    #[serde(rename = "createTime", skip_serializing_if = "Option::is_none")]
    pub create_time: Option<String>,
    /// The ID of the resource, including the project number, bucket name and anywhere cache ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The kind of item this is. For Anywhere Cache, this is always storage#anywhereCache.
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// True if the cache instance has an active Update long-running operation.
    #[serde(rename = "pendingUpdate", skip_serializing_if = "Option::is_none")]
    pub pending_update: Option<bool>,
    /// The link to this cache instance.
    #[serde(rename = "selfLink", skip_serializing_if = "Option::is_none")]
    pub self_link: Option<String>,
    /// The current state of the cache instance.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The TTL of all cache entries in whole seconds. e.g., \"7200s\".
    #[serde(rename = "ttl", skip_serializing_if = "Option::is_none")]
    pub ttl: Option<String>,
    /// The modification time of the cache instance metadata in RFC 3339 format.
    #[serde(rename = "updateTime", skip_serializing_if = "Option::is_none")]
    pub update_time: Option<String>,
    /// The zone in which the cache instance is running. For example, us-central1-a.
    #[serde(rename = "zone", skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

impl AnywhereCache {
    /// An Anywhere Cache instance.
    pub fn new() -> AnywhereCache {
        AnywhereCache {
            admission_policy: None,
            anywhere_cache_id: None,
            bucket: None,
            create_time: None,
            id: None,
            kind: None,
            pending_update: None,
            self_link: None,
            state: None,
            ttl: None,
            update_time: None,
            zone: None,
        }
    }
}
