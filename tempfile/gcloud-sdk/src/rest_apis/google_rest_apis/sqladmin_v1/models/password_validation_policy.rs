/*
 * Cloud SQL Admin API
 *
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::sqladmin_v1::models;
use serde::{Deserialize, Serialize};

/// PasswordValidationPolicy : Database instance local user password validation policy
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PasswordValidationPolicy {
    /// The complexity of the password.
    #[serde(rename = "complexity", skip_serializing_if = "Option::is_none")]
    pub complexity: Option<Complexity>,
    /// Disallow username as a part of the password.
    #[serde(
        rename = "disallowUsernameSubstring",
        skip_serializing_if = "Option::is_none"
    )]
    pub disallow_username_substring: Option<bool>,
    /// Whether the password policy is enabled or not.
    #[serde(
        rename = "enablePasswordPolicy",
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_password_policy: Option<bool>,
    /// Minimum number of characters allowed.
    #[serde(rename = "minLength", skip_serializing_if = "Option::is_none")]
    pub min_length: Option<i32>,
    /// Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL.
    #[serde(
        rename = "passwordChangeInterval",
        skip_serializing_if = "Option::is_none"
    )]
    pub password_change_interval: Option<String>,
    /// Number of previous passwords that cannot be reused.
    #[serde(rename = "reuseInterval", skip_serializing_if = "Option::is_none")]
    pub reuse_interval: Option<i32>,
}

impl PasswordValidationPolicy {
    /// Database instance local user password validation policy
    pub fn new() -> PasswordValidationPolicy {
        PasswordValidationPolicy {
            complexity: None,
            disallow_username_substring: None,
            enable_password_policy: None,
            min_length: None,
            password_change_interval: None,
            reuse_interval: None,
        }
    }
}
/// The complexity of the password.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Complexity {
    #[serde(rename = "COMPLEXITY_UNSPECIFIED")]
    Unspecified,
    #[serde(rename = "COMPLEXITY_DEFAULT")]
    Default,
}

impl Default for Complexity {
    fn default() -> Complexity {
        Self::Unspecified
    }
}
