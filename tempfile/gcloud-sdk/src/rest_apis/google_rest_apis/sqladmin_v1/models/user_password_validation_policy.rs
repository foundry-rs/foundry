/*
 * Cloud SQL Admin API
 *
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::sqladmin_v1::models;
use serde::{Deserialize, Serialize};

/// UserPasswordValidationPolicy : User level password validation policy.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserPasswordValidationPolicy {
    /// Number of failed login attempts allowed before user get locked.
    #[serde(
        rename = "allowedFailedAttempts",
        skip_serializing_if = "Option::is_none"
    )]
    pub allowed_failed_attempts: Option<i32>,
    /// If true, failed login attempts check will be enabled.
    #[serde(
        rename = "enableFailedAttemptsCheck",
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_failed_attempts_check: Option<bool>,
    /// If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
    #[serde(
        rename = "enablePasswordVerification",
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_password_verification: Option<bool>,
    /// Expiration duration after password is updated.
    #[serde(
        rename = "passwordExpirationDuration",
        skip_serializing_if = "Option::is_none"
    )]
    pub password_expiration_duration: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<models::PasswordStatus>>,
}

impl UserPasswordValidationPolicy {
    /// User level password validation policy.
    pub fn new() -> UserPasswordValidationPolicy {
        UserPasswordValidationPolicy {
            allowed_failed_attempts: None,
            enable_failed_attempts_check: None,
            enable_password_verification: None,
            password_expiration_duration: None,
            status: None,
        }
    }
}
