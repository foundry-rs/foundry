/*
 * Cloud SQL Admin API
 *
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::sqladmin_v1::models;
use serde::{Deserialize, Serialize};

/// GenerateEphemeralCertRequest : Ephemeral certificate creation request.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GenerateEphemeralCertRequest {
    /// Optional. Access token to include in the signed certificate.
    #[serde(rename = "access_token", skip_serializing_if = "Option::is_none")]
    pub access_token: Option<String>,
    /// PEM encoded public key to include in the signed certificate.
    #[serde(rename = "public_key", skip_serializing_if = "Option::is_none")]
    pub public_key: Option<String>,
    /// Optional. Optional snapshot read timestamp to trade freshness for performance.
    #[serde(rename = "readTime", skip_serializing_if = "Option::is_none")]
    pub read_time: Option<String>,
    /// Optional. If set, it will contain the cert valid duration.
    #[serde(rename = "validDuration", skip_serializing_if = "Option::is_none")]
    pub valid_duration: Option<String>,
}

impl GenerateEphemeralCertRequest {
    /// Ephemeral certificate creation request.
    pub fn new() -> GenerateEphemeralCertRequest {
        GenerateEphemeralCertRequest {
            access_token: None,
            public_key: None,
            read_time: None,
            valid_duration: None,
        }
    }
}
