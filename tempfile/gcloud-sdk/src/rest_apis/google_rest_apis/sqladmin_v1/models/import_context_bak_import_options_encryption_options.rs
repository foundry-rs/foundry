/*
 * Cloud SQL Admin API
 *
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::sqladmin_v1::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImportContextBakImportOptionsEncryptionOptions {
    /// Path to the Certificate (.cer) in Cloud Storage, in the form `gs://bucketName/fileName`. The instance must have write permissions to the bucket and read access to the file.
    #[serde(rename = "certPath", skip_serializing_if = "Option::is_none")]
    pub cert_path: Option<String>,
    /// Password that encrypts the private key
    #[serde(rename = "pvkPassword", skip_serializing_if = "Option::is_none")]
    pub pvk_password: Option<String>,
    /// Path to the Certificate Private Key (.pvk) in Cloud Storage, in the form `gs://bucketName/fileName`. The instance must have write permissions to the bucket and read access to the file.
    #[serde(rename = "pvkPath", skip_serializing_if = "Option::is_none")]
    pub pvk_path: Option<String>,
}

impl ImportContextBakImportOptionsEncryptionOptions {
    pub fn new() -> ImportContextBakImportOptionsEncryptionOptions {
        ImportContextBakImportOptionsEncryptionOptions {
            cert_path: None,
            pvk_password: None,
            pvk_path: None,
        }
    }
}
