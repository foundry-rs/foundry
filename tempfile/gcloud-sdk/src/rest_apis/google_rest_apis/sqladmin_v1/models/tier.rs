/*
 * Cloud SQL Admin API
 *
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::sqladmin_v1::models;
use serde::{Deserialize, Serialize};

/// Tier : A Google Cloud SQL service tier resource.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Tier {
    /// The maximum disk size of this tier in bytes.
    #[serde(rename = "DiskQuota", skip_serializing_if = "Option::is_none")]
    pub disk_quota: Option<String>,
    /// The maximum RAM usage of this tier in bytes.
    #[serde(rename = "RAM", skip_serializing_if = "Option::is_none")]
    pub ram: Option<String>,
    /// This is always `sql#tier`.
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The applicable regions for this tier.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<Vec<String>>,
    /// An identifier for the machine type, for example, `db-custom-1-3840`. For related information, see [Pricing](/sql/pricing).
    #[serde(rename = "tier", skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
}

impl Tier {
    /// A Google Cloud SQL service tier resource.
    pub fn new() -> Tier {
        Tier {
            disk_quota: None,
            ram: None,
            kind: None,
            region: None,
            tier: None,
        }
    }
}
