/*
 * Cloud SQL Admin API
 *
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::sqladmin_v1::models;
use serde::{Deserialize, Serialize};

/// IpConfiguration : IP Management configuration.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct IpConfiguration {
    /// The name of the allocated ip range for the private ip Cloud SQL instance. For example: \"google-managed-services-default\". If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?.`
    #[serde(rename = "allocatedIpRange", skip_serializing_if = "Option::is_none")]
    pub allocated_ip_range: Option<String>,
    /// The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: `157.197.200.0/24`).
    #[serde(rename = "authorizedNetworks", skip_serializing_if = "Option::is_none")]
    pub authorized_networks: Option<Vec<models::AclEntry>>,
    /// Controls connectivity to private IP instances from Google services, such as BigQuery.
    #[serde(
        rename = "enablePrivatePathForGoogleCloudServices",
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_private_path_for_google_cloud_services: Option<bool>,
    /// Whether the instance is assigned a public IP address or not.
    #[serde(rename = "ipv4Enabled", skip_serializing_if = "Option::is_none")]
    pub ipv4_enabled: Option<bool>,
    /// The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
    #[serde(rename = "privateNetwork", skip_serializing_if = "Option::is_none")]
    pub private_network: Option<String>,
    /// Whether SSL connections over IP are enforced or not.
    #[serde(rename = "requireSsl", skip_serializing_if = "Option::is_none")]
    pub require_ssl: Option<bool>,
}

impl IpConfiguration {
    /// IP Management configuration.
    pub fn new() -> IpConfiguration {
        IpConfiguration {
            allocated_ip_range: None,
            authorized_networks: None,
            enable_private_path_for_google_cloud_services: None,
            ipv4_enabled: None,
            private_network: None,
            require_ssl: None,
        }
    }
}
