/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

/// Disk : Represents a Persistent Disk resource. Google Compute Engine has two Disk resources: * [Zonal](/compute/docs/reference/rest/v1/disks) * [Regional](/compute/docs/reference/rest/v1/regionDisks) Persistent disks are required for running your VM instances. Create both boot and non-boot (data) persistent disks. For more information, read Persistent Disks. For more storage options, read Storage options. The disks resource represents a zonal persistent disk. For more information, read Zonal persistent disks. The regionDisks resource represents a regional persistent disk. For more information, read Regional resources.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Disk {
    /// The architecture of the disk. Valid values are ARM64 or X86_64.
    #[serde(rename = "architecture", skip_serializing_if = "Option::is_none")]
    pub architecture: Option<Architecture>,
    #[serde(rename = "asyncPrimaryDisk", skip_serializing_if = "Option::is_none")]
    pub async_primary_disk: Option<Box<models::DiskAsyncReplication>>,
    /// [Output Only] A list of disks this disk is asynchronously replicated to.
    #[serde(
        rename = "asyncSecondaryDisks",
        skip_serializing_if = "Option::is_none"
    )]
    pub async_secondary_disks:
        Option<std::collections::HashMap<String, models::DiskAsyncReplicationList>>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename = "creationTimestamp", skip_serializing_if = "Option::is_none")]
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "diskEncryptionKey", skip_serializing_if = "Option::is_none")]
    pub disk_encryption_key: Option<Box<models::CustomerEncryptionKey>>,
    /// Whether this disk is using confidential compute mode.
    #[serde(
        rename = "enableConfidentialCompute",
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_confidential_compute: Option<bool>,
    /// A list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.
    #[serde(rename = "guestOsFeatures", skip_serializing_if = "Option::is_none")]
    pub guest_os_features: Option<Vec<models::GuestOsFeature>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// [Output Only] Type of the resource. Always compute#disk for disks.
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// A fingerprint for the labels being applied to this disk, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve a disk.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "labelFingerprint", skip_serializing_if = "Option::is_none")]
    pub label_fingerprint: Option<Vec<u8>>,
    /// Labels to apply to this disk. These can be later modified by the setLabels method.
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<std::collections::HashMap<String, String>>,
    /// [Output Only] Last attach timestamp in RFC3339 text format.
    #[serde(
        rename = "lastAttachTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_attach_timestamp: Option<String>,
    /// [Output Only] Last detach timestamp in RFC3339 text format.
    #[serde(
        rename = "lastDetachTimestamp",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_detach_timestamp: Option<String>,
    /// Integer license codes indicating which licenses are attached to this disk.
    #[serde(rename = "licenseCodes", skip_serializing_if = "Option::is_none")]
    pub license_codes: Option<Vec<String>>,
    /// A list of publicly visible licenses. Reserved for Google's use.
    #[serde(rename = "licenses", skip_serializing_if = "Option::is_none")]
    pub licenses: Option<Vec<String>>,
    /// An opaque location hint used to place the disk close to other resources. This field is for use by internal tools that use the public API.
    #[serde(rename = "locationHint", skip_serializing_if = "Option::is_none")]
    pub location_hint: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Internal use only.
    #[serde(rename = "options", skip_serializing_if = "Option::is_none")]
    pub options: Option<String>,
    #[serde(rename = "params", skip_serializing_if = "Option::is_none")]
    pub params: Option<Box<models::DiskParams>>,
    /// Physical block size of the persistent disk, in bytes. If not present in a request, a default value is used. The currently supported size is 4096, other sizes may be added in the future. If an unsupported value is requested, the error message will list the supported values for the caller's project.
    #[serde(
        rename = "physicalBlockSizeBytes",
        skip_serializing_if = "Option::is_none"
    )]
    pub physical_block_size_bytes: Option<String>,
    /// Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the Extreme persistent disk documentation.
    #[serde(rename = "provisionedIops", skip_serializing_if = "Option::is_none")]
    pub provisioned_iops: Option<String>,
    /// Indicates how much throughput to provision for the disk. This sets the number of throughput mb per second that the disk can handle. Values must be greater than or equal to 1.
    #[serde(
        rename = "provisionedThroughput",
        skip_serializing_if = "Option::is_none"
    )]
    pub provisioned_throughput: Option<String>,
    /// [Output Only] URL of the region where the disk resides. Only applicable for regional resources. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// URLs of the zones where the disk should be replicated to. Only applicable for regional resources.
    #[serde(rename = "replicaZones", skip_serializing_if = "Option::is_none")]
    pub replica_zones: Option<Vec<String>>,
    /// Resource policies applied to this disk for automatic snapshot creations.
    #[serde(rename = "resourcePolicies", skip_serializing_if = "Option::is_none")]
    pub resource_policies: Option<Vec<String>>,
    #[serde(rename = "resourceStatus", skip_serializing_if = "Option::is_none")]
    pub resource_status: Option<Box<models::DiskResourceStatus>>,
    /// Output only. Reserved for future use.
    #[serde(rename = "satisfiesPzi", skip_serializing_if = "Option::is_none")]
    pub satisfies_pzi: Option<bool>,
    /// [Output Only] Reserved for future use.
    #[serde(rename = "satisfiesPzs", skip_serializing_if = "Option::is_none")]
    pub satisfies_pzs: Option<bool>,
    /// [Output Only] Server-defined fully-qualified URL for this resource.
    #[serde(rename = "selfLink", skip_serializing_if = "Option::is_none")]
    pub self_link: Option<String>,
    /// Size, in GB, of the persistent disk. You can specify this field when creating a persistent disk using the sourceImage, sourceSnapshot, or sourceDisk parameter, or specify it alone to create an empty persistent disk. If you specify this field along with a source, the value of sizeGb must not be less than the size of the source. Acceptable values are greater than 0.
    #[serde(rename = "sizeGb", skip_serializing_if = "Option::is_none")]
    pub size_gb: Option<String>,
    /// [Output Only] URL of the DiskConsistencyGroupPolicy for a secondary disk that was created using a consistency group.
    #[serde(
        rename = "sourceConsistencyGroupPolicy",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_consistency_group_policy: Option<String>,
    /// [Output Only] ID of the DiskConsistencyGroupPolicy for a secondary disk that was created using a consistency group.
    #[serde(
        rename = "sourceConsistencyGroupPolicyId",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_consistency_group_policy_id: Option<String>,
    /// The source disk used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /disks/disk - https://www.googleapis.com/compute/v1/projects/project/regions/region /disks/disk - projects/project/zones/zone/disks/disk - projects/project/regions/region/disks/disk - zones/zone/disks/disk - regions/region/disks/disk
    #[serde(rename = "sourceDisk", skip_serializing_if = "Option::is_none")]
    pub source_disk: Option<String>,
    /// [Output Only] The unique ID of the disk used to create this disk. This value identifies the exact disk that was used to create this persistent disk. For example, if you created the persistent disk from a disk that was later deleted and recreated under the same name, the source disk ID would identify the exact version of the disk that was used.
    #[serde(rename = "sourceDiskId", skip_serializing_if = "Option::is_none")]
    pub source_disk_id: Option<String>,
    /// The source image used to create this disk. If the source image is deleted, this field will not be set. To create a disk with one of the public operating system images, specify the image by its family name. For example, specify family/debian-9 to use the latest Debian 9 image: projects/debian-cloud/global/images/family/debian-9 Alternatively, use a specific version of a public operating system image: projects/debian-cloud/global/images/debian-9-stretch-vYYYYMMDD To create a disk with a custom image that you created, specify the image name in the following format: global/images/my-custom-image You can also specify a custom image by its image family, which returns the latest version of the image in that family. Replace the image name with family/family-name: global/images/family/my-image-family
    #[serde(rename = "sourceImage", skip_serializing_if = "Option::is_none")]
    pub source_image: Option<String>,
    #[serde(
        rename = "sourceImageEncryptionKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_image_encryption_key: Option<Box<models::CustomerEncryptionKey>>,
    /// [Output Only] The ID value of the image used to create this disk. This value identifies the exact image that was used to create this persistent disk. For example, if you created the persistent disk from an image that was later deleted and recreated under the same name, the source image ID would identify the exact version of the image that was used.
    #[serde(rename = "sourceImageId", skip_serializing_if = "Option::is_none")]
    pub source_image_id: Option<String>,
    /// The source instant snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project/zones/zone /instantSnapshots/instantSnapshot - projects/project/zones/zone/instantSnapshots/instantSnapshot - zones/zone/instantSnapshots/instantSnapshot
    #[serde(
        rename = "sourceInstantSnapshot",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_instant_snapshot: Option<String>,
    /// [Output Only] The unique ID of the instant snapshot used to create this disk. This value identifies the exact instant snapshot that was used to create this persistent disk. For example, if you created the persistent disk from an instant snapshot that was later deleted and recreated under the same name, the source instant snapshot ID would identify the exact version of the instant snapshot that was used.
    #[serde(
        rename = "sourceInstantSnapshotId",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_instant_snapshot_id: Option<String>,
    /// The source snapshot used to create this disk. You can provide this as a partial or full URL to the resource. For example, the following are valid values: - https://www.googleapis.com/compute/v1/projects/project /global/snapshots/snapshot - projects/project/global/snapshots/snapshot - global/snapshots/snapshot
    #[serde(rename = "sourceSnapshot", skip_serializing_if = "Option::is_none")]
    pub source_snapshot: Option<String>,
    #[serde(
        rename = "sourceSnapshotEncryptionKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_snapshot_encryption_key: Option<Box<models::CustomerEncryptionKey>>,
    /// [Output Only] The unique ID of the snapshot used to create this disk. This value identifies the exact snapshot that was used to create this persistent disk. For example, if you created the persistent disk from a snapshot that was later deleted and recreated under the same name, the source snapshot ID would identify the exact version of the snapshot that was used.
    #[serde(rename = "sourceSnapshotId", skip_serializing_if = "Option::is_none")]
    pub source_snapshot_id: Option<String>,
    /// The full Google Cloud Storage URI where the disk image is stored. This file must be a gzip-compressed tarball whose name ends in .tar.gz or virtual machine disk whose name ends in vmdk. Valid URIs may start with gs:// or https://storage.googleapis.com/. This flag is not optimized for creating multiple disks from a source storage object. To create many disks from a source storage object, use gcloud compute images import instead.
    #[serde(
        rename = "sourceStorageObject",
        skip_serializing_if = "Option::is_none"
    )]
    pub source_storage_object: Option<String>,
    /// [Output Only] The status of disk creation. - CREATING: Disk is provisioning. - RESTORING: Source data is being copied into the disk. - FAILED: Disk creation failed. - READY: Disk is ready for use. - DELETING: Disk is deleting.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// URL of the disk type resource describing which disk type to use to create the disk. Provide this when creating the disk. For example: projects/project /zones/zone/diskTypes/pd-ssd . See Persistent disk types.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// [Output Only] Links to the users of the disk (attached instances) in form: projects/project/zones/zone/instances/instance
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<String>>,
    /// [Output Only] URL of the zone where the disk resides. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    #[serde(rename = "zone", skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

impl Disk {
    /// Represents a Persistent Disk resource. Google Compute Engine has two Disk resources: * [Zonal](/compute/docs/reference/rest/v1/disks) * [Regional](/compute/docs/reference/rest/v1/regionDisks) Persistent disks are required for running your VM instances. Create both boot and non-boot (data) persistent disks. For more information, read Persistent Disks. For more storage options, read Storage options. The disks resource represents a zonal persistent disk. For more information, read Zonal persistent disks. The regionDisks resource represents a regional persistent disk. For more information, read Regional resources.
    pub fn new() -> Disk {
        Disk {
            architecture: None,
            async_primary_disk: None,
            async_secondary_disks: None,
            creation_timestamp: None,
            description: None,
            disk_encryption_key: None,
            enable_confidential_compute: None,
            guest_os_features: None,
            id: None,
            kind: None,
            label_fingerprint: None,
            labels: None,
            last_attach_timestamp: None,
            last_detach_timestamp: None,
            license_codes: None,
            licenses: None,
            location_hint: None,
            name: None,
            options: None,
            params: None,
            physical_block_size_bytes: None,
            provisioned_iops: None,
            provisioned_throughput: None,
            region: None,
            replica_zones: None,
            resource_policies: None,
            resource_status: None,
            satisfies_pzi: None,
            satisfies_pzs: None,
            self_link: None,
            size_gb: None,
            source_consistency_group_policy: None,
            source_consistency_group_policy_id: None,
            source_disk: None,
            source_disk_id: None,
            source_image: None,
            source_image_encryption_key: None,
            source_image_id: None,
            source_instant_snapshot: None,
            source_instant_snapshot_id: None,
            source_snapshot: None,
            source_snapshot_encryption_key: None,
            source_snapshot_id: None,
            source_storage_object: None,
            status: None,
            r#type: None,
            users: None,
            zone: None,
        }
    }
}
/// The architecture of the disk. Valid values are ARM64 or X86_64.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Architecture {
    #[serde(rename = "ARCHITECTURE_UNSPECIFIED")]
    ArchitectureUnspecified,
    #[serde(rename = "ARM64")]
    Arm64,
    #[serde(rename = "X86_64")]
    X8664,
}

impl Default for Architecture {
    fn default() -> Architecture {
        Self::ArchitectureUnspecified
    }
}
/// [Output Only] The status of disk creation. - CREATING: Disk is provisioning. - RESTORING: Source data is being copied into the disk. - FAILED: Disk creation failed. - READY: Disk is ready for use. - DELETING: Disk is deleting.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "CREATING")]
    Creating,
    #[serde(rename = "DELETING")]
    Deleting,
    #[serde(rename = "FAILED")]
    Failed,
    #[serde(rename = "READY")]
    Ready,
    #[serde(rename = "RESTORING")]
    Restoring,
}

impl Default for Status {
    fn default() -> Status {
        Self::Creating
    }
}
