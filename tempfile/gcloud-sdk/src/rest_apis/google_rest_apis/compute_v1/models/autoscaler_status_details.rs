/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AutoscalerStatusDetails {
    /// The status message.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// The type of error, warning, or notice returned. Current set of possible values: - ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state). - BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group. - CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas. - CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. - CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. - MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. - MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling. - MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer. - MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved. - MODE_ONLY_UP (WARNING): Autoscaling is in the \"Autoscale only out\" mode. The autoscaler can add instances but not remove any. - MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. - NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. - REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region. - SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist. - UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate. - ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout. New values might be added in the future. Some of the values might not be available in all API versions.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl AutoscalerStatusDetails {
    pub fn new() -> AutoscalerStatusDetails {
        AutoscalerStatusDetails {
            message: None,
            r#type: None,
        }
    }
}
/// The type of error, warning, or notice returned. Current set of possible values: - ALL_INSTANCES_UNHEALTHY (WARNING): All instances in the instance group are unhealthy (not in RUNNING state). - BACKEND_SERVICE_DOES_NOT_EXIST (ERROR): There is no backend service attached to the instance group. - CAPPED_AT_MAX_NUM_REPLICAS (WARNING): Autoscaler recommends a size greater than maxNumReplicas. - CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE (WARNING): The custom metric samples are not exported often enough to be a credible base for autoscaling. - CUSTOM_METRIC_INVALID (ERROR): The custom metric that was specified does not exist or does not have the necessary labels. - MIN_EQUALS_MAX (WARNING): The minNumReplicas is equal to maxNumReplicas. This means the autoscaler cannot add or remove instances from the instance group. - MISSING_CUSTOM_METRIC_DATA_POINTS (WARNING): The autoscaler did not receive any data from the custom metric configured for autoscaling. - MISSING_LOAD_BALANCING_DATA_POINTS (WARNING): The autoscaler is configured to scale based on a load balancing signal but the instance group has not received any requests from the load balancer. - MODE_OFF (WARNING): Autoscaling is turned off. The number of instances in the group won't change automatically. The autoscaling configuration is preserved. - MODE_ONLY_UP (WARNING): Autoscaling is in the \"Autoscale only out\" mode. The autoscaler can add instances but not remove any. - MORE_THAN_ONE_BACKEND_SERVICE (ERROR): The instance group cannot be autoscaled because it has more than one backend service attached to it. - NOT_ENOUGH_QUOTA_AVAILABLE (ERROR): There is insufficient quota for the necessary resources, such as CPU or number of instances. - REGION_RESOURCE_STOCKOUT (ERROR): Shown only for regional autoscalers: there is a resource stockout in the chosen region. - SCALING_TARGET_DOES_NOT_EXIST (ERROR): The target to be scaled does not exist. - UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION (ERROR): Autoscaling does not work with an HTTP/S load balancer that has been configured for maxRate. - ZONE_RESOURCE_STOCKOUT (ERROR): For zonal autoscalers: there is a resource stockout in the chosen zone. For regional autoscalers: in at least one of the zones you're using there is a resource stockout. New values might be added in the future. Some of the values might not be available in all API versions.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "ALL_INSTANCES_UNHEALTHY")]
    AllInstancesUnhealthy,
    #[serde(rename = "BACKEND_SERVICE_DOES_NOT_EXIST")]
    BackendServiceDoesNotExist,
    #[serde(rename = "CAPPED_AT_MAX_NUM_REPLICAS")]
    CappedAtMaxNumReplicas,
    #[serde(rename = "CUSTOM_METRIC_DATA_POINTS_TOO_SPARSE")]
    CustomMetricDataPointsTooSparse,
    #[serde(rename = "CUSTOM_METRIC_INVALID")]
    CustomMetricInvalid,
    #[serde(rename = "MIN_EQUALS_MAX")]
    MinEqualsMax,
    #[serde(rename = "MISSING_CUSTOM_METRIC_DATA_POINTS")]
    MissingCustomMetricDataPoints,
    #[serde(rename = "MISSING_LOAD_BALANCING_DATA_POINTS")]
    MissingLoadBalancingDataPoints,
    #[serde(rename = "MODE_OFF")]
    ModeOff,
    #[serde(rename = "MODE_ONLY_SCALE_OUT")]
    ModeOnlyScaleOut,
    #[serde(rename = "MODE_ONLY_UP")]
    ModeOnlyUp,
    #[serde(rename = "MORE_THAN_ONE_BACKEND_SERVICE")]
    MoreThanOneBackendService,
    #[serde(rename = "NOT_ENOUGH_QUOTA_AVAILABLE")]
    NotEnoughQuotaAvailable,
    #[serde(rename = "REGION_RESOURCE_STOCKOUT")]
    RegionResourceStockout,
    #[serde(rename = "SCALING_TARGET_DOES_NOT_EXIST")]
    ScalingTargetDoesNotExist,
    #[serde(rename = "SCHEDULED_INSTANCES_GREATER_THAN_AUTOSCALER_MAX")]
    ScheduledInstancesGreaterThanAutoscalerMax,
    #[serde(rename = "SCHEDULED_INSTANCES_LESS_THAN_AUTOSCALER_MIN")]
    ScheduledInstancesLessThanAutoscalerMin,
    #[serde(rename = "UNKNOWN")]
    Unknown,
    #[serde(rename = "UNSUPPORTED_MAX_RATE_LOAD_BALANCING_CONFIGURATION")]
    UnsupportedMaxRateLoadBalancingConfiguration,
    #[serde(rename = "ZONE_RESOURCE_STOCKOUT")]
    ZoneResourceStockout,
}

impl Default for Type {
    fn default() -> Type {
        Self::AllInstancesUnhealthy
    }
}
