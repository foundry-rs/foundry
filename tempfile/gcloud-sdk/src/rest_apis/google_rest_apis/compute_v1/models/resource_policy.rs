/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

/// ResourcePolicy : Represents a Resource Policy resource. You can use resource policies to schedule actions for some Compute Engine resources. For example, you can use them to schedule persistent disk snapshots.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ResourcePolicy {
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename = "creationTimestamp", skip_serializing_if = "Option::is_none")]
    pub creation_timestamp: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Resource policy for disk consistency groups.
    #[serde(
        rename = "diskConsistencyGroupPolicy",
        skip_serializing_if = "Option::is_none"
    )]
    pub disk_consistency_group_policy: Option<serde_json::Value>,
    #[serde(
        rename = "groupPlacementPolicy",
        skip_serializing_if = "Option::is_none"
    )]
    pub group_placement_policy: Option<Box<models::ResourcePolicyGroupPlacementPolicy>>,
    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(
        rename = "instanceSchedulePolicy",
        skip_serializing_if = "Option::is_none"
    )]
    pub instance_schedule_policy: Option<Box<models::ResourcePolicyInstanceSchedulePolicy>>,
    /// [Output Only] Type of the resource. Always compute#resource_policies for resource policies.
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The name of the resource, provided by the client when initially creating the resource. The resource name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(rename = "resourceStatus", skip_serializing_if = "Option::is_none")]
    pub resource_status: Option<Box<models::ResourcePolicyResourceStatus>>,
    /// [Output Only] Server-defined fully-qualified URL for this resource.
    #[serde(rename = "selfLink", skip_serializing_if = "Option::is_none")]
    pub self_link: Option<String>,
    #[serde(
        rename = "snapshotSchedulePolicy",
        skip_serializing_if = "Option::is_none"
    )]
    pub snapshot_schedule_policy: Option<Box<models::ResourcePolicySnapshotSchedulePolicy>>,
    /// [Output Only] The status of resource policy creation.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
}

impl ResourcePolicy {
    /// Represents a Resource Policy resource. You can use resource policies to schedule actions for some Compute Engine resources. For example, you can use them to schedule persistent disk snapshots.
    pub fn new() -> ResourcePolicy {
        ResourcePolicy {
            creation_timestamp: None,
            description: None,
            disk_consistency_group_policy: None,
            group_placement_policy: None,
            id: None,
            instance_schedule_policy: None,
            kind: None,
            name: None,
            region: None,
            resource_status: None,
            self_link: None,
            snapshot_schedule_policy: None,
            status: None,
        }
    }
}
/// [Output Only] The status of resource policy creation.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "CREATING")]
    Creating,
    #[serde(rename = "DELETING")]
    Deleting,
    #[serde(rename = "EXPIRED")]
    Expired,
    #[serde(rename = "INVALID")]
    Invalid,
    #[serde(rename = "READY")]
    Ready,
}

impl Default for Status {
    fn default() -> Status {
        Self::Creating
    }
}
