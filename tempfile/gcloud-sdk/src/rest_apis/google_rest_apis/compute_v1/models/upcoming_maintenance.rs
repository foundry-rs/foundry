/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

/// UpcomingMaintenance : Upcoming Maintenance notification information.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpcomingMaintenance {
    /// Indicates if the maintenance can be customer triggered.
    #[serde(rename = "canReschedule", skip_serializing_if = "Option::is_none")]
    pub can_reschedule: Option<bool>,
    /// The latest time for the planned maintenance window to start. This timestamp value is in RFC3339 text format.
    #[serde(
        rename = "latestWindowStartTime",
        skip_serializing_if = "Option::is_none"
    )]
    pub latest_window_start_time: Option<String>,
    #[serde(rename = "maintenanceStatus", skip_serializing_if = "Option::is_none")]
    pub maintenance_status: Option<MaintenanceStatus>,
    /// Defines the type of maintenance.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    /// The time by which the maintenance disruption will be completed. This timestamp value is in RFC3339 text format.
    #[serde(rename = "windowEndTime", skip_serializing_if = "Option::is_none")]
    pub window_end_time: Option<String>,
    /// The current start time of the maintenance window. This timestamp value is in RFC3339 text format.
    #[serde(rename = "windowStartTime", skip_serializing_if = "Option::is_none")]
    pub window_start_time: Option<String>,
}

impl UpcomingMaintenance {
    /// Upcoming Maintenance notification information.
    pub fn new() -> UpcomingMaintenance {
        UpcomingMaintenance {
            can_reschedule: None,
            latest_window_start_time: None,
            maintenance_status: None,
            r#type: None,
            window_end_time: None,
            window_start_time: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MaintenanceStatus {
    #[serde(rename = "ONGOING")]
    Ongoing,
    #[serde(rename = "PENDING")]
    Pending,
    #[serde(rename = "UNKNOWN")]
    Unknown,
}

impl Default for MaintenanceStatus {
    fn default() -> MaintenanceStatus {
        Self::Ongoing
    }
}
/// Defines the type of maintenance.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "SCHEDULED")]
    Scheduled,
    #[serde(rename = "UNKNOWN_TYPE")]
    UnknownType,
    #[serde(rename = "UNSCHEDULED")]
    Unscheduled,
}

impl Default for Type {
    fn default() -> Type {
        Self::Scheduled
    }
}
