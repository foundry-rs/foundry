/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InterconnectRemoteLocationConstraints {
    /// [Output Only] Port pair remote location constraints, which can take one of the following values: PORT_PAIR_UNCONSTRAINED_REMOTE_LOCATION, PORT_PAIR_MATCHING_REMOTE_LOCATION. GCP's API refers only to individual ports, but the UI uses this field when ordering a pair of ports, to prevent users from accidentally ordering something that is incompatible with their cloud provider. Specifically, when ordering a redundant pair of Cross-Cloud Interconnect ports, and one of them uses a remote location with portPairMatchingRemoteLocation set to matching, the UI requires that both ports use the same remote location.
    #[serde(
        rename = "portPairRemoteLocation",
        skip_serializing_if = "Option::is_none"
    )]
    pub port_pair_remote_location: Option<PortPairRemoteLocation>,
    /// [Output Only] Port pair VLAN constraints, which can take one of the following values: PORT_PAIR_UNCONSTRAINED_VLAN, PORT_PAIR_MATCHING_VLAN
    #[serde(rename = "portPairVlan", skip_serializing_if = "Option::is_none")]
    pub port_pair_vlan: Option<PortPairVlan>,
    #[serde(rename = "subnetLengthRange", skip_serializing_if = "Option::is_none")]
    pub subnet_length_range:
        Option<Box<models::InterconnectRemoteLocationConstraintsSubnetLengthRange>>,
}

impl InterconnectRemoteLocationConstraints {
    pub fn new() -> InterconnectRemoteLocationConstraints {
        InterconnectRemoteLocationConstraints {
            port_pair_remote_location: None,
            port_pair_vlan: None,
            subnet_length_range: None,
        }
    }
}
/// [Output Only] Port pair remote location constraints, which can take one of the following values: PORT_PAIR_UNCONSTRAINED_REMOTE_LOCATION, PORT_PAIR_MATCHING_REMOTE_LOCATION. GCP's API refers only to individual ports, but the UI uses this field when ordering a pair of ports, to prevent users from accidentally ordering something that is incompatible with their cloud provider. Specifically, when ordering a redundant pair of Cross-Cloud Interconnect ports, and one of them uses a remote location with portPairMatchingRemoteLocation set to matching, the UI requires that both ports use the same remote location.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PortPairRemoteLocation {
    #[serde(rename = "PORT_PAIR_MATCHING_REMOTE_LOCATION")]
    MatchingRemoteLocation,
    #[serde(rename = "PORT_PAIR_UNCONSTRAINED_REMOTE_LOCATION")]
    UnconstrainedRemoteLocation,
}

impl Default for PortPairRemoteLocation {
    fn default() -> PortPairRemoteLocation {
        Self::MatchingRemoteLocation
    }
}
/// [Output Only] Port pair VLAN constraints, which can take one of the following values: PORT_PAIR_UNCONSTRAINED_VLAN, PORT_PAIR_MATCHING_VLAN
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PortPairVlan {
    #[serde(rename = "PORT_PAIR_MATCHING_VLAN")]
    MatchingVlan,
    #[serde(rename = "PORT_PAIR_UNCONSTRAINED_VLAN")]
    UnconstrainedVlan,
}

impl Default for PortPairVlan {
    fn default() -> PortPairVlan {
        Self::MatchingVlan
    }
}
