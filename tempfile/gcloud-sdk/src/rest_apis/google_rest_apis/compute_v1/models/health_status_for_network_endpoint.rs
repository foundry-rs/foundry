/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HealthStatusForNetworkEndpoint {
    #[serde(rename = "backendService", skip_serializing_if = "Option::is_none")]
    pub backend_service: Option<Box<models::BackendServiceReference>>,
    #[serde(rename = "forwardingRule", skip_serializing_if = "Option::is_none")]
    pub forwarding_rule: Option<Box<models::ForwardingRuleReference>>,
    #[serde(rename = "healthCheck", skip_serializing_if = "Option::is_none")]
    pub health_check: Option<Box<models::HealthCheckReference>>,
    #[serde(rename = "healthCheckService", skip_serializing_if = "Option::is_none")]
    pub health_check_service: Option<Box<models::HealthCheckServiceReference>>,
    /// Health state of the network endpoint determined based on the health checks configured.
    #[serde(rename = "healthState", skip_serializing_if = "Option::is_none")]
    pub health_state: Option<HealthState>,
}

impl HealthStatusForNetworkEndpoint {
    pub fn new() -> HealthStatusForNetworkEndpoint {
        HealthStatusForNetworkEndpoint {
            backend_service: None,
            forwarding_rule: None,
            health_check: None,
            health_check_service: None,
            health_state: None,
        }
    }
}
/// Health state of the network endpoint determined based on the health checks configured.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HealthState {
    #[serde(rename = "DRAINING")]
    Draining,
    #[serde(rename = "HEALTHY")]
    Healthy,
    #[serde(rename = "UNHEALTHY")]
    Unhealthy,
    #[serde(rename = "UNKNOWN")]
    Unknown,
}

impl Default for HealthState {
    fn default() -> HealthState {
        Self::Draining
    }
}
