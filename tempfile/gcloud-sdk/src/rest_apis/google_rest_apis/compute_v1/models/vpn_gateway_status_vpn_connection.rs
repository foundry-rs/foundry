/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

/// VpnGatewayStatusVpnConnection : A VPN connection contains all VPN tunnels connected from this VpnGateway to the same peer gateway. The peer gateway could either be an external VPN gateway or a Google Cloud VPN gateway.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VpnGatewayStatusVpnConnection {
    /// URL reference to the peer external VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway.
    #[serde(
        rename = "peerExternalGateway",
        skip_serializing_if = "Option::is_none"
    )]
    pub peer_external_gateway: Option<String>,
    /// URL reference to the peer side VPN gateways to which the VPN tunnels in this VPN connection are connected. This field is mutually exclusive with peer_gcp_gateway.
    #[serde(rename = "peerGcpGateway", skip_serializing_if = "Option::is_none")]
    pub peer_gcp_gateway: Option<String>,
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<Box<models::VpnGatewayStatusHighAvailabilityRequirementState>>,
    /// List of VPN tunnels that are in this VPN connection.
    #[serde(rename = "tunnels", skip_serializing_if = "Option::is_none")]
    pub tunnels: Option<Vec<models::VpnGatewayStatusTunnel>>,
}

impl VpnGatewayStatusVpnConnection {
    /// A VPN connection contains all VPN tunnels connected from this VpnGateway to the same peer gateway. The peer gateway could either be an external VPN gateway or a Google Cloud VPN gateway.
    pub fn new() -> VpnGatewayStatusVpnConnection {
        VpnGatewayStatusVpnConnection {
            peer_external_gateway: None,
            peer_gcp_gateway: None,
            state: None,
            tunnels: None,
        }
    }
}
