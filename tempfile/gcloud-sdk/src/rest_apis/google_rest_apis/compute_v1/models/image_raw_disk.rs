/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

/// ImageRawDisk : The parameters of the raw disk image.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImageRawDisk {
    /// The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
    #[serde(rename = "containerType", skip_serializing_if = "Option::is_none")]
    pub container_type: Option<ContainerType>,
    /// [Deprecated] This field is deprecated. An optional SHA1 checksum of the disk image before unpackaging provided by the client when the disk image is created.
    #[serde(rename = "sha1Checksum", skip_serializing_if = "Option::is_none")]
    pub sha1_checksum: Option<String>,
    /// The full Google Cloud Storage URL where the raw disk image archive is stored. The following are valid formats for the URL: - https://storage.googleapis.com/bucket_name/image_archive_name - https://storage.googleapis.com/bucket_name/folder_name/ image_archive_name In order to create an image, you must provide the full or partial URL of one of the following: - The rawDisk.source URL - The sourceDisk URL - The sourceImage URL - The sourceSnapshot URL
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
}

impl ImageRawDisk {
    /// The parameters of the raw disk image.
    pub fn new() -> ImageRawDisk {
        ImageRawDisk {
            container_type: None,
            sha1_checksum: None,
            source: None,
        }
    }
}
/// The format used to encode and transmit the block device, which should be TAR. This is just a container and transmission format and not a runtime format. Provided by the client when the disk image is created.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ContainerType {
    #[serde(rename = "TAR")]
    Tar,
}

impl Default for ContainerType {
    fn default() -> ContainerType {
        Self::Tar
    }
}
