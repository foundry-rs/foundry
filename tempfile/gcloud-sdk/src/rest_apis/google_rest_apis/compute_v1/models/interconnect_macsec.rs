/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

/// InterconnectMacsec : Configuration information for enabling Media Access Control security (MACsec) on this Cloud Interconnect connection between Google and your on-premises router.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InterconnectMacsec {
    /// If set to true, the Interconnect connection is configured with a should-secure MACsec security policy, that allows the Google router to fallback to cleartext traffic if the MKA session cannot be established. By default, the Interconnect connection is configured with a must-secure security policy that drops all traffic if the MKA session cannot be established with your router.
    #[serde(rename = "failOpen", skip_serializing_if = "Option::is_none")]
    pub fail_open: Option<bool>,
    /// Required. A keychain placeholder describing a set of named key objects along with their start times. A MACsec CKN/CAK is generated for each key in the key chain. Google router automatically picks the key with the most recent startTime when establishing or re-establishing a MACsec secure link.
    #[serde(rename = "preSharedKeys", skip_serializing_if = "Option::is_none")]
    pub pre_shared_keys: Option<Vec<models::InterconnectMacsecPreSharedKey>>,
}

impl InterconnectMacsec {
    /// Configuration information for enabling Media Access Control security (MACsec) on this Cloud Interconnect connection between Google and your on-premises router.
    pub fn new() -> InterconnectMacsec {
        InterconnectMacsec {
            fail_open: None,
            pre_shared_keys: None,
        }
    }
}
