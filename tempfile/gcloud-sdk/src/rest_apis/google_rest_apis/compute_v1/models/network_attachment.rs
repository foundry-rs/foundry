/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

/// NetworkAttachment : NetworkAttachments A network attachment resource ...
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkAttachment {
    /// [Output Only] An array of connections for all the producers connected to this network attachment.
    #[serde(
        rename = "connectionEndpoints",
        skip_serializing_if = "Option::is_none"
    )]
    pub connection_endpoints: Option<Vec<models::NetworkAttachmentConnectedEndpoint>>,
    #[serde(
        rename = "connectionPreference",
        skip_serializing_if = "Option::is_none"
    )]
    pub connection_preference: Option<ConnectionPreference>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename = "creationTimestamp", skip_serializing_if = "Option::is_none")]
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. An up-to-date fingerprint must be provided in order to patch.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "fingerprint", skip_serializing_if = "Option::is_none")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The unique identifier for the resource type. The server generates this identifier.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// [Output Only] Type of the resource.
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// [Output Only] The URL of the network which the Network Attachment belongs to. Practically it is inferred by fetching the network of the first subnetwork associated. Because it is required that all the subnetworks must be from the same network, it is assured that the Network Attachment belongs to the same network as all the subnetworks.
    #[serde(rename = "network", skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// Projects that are allowed to connect to this network attachment. The project can be specified using its id or number.
    #[serde(
        rename = "producerAcceptLists",
        skip_serializing_if = "Option::is_none"
    )]
    pub producer_accept_lists: Option<Vec<String>>,
    /// Projects that are not allowed to connect to this network attachment. The project can be specified using its id or number.
    #[serde(
        rename = "producerRejectLists",
        skip_serializing_if = "Option::is_none"
    )]
    pub producer_reject_lists: Option<Vec<String>>,
    /// [Output Only] URL of the region where the network attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename = "selfLink", skip_serializing_if = "Option::is_none")]
    pub self_link: Option<String>,
    /// [Output Only] Server-defined URL for this resource's resource id.
    #[serde(rename = "selfLinkWithId", skip_serializing_if = "Option::is_none")]
    pub self_link_with_id: Option<String>,
    /// An array of URLs where each entry is the URL of a subnet provided by the service consumer to use for endpoints in the producers that connect to this network attachment.
    #[serde(rename = "subnetworks", skip_serializing_if = "Option::is_none")]
    pub subnetworks: Option<Vec<String>>,
}

impl NetworkAttachment {
    /// NetworkAttachments A network attachment resource ...
    pub fn new() -> NetworkAttachment {
        NetworkAttachment {
            connection_endpoints: None,
            connection_preference: None,
            creation_timestamp: None,
            description: None,
            fingerprint: None,
            id: None,
            kind: None,
            name: None,
            network: None,
            producer_accept_lists: None,
            producer_reject_lists: None,
            region: None,
            self_link: None,
            self_link_with_id: None,
            subnetworks: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConnectionPreference {
    #[serde(rename = "ACCEPT_AUTOMATIC")]
    AcceptAutomatic,
    #[serde(rename = "ACCEPT_MANUAL")]
    AcceptManual,
    #[serde(rename = "INVALID")]
    Invalid,
}

impl Default for ConnectionPreference {
    fn default() -> ConnectionPreference {
        Self::AcceptAutomatic
    }
}
