/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

/// ServiceAttachment : Represents a ServiceAttachment resource. A service attachment represents a service that a producer has exposed. It encapsulates the load balancer which fronts the service runs and a list of NAT IP ranges that the producers uses to represent the consumers connecting to the service.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ServiceAttachment {
    /// [Output Only] An array of connections for all the consumers connected to this service attachment.
    #[serde(rename = "connectedEndpoints", skip_serializing_if = "Option::is_none")]
    pub connected_endpoints: Option<Vec<models::ServiceAttachmentConnectedEndpoint>>,
    /// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
    #[serde(
        rename = "connectionPreference",
        skip_serializing_if = "Option::is_none"
    )]
    pub connection_preference: Option<ConnectionPreference>,
    /// Projects that are allowed to connect to this service attachment.
    #[serde(
        rename = "consumerAcceptLists",
        skip_serializing_if = "Option::is_none"
    )]
    pub consumer_accept_lists: Option<Vec<models::ServiceAttachmentConsumerProjectLimit>>,
    /// Projects that are not allowed to connect to this service attachment. The project can be specified using its id or number.
    #[serde(
        rename = "consumerRejectLists",
        skip_serializing_if = "Option::is_none"
    )]
    pub consumer_reject_lists: Option<Vec<String>>,
    /// [Output Only] Creation timestamp in RFC3339 text format.
    #[serde(rename = "creationTimestamp", skip_serializing_if = "Option::is_none")]
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when you create the resource.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If specified, the domain name will be used during the integration between the PSC connected endpoints and the Cloud DNS. For example, this is a valid domain name: \"p.mycompany.com.\". Current max number of domain names supported is 1.
    #[serde(rename = "domainNames", skip_serializing_if = "Option::is_none")]
    pub domain_names: Option<Vec<String>>,
    /// If true, enable the proxy protocol which is for supplying client TCP/IP address data in TCP connections that traverse proxies on their way to destination servers.
    #[serde(
        rename = "enableProxyProtocol",
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_proxy_protocol: Option<bool>,
    /// Fingerprint of this resource. A hash of the contents stored in this object. This field is used in optimistic locking. This field will be ignored when inserting a ServiceAttachment. An up-to-date fingerprint must be provided in order to patch/update the ServiceAttachment; otherwise, the request will fail with error 412 conditionNotMet. To see the latest fingerprint, make a get() request to retrieve the ServiceAttachment.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "fingerprint", skip_serializing_if = "Option::is_none")]
    pub fingerprint: Option<Vec<u8>>,
    /// [Output Only] The unique identifier for the resource type. The server generates this identifier.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// [Output Only] Type of the resource. Always compute#serviceAttachment for service attachments.
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// An array of URLs where each entry is the URL of a subnet provided by the service producer to use for NAT in this service attachment.
    #[serde(rename = "natSubnets", skip_serializing_if = "Option::is_none")]
    pub nat_subnets: Option<Vec<String>>,
    /// The URL of a forwarding rule with loadBalancingScheme INTERNAL* that is serving the endpoint identified by this service attachment.
    #[serde(
        rename = "producerForwardingRule",
        skip_serializing_if = "Option::is_none"
    )]
    pub producer_forwarding_rule: Option<String>,
    #[serde(
        rename = "pscServiceAttachmentId",
        skip_serializing_if = "Option::is_none"
    )]
    pub psc_service_attachment_id: Option<Box<models::Uint128>>,
    /// This flag determines whether a consumer accept/reject list change can reconcile the statuses of existing ACCEPTED or REJECTED PSC endpoints. - If false, connection policy update will only affect existing PENDING PSC endpoints. Existing ACCEPTED/REJECTED endpoints will remain untouched regardless how the connection policy is modified . - If true, update will affect both PENDING and ACCEPTED/REJECTED PSC endpoints. For example, an ACCEPTED PSC endpoint will be moved to REJECTED if its project is added to the reject list. For newly created service attachment, this boolean defaults to false.
    #[serde(
        rename = "reconcileConnections",
        skip_serializing_if = "Option::is_none"
    )]
    pub reconcile_connections: Option<bool>,
    /// [Output Only] URL of the region where the service attachment resides. This field applies only to the region resource. You must specify this field as part of the HTTP request URL. It is not settable as a field in the request body.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// [Output Only] Server-defined URL for the resource.
    #[serde(rename = "selfLink", skip_serializing_if = "Option::is_none")]
    pub self_link: Option<String>,
    /// The URL of a service serving the endpoint identified by this service attachment.
    #[serde(rename = "targetService", skip_serializing_if = "Option::is_none")]
    pub target_service: Option<String>,
}

impl ServiceAttachment {
    /// Represents a ServiceAttachment resource. A service attachment represents a service that a producer has exposed. It encapsulates the load balancer which fronts the service runs and a list of NAT IP ranges that the producers uses to represent the consumers connecting to the service.
    pub fn new() -> ServiceAttachment {
        ServiceAttachment {
            connected_endpoints: None,
            connection_preference: None,
            consumer_accept_lists: None,
            consumer_reject_lists: None,
            creation_timestamp: None,
            description: None,
            domain_names: None,
            enable_proxy_protocol: None,
            fingerprint: None,
            id: None,
            kind: None,
            name: None,
            nat_subnets: None,
            producer_forwarding_rule: None,
            psc_service_attachment_id: None,
            reconcile_connections: None,
            region: None,
            self_link: None,
            target_service: None,
        }
    }
}
/// The connection preference of service attachment. The value can be set to ACCEPT_AUTOMATIC. An ACCEPT_AUTOMATIC service attachment is one that always accepts the connection from consumer forwarding rules.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConnectionPreference {
    #[serde(rename = "ACCEPT_AUTOMATIC")]
    AcceptAutomatic,
    #[serde(rename = "ACCEPT_MANUAL")]
    AcceptManual,
    #[serde(rename = "CONNECTION_PREFERENCE_UNSPECIFIED")]
    ConnectionPreferenceUnspecified,
}

impl Default for ConnectionPreference {
    fn default() -> ConnectionPreference {
        Self::AcceptAutomatic
    }
}
