/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworksAddPeeringRequest {
    /// This field will be deprecated soon. Use exchange_subnet_routes in network_peering instead. Indicates whether full mesh connectivity is created and managed automatically between peered networks. Currently this field should always be true since Google Compute Engine will automatically create and manage subnetwork routes between two networks when peering state is ACTIVE.
    #[serde(rename = "autoCreateRoutes", skip_serializing_if = "Option::is_none")]
    pub auto_create_routes: Option<bool>,
    /// Name of the peering, which should conform to RFC1035.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "networkPeering", skip_serializing_if = "Option::is_none")]
    pub network_peering: Option<Box<models::NetworkPeering>>,
    /// URL of the peer network. It can be either full URL or partial URL. The peer network may belong to a different project. If the partial URL does not contain project, it is assumed that the peer network is in the same project as the current network.
    #[serde(rename = "peerNetwork", skip_serializing_if = "Option::is_none")]
    pub peer_network: Option<String>,
}

impl NetworksAddPeeringRequest {
    pub fn new() -> NetworksAddPeeringRequest {
        NetworksAddPeeringRequest {
            auto_create_routes: None,
            name: None,
            network_peering: None,
            peer_network: None,
        }
    }
}
