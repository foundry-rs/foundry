/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

/// OutlierDetection : Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OutlierDetection {
    #[serde(rename = "baseEjectionTime", skip_serializing_if = "Option::is_none")]
    pub base_ejection_time: Option<Box<models::Duration>>,
    /// Number of consecutive errors before a backend endpoint is ejected from the load balancing pool. When the backend endpoint is accessed over HTTP, a 5xx return code qualifies as an error. Defaults to 5.
    #[serde(rename = "consecutiveErrors", skip_serializing_if = "Option::is_none")]
    pub consecutive_errors: Option<i32>,
    /// The number of consecutive gateway failures (502, 503, 504 status or connection errors that are mapped to one of those status codes) before a consecutive gateway failure ejection occurs. Defaults to 3.
    #[serde(
        rename = "consecutiveGatewayFailure",
        skip_serializing_if = "Option::is_none"
    )]
    pub consecutive_gateway_failure: Option<i32>,
    /// The percentage chance that a backend endpoint will be ejected when an outlier status is detected through consecutive 5xx. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 0.
    #[serde(
        rename = "enforcingConsecutiveErrors",
        skip_serializing_if = "Option::is_none"
    )]
    pub enforcing_consecutive_errors: Option<i32>,
    /// The percentage chance that a backend endpoint will be ejected when an outlier status is detected through consecutive gateway failures. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100.
    #[serde(
        rename = "enforcingConsecutiveGatewayFailure",
        skip_serializing_if = "Option::is_none"
    )]
    pub enforcing_consecutive_gateway_failure: Option<i32>,
    /// The percentage chance that a backend endpoint will be ejected when an outlier status is detected through success rate statistics. This setting can be used to disable ejection or to ramp it up slowly. Defaults to 100. Not supported when the backend service uses Serverless NEG.
    #[serde(
        rename = "enforcingSuccessRate",
        skip_serializing_if = "Option::is_none"
    )]
    pub enforcing_success_rate: Option<i32>,
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<Box<models::Duration>>,
    /// Maximum percentage of backend endpoints in the load balancing pool for the backend service that can be ejected if the ejection conditions are met. Defaults to 50%.
    #[serde(rename = "maxEjectionPercent", skip_serializing_if = "Option::is_none")]
    pub max_ejection_percent: Option<i32>,
    /// The number of backend endpoints in the load balancing pool that must have enough request volume to detect success rate outliers. If the number of backend endpoints is fewer than this setting, outlier detection via success rate statistics is not performed for any backend endpoint in the load balancing pool. Defaults to 5. Not supported when the backend service uses Serverless NEG.
    #[serde(
        rename = "successRateMinimumHosts",
        skip_serializing_if = "Option::is_none"
    )]
    pub success_rate_minimum_hosts: Option<i32>,
    /// The minimum number of total requests that must be collected in one interval (as defined by the interval duration above) to include this backend endpoint in success rate based outlier detection. If the volume is lower than this setting, outlier detection via success rate statistics is not performed for that backend endpoint. Defaults to 100. Not supported when the backend service uses Serverless NEG.
    #[serde(
        rename = "successRateRequestVolume",
        skip_serializing_if = "Option::is_none"
    )]
    pub success_rate_request_volume: Option<i32>,
    /// This factor is used to determine the ejection threshold for success rate outlier ejection. The ejection threshold is the difference between the mean success rate, and the product of this factor and the standard deviation of the mean success rate: mean - (stdev * successRateStdevFactor). This factor is divided by a thousand to get a double. That is, if the desired factor is 1.9, the runtime value should be 1900. Defaults to 1900. Not supported when the backend service uses Serverless NEG.
    #[serde(
        rename = "successRateStdevFactor",
        skip_serializing_if = "Option::is_none"
    )]
    pub success_rate_stdev_factor: Option<i32>,
}

impl OutlierDetection {
    /// Settings controlling the eviction of unhealthy hosts from the load balancing pool for the backend service.
    pub fn new() -> OutlierDetection {
        OutlierDetection {
            base_ejection_time: None,
            consecutive_errors: None,
            consecutive_gateway_failure: None,
            enforcing_consecutive_errors: None,
            enforcing_consecutive_gateway_failure: None,
            enforcing_success_rate: None,
            interval: None,
            max_ejection_percent: None,
            success_rate_minimum_hosts: None,
            success_rate_request_volume: None,
            success_rate_stdev_factor: None,
        }
    }
}
