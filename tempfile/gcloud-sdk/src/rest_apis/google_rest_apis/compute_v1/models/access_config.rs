/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

/// AccessConfig : An access configuration attached to an instance's network interface. Only one access config per instance is supported.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccessConfig {
    /// Applies to ipv6AccessConfigs only. The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. To use a static external IP address, it must be unused and in the same region as the instance's zone. If not specified, Google Cloud will automatically assign an external IPv6 address from the instance's subnetwork.
    #[serde(rename = "externalIpv6", skip_serializing_if = "Option::is_none")]
    pub external_ipv6: Option<String>,
    /// Applies to ipv6AccessConfigs only. The prefix length of the external IPv6 range.
    #[serde(
        rename = "externalIpv6PrefixLength",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_ipv6_prefix_length: Option<i32>,
    /// [Output Only] Type of the resource. Always compute#accessConfig for access configs.
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The name of this access configuration. In accessConfigs (IPv4), the default and recommended name is External NAT, but you can use any arbitrary string, such as My external IP or Network Access. In ipv6AccessConfigs, the recommend name is External IPv6.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Applies to accessConfigs (IPv4) only. An external IP address associated with this instance. Specify an unused static external IP address available to the project or leave this field undefined to use an IP from a shared ephemeral IP address pool. If you specify a static external IP address, it must live in the same region as the zone of the instance.
    #[serde(rename = "natIP", skip_serializing_if = "Option::is_none")]
    pub nat_ip: Option<String>,
    /// This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
    #[serde(rename = "networkTier", skip_serializing_if = "Option::is_none")]
    pub network_tier: Option<NetworkTier>,
    /// The DNS domain name for the public PTR record. You can set this field only if the `setPublicPtr` field is enabled in accessConfig. If this field is unspecified in ipv6AccessConfig, a default PTR record will be createc for first IP in associated external IPv6 range.
    #[serde(
        rename = "publicPtrDomainName",
        skip_serializing_if = "Option::is_none"
    )]
    pub public_ptr_domain_name: Option<String>,
    /// [Output Only] The resource URL for the security policy associated with this access config.
    #[serde(rename = "securityPolicy", skip_serializing_if = "Option::is_none")]
    pub security_policy: Option<String>,
    /// Specifies whether a public DNS 'PTR' record should be created to map the external IP address of the instance to a DNS domain name. This field is not used in ipv6AccessConfig. A default PTR record will be created if the VM has external IPv6 range associated.
    #[serde(rename = "setPublicPtr", skip_serializing_if = "Option::is_none")]
    pub set_public_ptr: Option<bool>,
    /// The type of configuration. In accessConfigs (IPv4), the default and only option is ONE_TO_ONE_NAT. In ipv6AccessConfigs, the default and only option is DIRECT_IPV6.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
}

impl AccessConfig {
    /// An access configuration attached to an instance's network interface. Only one access config per instance is supported.
    pub fn new() -> AccessConfig {
        AccessConfig {
            external_ipv6: None,
            external_ipv6_prefix_length: None,
            kind: None,
            name: None,
            nat_ip: None,
            network_tier: None,
            public_ptr_domain_name: None,
            security_policy: None,
            set_public_ptr: None,
            r#type: None,
        }
    }
}
/// This signifies the networking tier used for configuring this access configuration and can only take the following values: PREMIUM, STANDARD. If an AccessConfig is specified without a valid external IP address, an ephemeral IP will be created with this networkTier. If an AccessConfig with a valid external IP address is specified, it must match that of the networkTier associated with the Address resource owning that IP.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NetworkTier {
    #[serde(rename = "FIXED_STANDARD")]
    FixedStandard,
    #[serde(rename = "PREMIUM")]
    Premium,
    #[serde(rename = "STANDARD")]
    Standard,
    #[serde(rename = "STANDARD_OVERRIDES_FIXED_STANDARD")]
    StandardOverridesFixedStandard,
}

impl Default for NetworkTier {
    fn default() -> NetworkTier {
        Self::FixedStandard
    }
}
/// The type of configuration. In accessConfigs (IPv4), the default and only option is ONE_TO_ONE_NAT. In ipv6AccessConfigs, the default and only option is DIRECT_IPV6.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "DIRECT_IPV6")]
    DirectIpv6,
    #[serde(rename = "ONE_TO_ONE_NAT")]
    OneToOneNat,
}

impl Default for Type {
    fn default() -> Type {
        Self::DirectIpv6
    }
}
