/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

/// NetworkInterface : A network interface resource attached to an instance.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NetworkInterface {
    /// An array of configurations for this interface. Currently, only one access config, ONE_TO_ONE_NAT, is supported. If there are no accessConfigs specified, then this instance will have no external internet access.
    #[serde(rename = "accessConfigs", skip_serializing_if = "Option::is_none")]
    pub access_configs: Option<Vec<models::AccessConfig>>,
    /// An array of alias IP ranges for this network interface. You can only specify this field for network interfaces in VPC networks.
    #[serde(rename = "aliasIpRanges", skip_serializing_if = "Option::is_none")]
    pub alias_ip_ranges: Option<Vec<models::AliasIpRange>>,
    /// Fingerprint hash of contents stored in this network interface. This field will be ignored when inserting an Instance or adding a NetworkInterface. An up-to-date fingerprint must be provided in order to update the NetworkInterface. The request will fail with error 400 Bad Request if the fingerprint is not provided, or 412 Precondition Failed if the fingerprint is out of date.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "fingerprint", skip_serializing_if = "Option::is_none")]
    pub fingerprint: Option<Vec<u8>>,
    /// The prefix length of the primary internal IPv6 range.
    #[serde(
        rename = "internalIpv6PrefixLength",
        skip_serializing_if = "Option::is_none"
    )]
    pub internal_ipv6_prefix_length: Option<i32>,
    /// An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.
    #[serde(rename = "ipv6AccessConfigs", skip_serializing_if = "Option::is_none")]
    pub ipv6_access_configs: Option<Vec<models::AccessConfig>>,
    /// [Output Only] One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is IPV4_IPV6.
    #[serde(rename = "ipv6AccessType", skip_serializing_if = "Option::is_none")]
    pub ipv6_access_type: Option<Ipv6AccessType>,
    /// An IPv6 internal network address for this network interface. To use a static internal IP address, it must be unused and in the same region as the instance's zone. If not specified, Google Cloud will automatically assign an internal IPv6 address from the instance's subnetwork.
    #[serde(rename = "ipv6Address", skip_serializing_if = "Option::is_none")]
    pub ipv6_address: Option<String>,
    /// [Output Only] Type of the resource. Always compute#networkInterface for network interfaces.
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// [Output Only] The name of the network interface, which is generated by the server. For a VM, the network interface uses the nicN naming format. Where N is a value between 0 and 7. The default interface value is nic0.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// URL of the VPC network resource for this instance. When creating an instance, if neither the network nor the subnetwork is specified, the default network global/networks/default is used. If the selected project doesn't have the default network, you must specify a network or subnet. If the network is not specified but the subnetwork is specified, the network is inferred. If you specify this property, you can specify the network as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/global/networks/ network - projects/project/global/networks/network - global/networks/default
    #[serde(rename = "network", skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// The URL of the network attachment that this interface should connect to in the following format: projects/{project_number}/regions/{region_name}/networkAttachments/{network_attachment_name}.
    #[serde(rename = "networkAttachment", skip_serializing_if = "Option::is_none")]
    pub network_attachment: Option<String>,
    /// An IPv4 internal IP address to assign to the instance for this network interface. If not specified by the user, an unused internal IP is assigned by the system.
    #[serde(rename = "networkIP", skip_serializing_if = "Option::is_none")]
    pub network_ip: Option<String>,
    /// The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
    #[serde(rename = "nicType", skip_serializing_if = "Option::is_none")]
    pub nic_type: Option<NicType>,
    /// The networking queue count that's specified by users for the network interface. Both Rx and Tx queues will be set to this number. It'll be empty if not specified by the users.
    #[serde(rename = "queueCount", skip_serializing_if = "Option::is_none")]
    pub queue_count: Option<i32>,
    /// The stack type for this network interface. To assign only IPv4 addresses, use IPV4_ONLY. To assign both IPv4 and IPv6 addresses, use IPV4_IPV6. If not specified, IPV4_ONLY is used. This field can be both set at instance creation and update network interface operations.
    #[serde(rename = "stackType", skip_serializing_if = "Option::is_none")]
    pub stack_type: Option<StackType>,
    /// The URL of the Subnetwork resource for this instance. If the network resource is in legacy mode, do not specify this field. If the network is in auto subnet mode, specifying the subnetwork is optional. If the network is in custom subnet mode, specifying the subnetwork is required. If you specify this field, you can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: - https://www.googleapis.com/compute/v1/projects/project/regions/region /subnetworks/subnetwork - regions/region/subnetworks/subnetwork
    #[serde(rename = "subnetwork", skip_serializing_if = "Option::is_none")]
    pub subnetwork: Option<String>,
}

impl NetworkInterface {
    /// A network interface resource attached to an instance.
    pub fn new() -> NetworkInterface {
        NetworkInterface {
            access_configs: None,
            alias_ip_ranges: None,
            fingerprint: None,
            internal_ipv6_prefix_length: None,
            ipv6_access_configs: None,
            ipv6_access_type: None,
            ipv6_address: None,
            kind: None,
            name: None,
            network: None,
            network_attachment: None,
            network_ip: None,
            nic_type: None,
            queue_count: None,
            stack_type: None,
            subnetwork: None,
        }
    }
}
/// [Output Only] One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork. Valid only if stackType is IPV4_IPV6.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Ipv6AccessType {
    #[serde(rename = "EXTERNAL")]
    External,
    #[serde(rename = "INTERNAL")]
    Internal,
}

impl Default for Ipv6AccessType {
    fn default() -> Ipv6AccessType {
        Self::External
    }
}
/// The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NicType {
    #[serde(rename = "GVNIC")]
    Gvnic,
    #[serde(rename = "UNSPECIFIED_NIC_TYPE")]
    UnspecifiedNicType,
    #[serde(rename = "VIRTIO_NET")]
    VirtioNet,
}

impl Default for NicType {
    fn default() -> NicType {
        Self::Gvnic
    }
}
/// The stack type for this network interface. To assign only IPv4 addresses, use IPV4_ONLY. To assign both IPv4 and IPv6 addresses, use IPV4_IPV6. If not specified, IPV4_ONLY is used. This field can be both set at instance creation and update network interface operations.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StackType {
    #[serde(rename = "IPV4_IPV6")]
    Ipv6,
    #[serde(rename = "IPV4_ONLY")]
    Only,
}

impl Default for StackType {
    fn default() -> StackType {
        Self::Ipv6
    }
}
