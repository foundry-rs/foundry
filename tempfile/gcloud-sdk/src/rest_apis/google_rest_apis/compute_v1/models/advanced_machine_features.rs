/*
 * Compute Engine API
 *
 * Creates and runs virtual machines on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::compute_v1::models;
use serde::{Deserialize, Serialize};

/// AdvancedMachineFeatures : Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled).
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AdvancedMachineFeatures {
    /// Whether to enable nested virtualization or not (default is false).
    #[serde(
        rename = "enableNestedVirtualization",
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_nested_virtualization: Option<bool>,
    /// Whether to enable UEFI networking for instance creation.
    #[serde(
        rename = "enableUefiNetworking",
        skip_serializing_if = "Option::is_none"
    )]
    pub enable_uefi_networking: Option<bool>,
    /// The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.
    #[serde(rename = "threadsPerCore", skip_serializing_if = "Option::is_none")]
    pub threads_per_core: Option<i32>,
    /// The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance's nominal CPU count and the underlying platform's SMT width.
    #[serde(rename = "visibleCoreCount", skip_serializing_if = "Option::is_none")]
    pub visible_core_count: Option<i32>,
}

impl AdvancedMachineFeatures {
    /// Specifies options for controlling advanced machine features. Options that would traditionally be configured in a BIOS belong here. Features that require operating system support may have corresponding entries in the GuestOsFeatures of an Image (e.g., whether or not the OS in the Image supports nested virtualization being enabled or disabled).
    pub fn new() -> AdvancedMachineFeatures {
        AdvancedMachineFeatures {
            enable_nested_virtualization: None,
            enable_uefi_networking: None,
            threads_per_core: None,
            visible_core_count: None,
        }
    }
}
