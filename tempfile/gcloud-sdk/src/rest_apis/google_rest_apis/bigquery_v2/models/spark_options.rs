/*
 * BigQuery API
 *
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::bigquery_v2::models;
use serde::{Deserialize, Serialize};

/// SparkOptions : Options for a user-defined Spark routine.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SparkOptions {
    /// Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
    #[serde(rename = "archiveUris", skip_serializing_if = "Option::is_none")]
    pub archive_uris: Option<Vec<String>>,
    /// Fully qualified name of the user-provided Spark connection object. Format: ```\"projects/{project_id}/locations/{location_id}/connections/{connection_id}\"```
    #[serde(rename = "connection", skip_serializing_if = "Option::is_none")]
    pub connection: Option<String>,
    /// Custom container image for the runtime environment.
    #[serde(rename = "containerImage", skip_serializing_if = "Option::is_none")]
    pub container_image: Option<String>,
    /// Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
    #[serde(rename = "fileUris", skip_serializing_if = "Option::is_none")]
    pub file_uris: Option<Vec<String>>,
    /// JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
    #[serde(rename = "jarUris", skip_serializing_if = "Option::is_none")]
    pub jar_uris: Option<Vec<String>>,
    /// The main file URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set.
    #[serde(rename = "mainFileUri", skip_serializing_if = "Option::is_none")]
    pub main_file_uri: Option<String>,
    /// Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
    #[serde(rename = "properties", skip_serializing_if = "Option::is_none")]
    pub properties: Option<std::collections::HashMap<String, String>>,
    /// Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).
    #[serde(rename = "pyFileUris", skip_serializing_if = "Option::is_none")]
    pub py_file_uris: Option<Vec<String>>,
    /// Runtime version. If not specified, the default runtime version is used.
    #[serde(rename = "runtimeVersion", skip_serializing_if = "Option::is_none")]
    pub runtime_version: Option<String>,
}

impl SparkOptions {
    /// Options for a user-defined Spark routine.
    pub fn new() -> SparkOptions {
        SparkOptions {
            archive_uris: None,
            connection: None,
            container_image: None,
            file_uris: None,
            jar_uris: None,
            main_file_uri: None,
            properties: None,
            py_file_uris: None,
            runtime_version: None,
        }
    }
}
