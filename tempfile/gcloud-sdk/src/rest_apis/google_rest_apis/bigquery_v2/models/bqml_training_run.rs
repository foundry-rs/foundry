/*
 * BigQuery API
 *
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::bigquery_v2::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BqmlTrainingRun {
    /// [Output-only, Beta] List of each iteration results.
    #[serde(rename = "iterationResults", skip_serializing_if = "Option::is_none")]
    pub iteration_results: Option<Vec<models::BqmlIterationResult>>,
    /// [Output-only, Beta] Training run start time in milliseconds since the epoch.
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    /// [Output-only, Beta] Different state applicable for a training run. IN PROGRESS: Training run is in progress. FAILED: Training run ended due to a non-retryable failure. SUCCEEDED: Training run successfully completed. CANCELLED: Training run cancelled by the user.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(rename = "trainingOptions", skip_serializing_if = "Option::is_none")]
    pub training_options: Option<Box<models::BqmlTrainingRunTrainingOptions>>,
}

impl BqmlTrainingRun {
    pub fn new() -> BqmlTrainingRun {
        BqmlTrainingRun {
            iteration_results: None,
            start_time: None,
            state: None,
            training_options: None,
        }
    }
}
