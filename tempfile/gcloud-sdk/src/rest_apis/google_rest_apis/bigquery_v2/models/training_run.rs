/*
 * BigQuery API
 *
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::bigquery_v2::models;
use serde::{Deserialize, Serialize};

/// TrainingRun : Information about a single training query run for the model.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TrainingRun {
    /// Output only. Global explanation contains the explanation of top features on the class level. Applies to classification models only.
    #[serde(
        rename = "classLevelGlobalExplanations",
        skip_serializing_if = "Option::is_none"
    )]
    pub class_level_global_explanations: Option<Vec<models::GlobalExplanation>>,
    #[serde(rename = "dataSplitResult", skip_serializing_if = "Option::is_none")]
    pub data_split_result: Option<Box<models::DataSplitResult>>,
    #[serde(rename = "evaluationMetrics", skip_serializing_if = "Option::is_none")]
    pub evaluation_metrics: Option<Box<models::EvaluationMetrics>>,
    #[serde(
        rename = "modelLevelGlobalExplanation",
        skip_serializing_if = "Option::is_none"
    )]
    pub model_level_global_explanation: Option<Box<models::GlobalExplanation>>,
    /// Output only. Output of each iteration run, results.size() <= max_iterations.
    #[serde(rename = "results", skip_serializing_if = "Option::is_none")]
    pub results: Option<Vec<models::IterationResult>>,
    /// Output only. The start time of this training run.
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "trainingOptions", skip_serializing_if = "Option::is_none")]
    pub training_options: Option<Box<models::TrainingOptions>>,
    /// Output only. The start time of this training run, in milliseconds since epoch.
    #[serde(rename = "trainingStartTime", skip_serializing_if = "Option::is_none")]
    pub training_start_time: Option<String>,
    /// The model id in Vertex AI Model Registry for this training run
    #[serde(rename = "vertexAiModelId", skip_serializing_if = "Option::is_none")]
    pub vertex_ai_model_id: Option<String>,
    /// Output only. The model version in Vertex AI Model Registry for this training run
    #[serde(
        rename = "vertexAiModelVersion",
        skip_serializing_if = "Option::is_none"
    )]
    pub vertex_ai_model_version: Option<String>,
}

impl TrainingRun {
    /// Information about a single training query run for the model.
    pub fn new() -> TrainingRun {
        TrainingRun {
            class_level_global_explanations: None,
            data_split_result: None,
            evaluation_metrics: None,
            model_level_global_explanation: None,
            results: None,
            start_time: None,
            training_options: None,
            training_start_time: None,
            vertex_ai_model_id: None,
            vertex_ai_model_version: None,
        }
    }
}
