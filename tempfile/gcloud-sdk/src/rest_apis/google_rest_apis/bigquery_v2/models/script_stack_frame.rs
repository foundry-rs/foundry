/*
 * BigQuery API
 *
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::bigquery_v2::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ScriptStackFrame {
    /// [Output-only] One-based end column.
    #[serde(rename = "endColumn", skip_serializing_if = "Option::is_none")]
    pub end_column: Option<i32>,
    /// [Output-only] One-based end line.
    #[serde(rename = "endLine", skip_serializing_if = "Option::is_none")]
    pub end_line: Option<i32>,
    /// [Output-only] Name of the active procedure, empty if in a top-level script.
    #[serde(rename = "procedureId", skip_serializing_if = "Option::is_none")]
    pub procedure_id: Option<String>,
    /// [Output-only] One-based start column.
    #[serde(rename = "startColumn", skip_serializing_if = "Option::is_none")]
    pub start_column: Option<i32>,
    /// [Output-only] One-based start line.
    #[serde(rename = "startLine", skip_serializing_if = "Option::is_none")]
    pub start_line: Option<i32>,
    /// [Output-only] Text of the current statement/expression.
    #[serde(rename = "text", skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

impl ScriptStackFrame {
    pub fn new() -> ScriptStackFrame {
        ScriptStackFrame {
            end_column: None,
            end_line: None,
            procedure_id: None,
            start_column: None,
            start_line: None,
            text: None,
        }
    }
}
