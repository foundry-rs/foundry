/*
 * BigQuery API
 *
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::bigquery_v2::models;
use serde::{Deserialize, Serialize};

/// StandardSqlDataType : The data type of a variable such as a function argument. Examples include: * INT64: `{\"typeKind\": \"INT64\"}` * ARRAY: { \"typeKind\": \"ARRAY\", \"arrayElementType\": {\"typeKind\": \"STRING\"} } * STRUCT>: { \"typeKind\": \"STRUCT\", \"structType\": { \"fields\": [ { \"name\": \"x\", \"type\": {\"typeKind\": \"STRING\"} }, { \"name\": \"y\", \"type\": { \"typeKind\": \"ARRAY\", \"arrayElementType\": {\"typeKind\": \"DATE\"} } } ] } }
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StandardSqlDataType {
    #[serde(rename = "arrayElementType", skip_serializing_if = "Option::is_none")]
    pub array_element_type: Option<Box<models::StandardSqlDataType>>,
    #[serde(rename = "structType", skip_serializing_if = "Option::is_none")]
    pub struct_type: Option<Box<models::StandardSqlStructType>>,
    /// Required. The top level type of this field. Can be any standard SQL data type (e.g., \"INT64\", \"DATE\", \"ARRAY\").
    #[serde(rename = "typeKind", skip_serializing_if = "Option::is_none")]
    pub type_kind: Option<TypeKind>,
}

impl StandardSqlDataType {
    /// The data type of a variable such as a function argument. Examples include: * INT64: `{\"typeKind\": \"INT64\"}` * ARRAY: { \"typeKind\": \"ARRAY\", \"arrayElementType\": {\"typeKind\": \"STRING\"} } * STRUCT>: { \"typeKind\": \"STRUCT\", \"structType\": { \"fields\": [ { \"name\": \"x\", \"type\": {\"typeKind\": \"STRING\"} }, { \"name\": \"y\", \"type\": { \"typeKind\": \"ARRAY\", \"arrayElementType\": {\"typeKind\": \"DATE\"} } } ] } }
    pub fn new() -> StandardSqlDataType {
        StandardSqlDataType {
            array_element_type: None,
            struct_type: None,
            type_kind: None,
        }
    }
}
/// Required. The top level type of this field. Can be any standard SQL data type (e.g., \"INT64\", \"DATE\", \"ARRAY\").
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TypeKind {
    #[serde(rename = "TYPE_KIND_UNSPECIFIED")]
    TypeKindUnspecified,
    #[serde(rename = "INT64")]
    Int64,
    #[serde(rename = "BOOL")]
    Bool,
    #[serde(rename = "FLOAT64")]
    Float64,
    #[serde(rename = "STRING")]
    String,
    #[serde(rename = "BYTES")]
    Bytes,
    #[serde(rename = "TIMESTAMP")]
    Timestamp,
    #[serde(rename = "DATE")]
    Date,
    #[serde(rename = "TIME")]
    Time,
    #[serde(rename = "DATETIME")]
    Datetime,
    #[serde(rename = "INTERVAL")]
    Interval,
    #[serde(rename = "GEOGRAPHY")]
    Geography,
    #[serde(rename = "NUMERIC")]
    Numeric,
    #[serde(rename = "BIGNUMERIC")]
    Bignumeric,
    #[serde(rename = "JSON")]
    Json,
    #[serde(rename = "ARRAY")]
    Array,
    #[serde(rename = "STRUCT")]
    Struct,
}

impl Default for TypeKind {
    fn default() -> TypeKind {
        Self::TypeKindUnspecified
    }
}
