/*
 * BigQuery API
 *
 * A data platform for customers to create, manage, share and query data.
 *
 * The version of the OpenAPI document: v2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::google_rest_apis::bigquery_v2::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectListProjectsInner {
    /// A descriptive name for this project.
    #[serde(rename = "friendlyName", skip_serializing_if = "Option::is_none")]
    pub friendly_name: Option<String>,
    /// An opaque ID of this project.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The resource type.
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// The numeric ID of this project.
    #[serde(rename = "numericId", skip_serializing_if = "Option::is_none")]
    pub numeric_id: Option<String>,
    #[serde(rename = "projectReference", skip_serializing_if = "Option::is_none")]
    pub project_reference: Option<Box<models::ProjectReference>>,
}

impl ProjectListProjectsInner {
    pub fn new() -> ProjectListProjectsInner {
        ProjectListProjectsInner {
            friendly_name: None,
            id: None,
            kind: None,
            numeric_id: None,
            project_reference: None,
        }
    }
}
