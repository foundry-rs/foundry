// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetKeyRotationStatusOutput {
    /// <p>A Boolean value that specifies whether key rotation is enabled.</p>
    pub key_rotation_enabled: bool,
    /// <p>Identifies the specified symmetric encryption KMS key.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of days between each automatic rotation. The default value is 365 days.</p>
    pub rotation_period_in_days: ::std::option::Option<i32>,
    /// <p>The next date that KMS will automatically rotate the key material.</p>
    pub next_rotation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Identifies the date and time that an in progress on-demand rotation was initiated.</p>
    /// <p>The KMS API follows an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">eventual consistency</a> model due to the distributed nature of the system. As a result, there might be a slight delay between initiating on-demand key rotation and the rotation's completion. Once the on-demand rotation is complete, use <code>ListKeyRotations</code> to view the details of the on-demand rotation.</p>
    pub on_demand_rotation_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetKeyRotationStatusOutput {
    /// <p>A Boolean value that specifies whether key rotation is enabled.</p>
    pub fn key_rotation_enabled(&self) -> bool {
        self.key_rotation_enabled
    }
    /// <p>Identifies the specified symmetric encryption KMS key.</p>
    pub fn key_id(&self) -> ::std::option::Option<&str> {
        self.key_id.as_deref()
    }
    /// <p>The number of days between each automatic rotation. The default value is 365 days.</p>
    pub fn rotation_period_in_days(&self) -> ::std::option::Option<i32> {
        self.rotation_period_in_days
    }
    /// <p>The next date that KMS will automatically rotate the key material.</p>
    pub fn next_rotation_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.next_rotation_date.as_ref()
    }
    /// <p>Identifies the date and time that an in progress on-demand rotation was initiated.</p>
    /// <p>The KMS API follows an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">eventual consistency</a> model due to the distributed nature of the system. As a result, there might be a slight delay between initiating on-demand key rotation and the rotation's completion. Once the on-demand rotation is complete, use <code>ListKeyRotations</code> to view the details of the on-demand rotation.</p>
    pub fn on_demand_rotation_start_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.on_demand_rotation_start_date.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetKeyRotationStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetKeyRotationStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetKeyRotationStatusOutput`](crate::operation::get_key_rotation_status::GetKeyRotationStatusOutput).
    pub fn builder() -> crate::operation::get_key_rotation_status::builders::GetKeyRotationStatusOutputBuilder {
        crate::operation::get_key_rotation_status::builders::GetKeyRotationStatusOutputBuilder::default()
    }
}

/// A builder for [`GetKeyRotationStatusOutput`](crate::operation::get_key_rotation_status::GetKeyRotationStatusOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GetKeyRotationStatusOutputBuilder {
    pub(crate) key_rotation_enabled: ::std::option::Option<bool>,
    pub(crate) key_id: ::std::option::Option<::std::string::String>,
    pub(crate) rotation_period_in_days: ::std::option::Option<i32>,
    pub(crate) next_rotation_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) on_demand_rotation_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetKeyRotationStatusOutputBuilder {
    /// <p>A Boolean value that specifies whether key rotation is enabled.</p>
    pub fn key_rotation_enabled(mut self, input: bool) -> Self {
        self.key_rotation_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value that specifies whether key rotation is enabled.</p>
    pub fn set_key_rotation_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.key_rotation_enabled = input;
        self
    }
    /// <p>A Boolean value that specifies whether key rotation is enabled.</p>
    pub fn get_key_rotation_enabled(&self) -> &::std::option::Option<bool> {
        &self.key_rotation_enabled
    }
    /// <p>Identifies the specified symmetric encryption KMS key.</p>
    pub fn key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the specified symmetric encryption KMS key.</p>
    pub fn set_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_id = input;
        self
    }
    /// <p>Identifies the specified symmetric encryption KMS key.</p>
    pub fn get_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_id
    }
    /// <p>The number of days between each automatic rotation. The default value is 365 days.</p>
    pub fn rotation_period_in_days(mut self, input: i32) -> Self {
        self.rotation_period_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days between each automatic rotation. The default value is 365 days.</p>
    pub fn set_rotation_period_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.rotation_period_in_days = input;
        self
    }
    /// <p>The number of days between each automatic rotation. The default value is 365 days.</p>
    pub fn get_rotation_period_in_days(&self) -> &::std::option::Option<i32> {
        &self.rotation_period_in_days
    }
    /// <p>The next date that KMS will automatically rotate the key material.</p>
    pub fn next_rotation_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.next_rotation_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The next date that KMS will automatically rotate the key material.</p>
    pub fn set_next_rotation_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.next_rotation_date = input;
        self
    }
    /// <p>The next date that KMS will automatically rotate the key material.</p>
    pub fn get_next_rotation_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.next_rotation_date
    }
    /// <p>Identifies the date and time that an in progress on-demand rotation was initiated.</p>
    /// <p>The KMS API follows an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">eventual consistency</a> model due to the distributed nature of the system. As a result, there might be a slight delay between initiating on-demand key rotation and the rotation's completion. Once the on-demand rotation is complete, use <code>ListKeyRotations</code> to view the details of the on-demand rotation.</p>
    pub fn on_demand_rotation_start_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.on_demand_rotation_start_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the date and time that an in progress on-demand rotation was initiated.</p>
    /// <p>The KMS API follows an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">eventual consistency</a> model due to the distributed nature of the system. As a result, there might be a slight delay between initiating on-demand key rotation and the rotation's completion. Once the on-demand rotation is complete, use <code>ListKeyRotations</code> to view the details of the on-demand rotation.</p>
    pub fn set_on_demand_rotation_start_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.on_demand_rotation_start_date = input;
        self
    }
    /// <p>Identifies the date and time that an in progress on-demand rotation was initiated.</p>
    /// <p>The KMS API follows an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/programming-eventual-consistency.html">eventual consistency</a> model due to the distributed nature of the system. As a result, there might be a slight delay between initiating on-demand key rotation and the rotation's completion. Once the on-demand rotation is complete, use <code>ListKeyRotations</code> to view the details of the on-demand rotation.</p>
    pub fn get_on_demand_rotation_start_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.on_demand_rotation_start_date
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetKeyRotationStatusOutput`](crate::operation::get_key_rotation_status::GetKeyRotationStatusOutput).
    pub fn build(self) -> crate::operation::get_key_rotation_status::GetKeyRotationStatusOutput {
        crate::operation::get_key_rotation_status::GetKeyRotationStatusOutput {
            key_rotation_enabled: self.key_rotation_enabled.unwrap_or_default(),
            key_id: self.key_id,
            rotation_period_in_days: self.rotation_period_in_days,
            next_rotation_date: self.next_rotation_date,
            on_demand_rotation_start_date: self.on_demand_rotation_start_date,
            _request_id: self._request_id,
        }
    }
}
