// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DeriveSharedSecretOutput {
    /// <p>Identifies the KMS key used to derive the shared secret.</p>
    pub key_id: ::std::option::Option<::std::string::String>,
    /// <p>The raw secret derived from the specified key agreement algorithm, private key in the asymmetric KMS key, and your peer's public key.</p>
    /// <p>If the response includes the <code>CiphertextForRecipient</code> field, the <code>SharedSecret</code> field is null or empty.</p>
    pub shared_secret: ::std::option::Option<::aws_smithy_types::Blob>,
    /// <p>The plaintext shared secret encrypted with the public key in the attestation document.</p>
    /// <p>This field is included in the response only when the <code>Recipient</code> parameter in the request includes a valid attestation document from an Amazon Web Services Nitro enclave. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer Guide</i>.</p>
    pub ciphertext_for_recipient: ::std::option::Option<::aws_smithy_types::Blob>,
    /// <p>Identifies the key agreement algorithm used to derive the shared secret.</p>
    pub key_agreement_algorithm: ::std::option::Option<crate::types::KeyAgreementAlgorithmSpec>,
    /// <p>The source of the key material for the specified KMS key.</p>
    /// <p>When this value is <code>AWS_KMS</code>, KMS created the key material. When this value is <code>EXTERNAL</code>, the key material was imported or the KMS key doesn't have any key material.</p>
    /// <p>The only valid values for DeriveSharedSecret are <code>AWS_KMS</code> and <code>EXTERNAL</code>. DeriveSharedSecret does not support KMS keys with a <code>KeyOrigin</code> value of <code>AWS_CLOUDHSM</code> or <code>EXTERNAL_KEY_STORE</code>.</p>
    pub key_origin: ::std::option::Option<crate::types::OriginType>,
    _request_id: Option<String>,
}
impl DeriveSharedSecretOutput {
    /// <p>Identifies the KMS key used to derive the shared secret.</p>
    pub fn key_id(&self) -> ::std::option::Option<&str> {
        self.key_id.as_deref()
    }
    /// <p>The raw secret derived from the specified key agreement algorithm, private key in the asymmetric KMS key, and your peer's public key.</p>
    /// <p>If the response includes the <code>CiphertextForRecipient</code> field, the <code>SharedSecret</code> field is null or empty.</p>
    pub fn shared_secret(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.shared_secret.as_ref()
    }
    /// <p>The plaintext shared secret encrypted with the public key in the attestation document.</p>
    /// <p>This field is included in the response only when the <code>Recipient</code> parameter in the request includes a valid attestation document from an Amazon Web Services Nitro enclave. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer Guide</i>.</p>
    pub fn ciphertext_for_recipient(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.ciphertext_for_recipient.as_ref()
    }
    /// <p>Identifies the key agreement algorithm used to derive the shared secret.</p>
    pub fn key_agreement_algorithm(&self) -> ::std::option::Option<&crate::types::KeyAgreementAlgorithmSpec> {
        self.key_agreement_algorithm.as_ref()
    }
    /// <p>The source of the key material for the specified KMS key.</p>
    /// <p>When this value is <code>AWS_KMS</code>, KMS created the key material. When this value is <code>EXTERNAL</code>, the key material was imported or the KMS key doesn't have any key material.</p>
    /// <p>The only valid values for DeriveSharedSecret are <code>AWS_KMS</code> and <code>EXTERNAL</code>. DeriveSharedSecret does not support KMS keys with a <code>KeyOrigin</code> value of <code>AWS_CLOUDHSM</code> or <code>EXTERNAL_KEY_STORE</code>.</p>
    pub fn key_origin(&self) -> ::std::option::Option<&crate::types::OriginType> {
        self.key_origin.as_ref()
    }
}
impl ::std::fmt::Debug for DeriveSharedSecretOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DeriveSharedSecretOutput");
        formatter.field("key_id", &self.key_id);
        formatter.field("shared_secret", &"*** Sensitive Data Redacted ***");
        formatter.field("ciphertext_for_recipient", &self.ciphertext_for_recipient);
        formatter.field("key_agreement_algorithm", &self.key_agreement_algorithm);
        formatter.field("key_origin", &self.key_origin);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for DeriveSharedSecretOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeriveSharedSecretOutput {
    /// Creates a new builder-style object to manufacture [`DeriveSharedSecretOutput`](crate::operation::derive_shared_secret::DeriveSharedSecretOutput).
    pub fn builder() -> crate::operation::derive_shared_secret::builders::DeriveSharedSecretOutputBuilder {
        crate::operation::derive_shared_secret::builders::DeriveSharedSecretOutputBuilder::default()
    }
}

/// A builder for [`DeriveSharedSecretOutput`](crate::operation::derive_shared_secret::DeriveSharedSecretOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct DeriveSharedSecretOutputBuilder {
    pub(crate) key_id: ::std::option::Option<::std::string::String>,
    pub(crate) shared_secret: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) ciphertext_for_recipient: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) key_agreement_algorithm: ::std::option::Option<crate::types::KeyAgreementAlgorithmSpec>,
    pub(crate) key_origin: ::std::option::Option<crate::types::OriginType>,
    _request_id: Option<String>,
}
impl DeriveSharedSecretOutputBuilder {
    /// <p>Identifies the KMS key used to derive the shared secret.</p>
    pub fn key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the KMS key used to derive the shared secret.</p>
    pub fn set_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_id = input;
        self
    }
    /// <p>Identifies the KMS key used to derive the shared secret.</p>
    pub fn get_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_id
    }
    /// <p>The raw secret derived from the specified key agreement algorithm, private key in the asymmetric KMS key, and your peer's public key.</p>
    /// <p>If the response includes the <code>CiphertextForRecipient</code> field, the <code>SharedSecret</code> field is null or empty.</p>
    pub fn shared_secret(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.shared_secret = ::std::option::Option::Some(input);
        self
    }
    /// <p>The raw secret derived from the specified key agreement algorithm, private key in the asymmetric KMS key, and your peer's public key.</p>
    /// <p>If the response includes the <code>CiphertextForRecipient</code> field, the <code>SharedSecret</code> field is null or empty.</p>
    pub fn set_shared_secret(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.shared_secret = input;
        self
    }
    /// <p>The raw secret derived from the specified key agreement algorithm, private key in the asymmetric KMS key, and your peer's public key.</p>
    /// <p>If the response includes the <code>CiphertextForRecipient</code> field, the <code>SharedSecret</code> field is null or empty.</p>
    pub fn get_shared_secret(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.shared_secret
    }
    /// <p>The plaintext shared secret encrypted with the public key in the attestation document.</p>
    /// <p>This field is included in the response only when the <code>Recipient</code> parameter in the request includes a valid attestation document from an Amazon Web Services Nitro enclave. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer Guide</i>.</p>
    pub fn ciphertext_for_recipient(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.ciphertext_for_recipient = ::std::option::Option::Some(input);
        self
    }
    /// <p>The plaintext shared secret encrypted with the public key in the attestation document.</p>
    /// <p>This field is included in the response only when the <code>Recipient</code> parameter in the request includes a valid attestation document from an Amazon Web Services Nitro enclave. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer Guide</i>.</p>
    pub fn set_ciphertext_for_recipient(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.ciphertext_for_recipient = input;
        self
    }
    /// <p>The plaintext shared secret encrypted with the public key in the attestation document.</p>
    /// <p>This field is included in the response only when the <code>Recipient</code> parameter in the request includes a valid attestation document from an Amazon Web Services Nitro enclave. For information about the interaction between KMS and Amazon Web Services Nitro Enclaves, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/services-nitro-enclaves.html">How Amazon Web Services Nitro Enclaves uses KMS</a> in the <i>Key Management Service Developer Guide</i>.</p>
    pub fn get_ciphertext_for_recipient(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.ciphertext_for_recipient
    }
    /// <p>Identifies the key agreement algorithm used to derive the shared secret.</p>
    pub fn key_agreement_algorithm(mut self, input: crate::types::KeyAgreementAlgorithmSpec) -> Self {
        self.key_agreement_algorithm = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifies the key agreement algorithm used to derive the shared secret.</p>
    pub fn set_key_agreement_algorithm(mut self, input: ::std::option::Option<crate::types::KeyAgreementAlgorithmSpec>) -> Self {
        self.key_agreement_algorithm = input;
        self
    }
    /// <p>Identifies the key agreement algorithm used to derive the shared secret.</p>
    pub fn get_key_agreement_algorithm(&self) -> &::std::option::Option<crate::types::KeyAgreementAlgorithmSpec> {
        &self.key_agreement_algorithm
    }
    /// <p>The source of the key material for the specified KMS key.</p>
    /// <p>When this value is <code>AWS_KMS</code>, KMS created the key material. When this value is <code>EXTERNAL</code>, the key material was imported or the KMS key doesn't have any key material.</p>
    /// <p>The only valid values for DeriveSharedSecret are <code>AWS_KMS</code> and <code>EXTERNAL</code>. DeriveSharedSecret does not support KMS keys with a <code>KeyOrigin</code> value of <code>AWS_CLOUDHSM</code> or <code>EXTERNAL_KEY_STORE</code>.</p>
    pub fn key_origin(mut self, input: crate::types::OriginType) -> Self {
        self.key_origin = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the key material for the specified KMS key.</p>
    /// <p>When this value is <code>AWS_KMS</code>, KMS created the key material. When this value is <code>EXTERNAL</code>, the key material was imported or the KMS key doesn't have any key material.</p>
    /// <p>The only valid values for DeriveSharedSecret are <code>AWS_KMS</code> and <code>EXTERNAL</code>. DeriveSharedSecret does not support KMS keys with a <code>KeyOrigin</code> value of <code>AWS_CLOUDHSM</code> or <code>EXTERNAL_KEY_STORE</code>.</p>
    pub fn set_key_origin(mut self, input: ::std::option::Option<crate::types::OriginType>) -> Self {
        self.key_origin = input;
        self
    }
    /// <p>The source of the key material for the specified KMS key.</p>
    /// <p>When this value is <code>AWS_KMS</code>, KMS created the key material. When this value is <code>EXTERNAL</code>, the key material was imported or the KMS key doesn't have any key material.</p>
    /// <p>The only valid values for DeriveSharedSecret are <code>AWS_KMS</code> and <code>EXTERNAL</code>. DeriveSharedSecret does not support KMS keys with a <code>KeyOrigin</code> value of <code>AWS_CLOUDHSM</code> or <code>EXTERNAL_KEY_STORE</code>.</p>
    pub fn get_key_origin(&self) -> &::std::option::Option<crate::types::OriginType> {
        &self.key_origin
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeriveSharedSecretOutput`](crate::operation::derive_shared_secret::DeriveSharedSecretOutput).
    pub fn build(self) -> crate::operation::derive_shared_secret::DeriveSharedSecretOutput {
        crate::operation::derive_shared_secret::DeriveSharedSecretOutput {
            key_id: self.key_id,
            shared_secret: self.shared_secret,
            ciphertext_for_recipient: self.ciphertext_for_recipient,
            key_agreement_algorithm: self.key_agreement_algorithm,
            key_origin: self.key_origin,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for DeriveSharedSecretOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DeriveSharedSecretOutputBuilder");
        formatter.field("key_id", &self.key_id);
        formatter.field("shared_secret", &"*** Sensitive Data Redacted ***");
        formatter.field("ciphertext_for_recipient", &self.ciphertext_for_recipient);
        formatter.field("key_agreement_algorithm", &self.key_agreement_algorithm);
        formatter.field("key_origin", &self.key_origin);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
