// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_key_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_key::CreateKeyInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.policy {
        object.key("Policy").string(var_1.as_str());
    }
    if let Some(var_2) = &input.description {
        object.key("Description").string(var_2.as_str());
    }
    if let Some(var_3) = &input.key_usage {
        object.key("KeyUsage").string(var_3.as_str());
    }
    if let Some(var_4) = &input.customer_master_key_spec {
        object.key("CustomerMasterKeySpec").string(var_4.as_str());
    }
    if let Some(var_5) = &input.key_spec {
        object.key("KeySpec").string(var_5.as_str());
    }
    if let Some(var_6) = &input.origin {
        object.key("Origin").string(var_6.as_str());
    }
    if let Some(var_7) = &input.custom_key_store_id {
        object.key("CustomKeyStoreId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.bypass_policy_lockout_safety_check {
        object.key("BypassPolicyLockoutSafetyCheck").boolean(*var_8);
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("Tags").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.multi_region {
        object.key("MultiRegion").boolean(*var_13);
    }
    if let Some(var_14) = &input.xks_key_id {
        object.key("XksKeyId").string(var_14.as_str());
    }
    Ok(())
}
