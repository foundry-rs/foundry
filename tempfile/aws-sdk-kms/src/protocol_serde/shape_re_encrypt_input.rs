// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_re_encrypt_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::re_encrypt::ReEncryptInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.ciphertext_blob {
        object.key("CiphertextBlob").string_unchecked(&::aws_smithy_types::base64::encode(var_1));
    }
    if let Some(var_2) = &input.source_encryption_context {
        #[allow(unused_mut)]
        let mut object_3 = object.key("SourceEncryptionContext").start_object();
        for (key_4, value_5) in var_2 {
            {
                object_3.key(key_4.as_str()).string(value_5.as_str());
            }
        }
        object_3.finish();
    }
    if let Some(var_6) = &input.source_key_id {
        object.key("SourceKeyId").string(var_6.as_str());
    }
    if let Some(var_7) = &input.destination_key_id {
        object.key("DestinationKeyId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.destination_encryption_context {
        #[allow(unused_mut)]
        let mut object_9 = object.key("DestinationEncryptionContext").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.source_encryption_algorithm {
        object.key("SourceEncryptionAlgorithm").string(var_12.as_str());
    }
    if let Some(var_13) = &input.destination_encryption_algorithm {
        object.key("DestinationEncryptionAlgorithm").string(var_13.as_str());
    }
    if let Some(var_14) = &input.grant_tokens {
        let mut array_15 = object.key("GrantTokens").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.dry_run {
        object.key("DryRun").boolean(*var_17);
    }
    Ok(())
}
