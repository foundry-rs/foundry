// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_decrypt_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::decrypt::DecryptInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.ciphertext_blob {
        object.key("CiphertextBlob").string_unchecked(&::aws_smithy_types::base64::encode(var_1));
    }
    if let Some(var_2) = &input.encryption_context {
        #[allow(unused_mut)]
        let mut object_3 = object.key("EncryptionContext").start_object();
        for (key_4, value_5) in var_2 {
            {
                object_3.key(key_4.as_str()).string(value_5.as_str());
            }
        }
        object_3.finish();
    }
    if let Some(var_6) = &input.grant_tokens {
        let mut array_7 = object.key("GrantTokens").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.key_id {
        object.key("KeyId").string(var_9.as_str());
    }
    if let Some(var_10) = &input.encryption_algorithm {
        object.key("EncryptionAlgorithm").string(var_10.as_str());
    }
    if let Some(var_11) = &input.recipient {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Recipient").start_object();
        crate::protocol_serde::shape_recipient_info::ser_recipient_info(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.dry_run {
        object.key("DryRun").boolean(*var_13);
    }
    Ok(())
}
