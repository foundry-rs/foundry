#![allow(dead_code)]

pub type OpCode = u8;

#[derive(Copy, Clone)]
pub struct OpCodeInfo {
    pub name: &'static str,
    pub known: bool,
    pub size: usize,
    pub stack_in: usize,
    pub stack_out: usize,
}

macro_rules! declare_opcodes {
    ($(($code:literal, $name:ident, $size:literal, $stack_in:literal, $stack_out:literal)),* $(,)?) => {
        $(
            pub const $name: OpCode = $code;
        )*

        const INFOS: [OpCodeInfo; 256] = {
            let mut arr = [OpCodeInfo{name: "?", known: false, size: 1, stack_in: 0, stack_out: 0}; 256];
            $(
                let p = $code as usize;
                arr[p].name = stringify!($name);
                arr[p].known = true;
                arr[p].size = $size;
                arr[p].stack_in = $stack_in;
                arr[p].stack_out = $stack_out;
            )*
            arr
        };

    };
}

pub fn info(op: OpCode) -> &'static OpCodeInfo {
    &INFOS[op as usize]
}

declare_opcodes![
    (0x00, STOP, 1, 0, 0),
    (0x01, ADD, 1, 2, 1),
    (0x02, MUL, 1, 2, 1),
    (0x03, SUB, 1, 2, 1),
    (0x04, DIV, 1, 2, 1),
    (0x05, SDIV, 1, 2, 1),
    (0x06, MOD, 1, 2, 1),
    (0x07, SMOD, 1, 2, 1),
    (0x08, ADDMOD, 1, 3, 1),
    (0x09, MULMOD, 1, 3, 1),
    (0x0A, EXP, 1, 2, 1),
    (0x0B, SIGNEXTEND, 1, 2, 1),
    (0x10, LT, 1, 2, 1),
    (0x11, GT, 1, 2, 1),
    (0x12, SLT, 1, 2, 1),
    (0x13, SGT, 1, 2, 1),
    (0x14, EQ, 1, 2, 1),
    (0x15, ISZERO, 1, 1, 1),
    (0x16, AND, 1, 2, 1),
    (0x17, OR, 1, 2, 1),
    (0x18, XOR, 1, 2, 1),
    (0x19, NOT, 1, 1, 1),
    (0x1A, BYTE, 1, 2, 1),
    (0x1B, SHL, 1, 2, 1),
    (0x1C, SHR, 1, 2, 1),
    (0x1D, SAR, 1, 2, 1),
    (0x20, KECCAK256, 1, 2, 1),
    (0x30, ADDRESS, 1, 0, 1),
    (0x31, BALANCE, 1, 1, 1),
    (0x32, ORIGIN, 1, 0, 1),
    (0x33, CALLER, 1, 0, 1),
    (0x34, CALLVALUE, 1, 0, 1),
    (0x35, CALLDATALOAD, 1, 1, 1),
    (0x36, CALLDATASIZE, 1, 0, 1),
    (0x37, CALLDATACOPY, 1, 3, 0),
    (0x38, CODESIZE, 1, 0, 1),
    (0x39, CODECOPY, 1, 3, 0),
    (0x3A, GASPRICE, 1, 0, 1),
    (0x3B, EXTCODESIZE, 1, 1, 1),
    (0x3C, EXTCODECOPY, 1, 4, 0),
    (0x3D, RETURNDATASIZE, 1, 0, 1),
    (0x3E, RETURNDATACOPY, 1, 3, 0),
    (0x3F, EXTCODEHASH, 1, 1, 1),
    (0x40, BLOCKHASH, 1, 1, 1),
    (0x41, COINBASE, 1, 0, 1),
    (0x42, TIMESTAMP, 1, 0, 1),
    (0x43, NUMBER, 1, 0, 1),
    (0x44, PREVRANDAO, 1, 0, 1),
    (0x45, GASLIMIT, 1, 0, 1),
    (0x46, CHAINID, 1, 0, 1),
    (0x47, SELFBALANCE, 1, 0, 1),
    (0x48, BASEFEE, 1, 0, 1),
    (0x49, BLOBHASH, 1, 1, 1),
    (0x4A, BLOBBASEFEE, 1, 0, 1),
    (0x50, POP, 1, 1, 0),
    (0x51, MLOAD, 1, 1, 1),
    (0x52, MSTORE, 1, 2, 0),
    (0x53, MSTORE8, 1, 2, 0),
    (0x54, SLOAD, 1, 1, 1),
    (0x55, SSTORE, 1, 2, 0),
    (0x56, JUMP, 1, 1, 0),
    (0x57, JUMPI, 1, 2, 0),
    (0x58, PC, 1, 0, 1),
    (0x59, MSIZE, 1, 0, 1),
    (0x5A, GAS, 1, 0, 1),
    (0x5B, JUMPDEST, 1, 0, 0),
    (0x5C, TLOAD, 1, 1, 1),
    (0x5D, TSTORE, 1, 2, 0),
    (0x5E, MCOPY, 1, 3, 0),
    (0x5F, PUSH0, 1, 0, 1),
    (0x60, PUSH1, 2, 0, 1),
    (0x61, PUSH2, 3, 0, 1),
    (0x62, PUSH3, 4, 0, 1),
    (0x63, PUSH4, 5, 0, 1),
    (0x64, PUSH5, 6, 0, 1),
    (0x65, PUSH6, 7, 0, 1),
    (0x66, PUSH7, 8, 0, 1),
    (0x67, PUSH8, 9, 0, 1),
    (0x68, PUSH9, 10, 0, 1),
    (0x69, PUSH10, 11, 0, 1),
    (0x6A, PUSH11, 12, 0, 1),
    (0x6B, PUSH12, 13, 0, 1),
    (0x6C, PUSH13, 14, 0, 1),
    (0x6D, PUSH14, 15, 0, 1),
    (0x6E, PUSH15, 16, 0, 1),
    (0x6F, PUSH16, 17, 0, 1),
    (0x70, PUSH17, 18, 0, 1),
    (0x71, PUSH18, 19, 0, 1),
    (0x72, PUSH19, 20, 0, 1),
    (0x73, PUSH20, 21, 0, 1),
    (0x74, PUSH21, 22, 0, 1),
    (0x75, PUSH22, 23, 0, 1),
    (0x76, PUSH23, 24, 0, 1),
    (0x77, PUSH24, 25, 0, 1),
    (0x78, PUSH25, 26, 0, 1),
    (0x79, PUSH26, 27, 0, 1),
    (0x7A, PUSH27, 28, 0, 1),
    (0x7B, PUSH28, 29, 0, 1),
    (0x7C, PUSH29, 30, 0, 1),
    (0x7D, PUSH30, 31, 0, 1),
    (0x7E, PUSH31, 32, 0, 1),
    (0x7F, PUSH32, 33, 0, 1),
    (0x80, DUP1, 1, 1, 2),
    (0x81, DUP2, 1, 2, 3),
    (0x82, DUP3, 1, 3, 4),
    (0x83, DUP4, 1, 4, 5),
    (0x84, DUP5, 1, 5, 6),
    (0x85, DUP6, 1, 6, 7),
    (0x86, DUP7, 1, 7, 8),
    (0x87, DUP8, 1, 8, 9),
    (0x88, DUP9, 1, 9, 10),
    (0x89, DUP10, 1, 10, 11),
    (0x8A, DUP11, 1, 11, 12),
    (0x8B, DUP12, 1, 12, 13),
    (0x8C, DUP13, 1, 13, 14),
    (0x8D, DUP14, 1, 14, 15),
    (0x8E, DUP15, 1, 15, 16),
    (0x8F, DUP16, 1, 16, 17),
    (0x90, SWAP1, 1, 2, 2),
    (0x91, SWAP2, 1, 3, 3),
    (0x92, SWAP3, 1, 4, 4),
    (0x93, SWAP4, 1, 5, 5),
    (0x94, SWAP5, 1, 6, 6),
    (0x95, SWAP6, 1, 7, 7),
    (0x96, SWAP7, 1, 8, 8),
    (0x97, SWAP8, 1, 9, 9),
    (0x98, SWAP9, 1, 10, 10),
    (0x99, SWAP10, 1, 11, 11),
    (0x9A, SWAP11, 1, 12, 12),
    (0x9B, SWAP12, 1, 13, 13),
    (0x9C, SWAP13, 1, 14, 14),
    (0x9D, SWAP14, 1, 15, 15),
    (0x9E, SWAP15, 1, 16, 16),
    (0x9F, SWAP16, 1, 17, 17),
    (0xA0, LOG0, 1, 2, 0),
    (0xA1, LOG1, 1, 3, 0),
    (0xA2, LOG2, 1, 4, 0),
    (0xA3, LOG3, 1, 5, 0),
    (0xA4, LOG4, 1, 6, 0),
    (0xF0, CREATE, 1, 3, 1),
    (0xF1, CALL, 1, 7, 1),
    (0xF2, CALLCODE, 1, 7, 1),
    (0xF3, RETURN, 1, 2, 0),
    (0xF4, DELEGATECALL, 1, 6, 1),
    (0xF5, CREATE2, 1, 4, 1),
    (0xFA, STATICCALL, 1, 6, 1),
    (0xFD, REVERT, 1, 2, 0),
    (0xFE, INVALID, 1, 0, 0),
    (0xFF, SELFDESTRUCT, 1, 1, 0),
];
