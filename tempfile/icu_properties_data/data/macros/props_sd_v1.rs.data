// @generated
/// Implement `DataProvider<SoftDottedV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_props_sd_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.67"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_PROPS_SD_V1: &'static <icu::properties::provider::SoftDottedV1Marker as icu_provider::DataMarker>::Yokeable = &icu::properties::provider::PropertyCodePointSetV1::InversionList(unsafe {
                #[allow(unused_unsafe)]
                icu::collections::codepointinvlist::CodePointInversionList::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"i\0\0\0k\0\0\0/\x01\0\x000\x01\0\0I\x02\0\0J\x02\0\0h\x02\0\0i\x02\0\0\x9D\x02\0\0\x9E\x02\0\0\xB2\x02\0\0\xB3\x02\0\0\xF3\x03\0\0\xF4\x03\0\0V\x04\0\0W\x04\0\0X\x04\0\0Y\x04\0\0b\x1D\0\0c\x1D\0\0\x96\x1D\0\0\x97\x1D\0\0\xA4\x1D\0\0\xA5\x1D\0\0\xA8\x1D\0\0\xA9\x1D\0\0-\x1E\0\0.\x1E\0\0\xCB\x1E\0\0\xCC\x1E\0\0q \0\0r \0\0H!\0\0J!\0\0|,\0\0},\0\0\"\xD4\x01\0$\xD4\x01\0V\xD4\x01\0X\xD4\x01\0\x8A\xD4\x01\0\x8C\xD4\x01\0\xBE\xD4\x01\0\xC0\xD4\x01\0\xF2\xD4\x01\0\xF4\xD4\x01\0&\xD5\x01\0(\xD5\x01\0Z\xD5\x01\0\\\xD5\x01\0\x8E\xD5\x01\0\x90\xD5\x01\0\xC2\xD5\x01\0\xC4\xD5\x01\0\xF6\xD5\x01\0\xF8\xD5\x01\0*\xD6\x01\0,\xD6\x01\0^\xD6\x01\0`\xD6\x01\0\x92\xD6\x01\0\x94\xD6\x01\0\x1A\xDF\x01\0\x1B\xDF\x01\0L\xE0\x01\0N\xE0\x01\0h\xE0\x01\0i\xE0\x01\0") }, 50u32)
            });
        }
        #[clippy::msrv = "1.67"]
        impl icu_provider::DataProvider<icu::properties::provider::SoftDottedV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::SoftDottedV1Marker>, icu_provider::DataError> {
                if req.locale.is_empty() {
                    Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(Self::SINGLETON_PROPS_SD_V1)), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::ExtraneousLocale.with_req(<icu::properties::provider::SoftDottedV1Marker as icu_provider::KeyedDataMarker>::KEY, req))
                }
            }
        }
    };
}
/// Implement `IterableDataProvider<SoftDottedV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this key.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_props_sd_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        impl icu_provider::datagen::IterableDataProvider<icu::properties::provider::SoftDottedV1Marker> for $provider {
            fn supported_locales(&self) -> Result<alloc::vec::Vec<icu_provider::DataLocale>, icu_provider::DataError> {
                Ok([icu_provider::DataLocale::default()].into())
            }
        }
    };
}
