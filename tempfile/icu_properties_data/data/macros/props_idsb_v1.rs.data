// @generated
/// Implement `DataProvider<IdsBinaryOperatorV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_props_idsb_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.67"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_PROPS_IDSB_V1: &'static <icu::properties::provider::IdsBinaryOperatorV1Marker as icu_provider::DataMarker>::Yokeable = &icu::properties::provider::PropertyCodePointSetV1::InversionList(unsafe {
                #[allow(unused_unsafe)]
                icu::collections::codepointinvlist::CodePointInversionList::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\xF0/\0\0\xF2/\0\0\xF4/\0\0\xFE/\0\0\xEF1\0\0\xF01\0\0") }, 13u32)
            });
        }
        #[clippy::msrv = "1.67"]
        impl icu_provider::DataProvider<icu::properties::provider::IdsBinaryOperatorV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::IdsBinaryOperatorV1Marker>, icu_provider::DataError> {
                if req.locale.is_empty() {
                    Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(Self::SINGLETON_PROPS_IDSB_V1)), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::ExtraneousLocale.with_req(<icu::properties::provider::IdsBinaryOperatorV1Marker as icu_provider::KeyedDataMarker>::KEY, req))
                }
            }
        }
    };
}
/// Implement `IterableDataProvider<IdsBinaryOperatorV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this key.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_props_idsb_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        impl icu_provider::datagen::IterableDataProvider<icu::properties::provider::IdsBinaryOperatorV1Marker> for $provider {
            fn supported_locales(&self) -> Result<alloc::vec::Vec<icu_provider::DataLocale>, icu_provider::DataError> {
                Ok([icu_provider::DataLocale::default()].into())
            }
        }
    };
}
