// @generated
/// Implement `DataProvider<ScriptNameToValueV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_propnames_from_sc_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.67"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_PROPNAMES_FROM_SC_V1: &'static <icu::properties::provider::ScriptNameToValueV1Marker as icu_provider::DataMarker>::Yokeable = &icu::properties::provider::names::PropertyValueNameToEnumMapV1 {
                map: unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"h\x01\0\0\0\0\x05\0\t\0\r\0\x11\0\x15\0*\0.\x004\08\0@\0D\0H\0O\0S\0W\0_\0c\0h\0l\0u\0z\0~\0\x82\0\x89\0\x92\0\x96\0\x9A\0\x9E\0\xA6\0\xAA\0\xB0\0\xB4\0\xBB\0\xBF\0\xC7\0\xCB\0\xD0\0\xD4\0\xE7\0\xEB\0\xEF\0\xF5\0\x07\x01\r\x01\x11\x01\x15\x01\x1D\x01'\x01+\x01/\x015\x019\x01?\x01C\x01G\x01P\x01W\x01c\x01k\x01o\x01s\x01z\x01~\x01\x88\x01\x8C\x01\x97\x01\x9B\x01\xA0\x01\xA4\x01\xA8\x01\xB0\x01\xB4\x01\xB8\x01\xBC\x01\xD0\x01\xD4\x01\xDB\x01\xDF\x01\xE6\x01\xEA\x01\xF2\x01\xF6\x01\xFA\x01\x02\x02\x06\x02\x10\x02\x14\x02\x18\x02\x1C\x02\"\x02&\x02-\x022\x026\x02>\x02B\x02O\x02W\x02[\x02^\x02b\x02f\x02l\x02p\x02\x7F\x02\x83\x02\x87\x02\x8B\x02\x92\x02\x96\x02\x9C\x02\xA0\x02\xA6\x02\xAA\x02\xB2\x02\xB6\x02\xBA\x02\xBE\x02\xC2\x02\xC6\x02\xD6\x02\xDA\x02\xE3\x02\xF8\x02\x0E\x03\x12\x03\x16\x03\x1A\x03\"\x03&\x03*\x030\x034\x038\x03?\x03G\x03[\x03_\x03g\x03k\x03u\x03\x88\x03\x8D\x03\x91\x03\x95\x03\x9B\x03\xA4\x03\xA8\x03\xAC\x03\xB0\x03\xB4\x03\xB8\x03\xBC\x03\xBF\x03\xC3\x03\xC7\x03\xCB\x03\xD0\x03\xD4\x03\xD8\x03\xDE\x03\xE2\x03\xE7\x03\xEB\x03\xEF\x03\xF7\x03\xFF\x03\x03\x04\x07\x04\x0B\x04\x11\x04\x15\x04\x1B\x04#\x04'\x04+\x042\x04;\x04?\x04F\x04J\x04T\x04X\x04_\x04l\x04p\x04{\x04\x7F\x04\x8B\x04\x8F\x04\x9C\x04\xA0\x04\xA4\x04\xB4\x04\xC8\x04\xCC\x04\xD0\x04\xD4\x04\xD8\x04\xE1\x04\xE5\x04\xE8\x04\xEC\x04\xF0\x04\xF4\x04\xFB\x04\x02\x05\x06\x05\x0F\x05\x13\x05\x1E\x05\"\x05-\x051\x055\x059\x05D\x05H\x05K\x05O\x05S\x05X\x05n\x05r\x05w\x05\x7F\x05\x83\x05\x90\x05\x9A\x05\xAB\x05\xB5\x05\xC0\x05\xCB\x05\xDC\x05\xE6\x05\xF0\x05\xF5\x05\xF9\x05\xFD\x05\x02\x06\x06\x06\n\x06\x11\x06\x15\x06!\x06%\x06.\x062\x06=\x06A\x06E\x06M\x06Q\x06U\x06Y\x06]\x06g\x06k\x06o\x06~\x06\x82\x06\x86\x06\x8C\x06\x90\x06\x94\x06\x98\x06\x9D\x06\xA1\x06\xAA\x06\xAE\x06\xB2\x06\xB6\x06\xBA\x06\xC4\x06\xC8\x06\xCF\x06\xD6\x06\xDA\x06\xDE\x06\xE2\x06\xE9\x06\xF4\x06\xF8\x06\xFC\x06\x03\x07\x07\x07\x0E\x07\x12\x07\x16\x07\"\x07&\x07-\x071\x07:\x07>\x07J\x07N\x07R\x07X\x07\\\x07`\x07g\x07k\x07s\x07y\x07\x81\x07\x89\x07\x8D\x07\x92\x07\x96\x07\x9A\x07\x9F\x07\xA3\x07\xA7\x07\xAD\x07\xB3\x07\xB7\x07\xBB\x07\xC1\x07\xC5\x07\xC9\x07\xCD\x07\xD1\x07\xD7\x07\xDB\x07\xE2\x07\xE6\x07\xEE\x07\xF2\x07\xF9\x07\xFD\x07\x01\x08\x05\x08\r\x08\x14\x08\x17\x08\x1B\x08\x1F\x08#\x08+\x081\x085\x08@\x08D\x08H\x08L\x08P\x08T\x08Z\x08\\\x08`\x08p\x08t\x08x\x08|\x08\x80\x08\x84\x08\x88\x08\x8C\x08AdlamAdlmAfakAghbAhomAnatolian_HieroglyphsArabArabicAranArmenianArmiArmnAvestanAvstBaliBalineseBamuBamumBassBassa_VahBatakBatkBengBengaliBhaiksukiBhksBlisBopoBopomofoBrahBrahmiBraiBrailleBugiBugineseBuhdBuhidCakmCanadian_AboriginalCansCariCarianCaucasian_AlbanianChakmaChamCherCherokeeChorasmianChrsCirtCommonCoptCopticCpmnCprtCuneiformCypriotCypro_MinoanCyrillicCyrlCyrsDeseretDevaDevanagariDiakDives_AkuruDogrDograDsrtDuplDuployanEgydEgyhEgypEgyptian_HieroglyphsElbaElbasanElymElymaicEthiEthiopicGeokGeorGeorgianGlagGlagoliticGongGonmGothGothicGranGranthaGreekGrekGujaratiGujrGunjala_GondiGurmukhiGuruHanHanbHangHangulHaniHanifi_RohingyaHanoHansHantHanunooHatrHatranHebrHebrewHiraHiraganaHluwHmngHmnpHrktHungImperial_AramaicIndsInheritedInscriptional_PahlaviInscriptional_ParthianItalJamoJavaJavaneseJpanJurcKaithiKaliKanaKannadaKatakanaKatakana_Or_HiraganaKawiKayah_LiKharKharoshthiKhitan_Small_ScriptKhmerKhmrKhojKhojkiKhudawadiKitsKndaKoreKpelKthiLanaLaoLaooLatfLatgLatinLatnLepcLepchaLimbLimbuLinaLinbLinear_ALinear_BLisuLomaLyciLycianLydiLydianMahajaniMahjMakaMakasarMalayalamMandMandaicManiManichaeanMarcMarchenMasaram_GondiMayaMedefaidrinMedfMeetei_MayekMendMende_KikakuiMercMeroMeroitic_CursiveMeroitic_HieroglyphsMiaoMlymModiMongMongolianMoonMroMrooMteiMultMultaniMyanmarMymrNabataeanNagmNag_MundariNandNandinagariNarbNbatNewaNew_Tai_LueNkgbNkoNkooNshuNushuNyiakeng_Puachue_HmongOgamOghamOl_ChikiOlckOld_HungarianOld_ItalicOld_North_ArabianOld_PermicOld_PersianOld_SogdianOld_South_ArabianOld_TurkicOld_UyghurOriyaOrkhOryaOsageOsgeOsmaOsmanyaOugrPahawh_HmongPalmPalmyrenePaucPau_Cin_HauPermPhagPhags_PaPhliPhlpPhlvPhnxPhoenicianPlrdPrtiPsalter_PahlaviQaacQaaiRejangRjngRohgRoroRunicRunrSamaritanSamrSaraSarbSaurSaurashtraSgnwSharadaShavianShawShrdSiddSiddhamSignWritingSindSinhSinhalaSogdSogdianSogoSoraSora_SompengSoyoSoyomboSundSundaneseSyloSyloti_NagriSyrcSyreSyriacSyrjSyrnTagalogTagbTagbanwaTai_LeTai_ThamTai_VietTakrTakriTaleTaluTamilTamlTangTangsaTangutTavtTeluTeluguTengTfngTglgThaaThaanaThaiTibetanTibtTifinaghTirhTirhutaTnsaTotoUgarUgariticUnknownVaiVaiiVispVithVithkuqiWanchoWaraWarang_CitiWchoWoleXpeoXsuxYeziYezidiYiYiiiZanabazar_SquareZanbZinhZmthZsyeZsymZxxxZyyyZzzz") }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\xA7\0\xA7\0\x93\0\x9F\0\xA1\0\x9C\0\x02\0\x02\0\xC8\0\x03\0t\0\x03\0u\0u\0>\0>\0\x82\0\x82\0\x86\0\x86\0?\0?\0\x04\0\x04\0\xA8\0\xA8\0@\0\x05\0\x05\0A\0A\0.\0.\x007\x007\0,\0,\0v\0(\0(\0h\0h\0\x9F\0v\0B\0\x06\0\x06\0\xBD\0\xBD\0C\0\0\0\x07\0\x07\0\xC1\0/\0e\0/\0\xC1\0\x08\0\x08\0D\0\t\0\n\0\n\0\xBE\0\xBE\0\xB2\0\xB2\0\t\0\x87\0\x87\0E\0F\0G\0G\0\x88\0\x88\0\xB9\0\xB9\0\x0B\0\x0B\0H\0\x0C\0\x0C\08\08\0\xB3\0\xAF\0\r\0\r\0\x89\0\x89\0\x0E\0\x0E\0\x0F\0\x0F\0\xB3\0\x10\0\x10\0\x11\0\xAC\0\x12\0\x12\0\x11\0\xB6\0+\0I\0J\0+\0\xA2\0\xA2\0\x13\0\x13\0\x14\0\x14\0\x9C\0K\0\xBA\x006\0L\0t\0M\0\x01\0z\0}\0\x1E\0\xAD\0N\0N\0i\0\x94\0x\0O\0\x16\0\x15\0\x16\x006\0\xC6\0O\09\09\0\xBF\0\x17\0\x17\0\x9D\0\x9D\0\x91\0\xBF\0\x15\0w\0\x8A\0x\0j\0\x18\0\x18\0P\0Q\0\x19\0\x19\0R\0R\x000\x000\0S\x001\0S\x001\0\x83\0\x8B\0k\0k\0l\0l\0\xA0\0\xA0\0\xB4\0\xB4\0\x1A\0T\0T\0y\0y\0\xA9\0\xA9\0\xAF\0U\0\xB5\0\xB5\0s\0\x8C\0\x8C\0\x8D\0V\0\x8D\0V\0\\\0\x1A\0\xA3\0\x1B\0\x1B\0r\0\x95\0\x95\0s\0\xA4\0\xA4\0\x1C\0\x1C\0\x8F\0\xC7\0\xC7\0\xBB\0\xBB\0\x8E\0\x8F\0\xAA\0;\0\x84\0W\0W\0\x96\0\x96\0\xBA\0\x1D\0\x1D\0m\0m\0L\0\x1E\0\x8E\0Y\0=\0\xB8\0\x85\0X\0\xC2\0\x1F\0X\0\x1F\0\xAB\0\xAB\x002\x002\0\xC2\0K\0\x90\0\x90\0\xA5\0\xA5\0Y\0Z\0Z\0z\0{\0|\0[\0[\0\\\0}\0{\0\x07\0\x01\0n\0n\0\xB6\0]\0 \0 \0~\0~\0^\0\x85\0o\0o\0p\0\x97\x003\x003\0\x97\0\xA6\0\xA6\0p\0\x91\0!\0!\0\xB7\0\xB7\0\xB8\0\x98\0\x98\0\xB0\0\xB0\0q\0q\0:\0:\0\"\0_\0\"\0`\0a\0*\0-\0-\x004\0j\0\x7F\0\x99\0\x99\x004\0;\0#\0#\0\x9A\0\xC3\0\x9A\0\x7F\0$\0$\0b\0<\0*\0%\0%\0&\0'\0'\0<\0\x9E\0\x9E\0\xC3\0\xC4\x005\x005\0g\0c\0c\0d\0\xC5\0\xC5\0\xBC\0\x92\0\x92\0\xBC\0\x9B\0=\0e\0\xC0\0\xC0\0)\0)\0\xB1\0\xB1\0\x01\0\x80\0\xAE\0\x81\0f\0\0\0g\0") })
                },
            };
        }
        #[clippy::msrv = "1.67"]
        impl icu_provider::DataProvider<icu::properties::provider::ScriptNameToValueV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::ScriptNameToValueV1Marker>, icu_provider::DataError> {
                if req.locale.is_empty() {
                    Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(Self::SINGLETON_PROPNAMES_FROM_SC_V1)), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::ExtraneousLocale.with_req(<icu::properties::provider::ScriptNameToValueV1Marker as icu_provider::KeyedDataMarker>::KEY, req))
                }
            }
        }
    };
}
/// Implement `IterableDataProvider<ScriptNameToValueV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this key.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_propnames_from_sc_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        impl icu_provider::datagen::IterableDataProvider<icu::properties::provider::ScriptNameToValueV1Marker> for $provider {
            fn supported_locales(&self) -> Result<alloc::vec::Vec<icu_provider::DataLocale>, icu_provider::DataError> {
                Ok([icu_provider::DataLocale::default()].into())
            }
        }
    };
}
