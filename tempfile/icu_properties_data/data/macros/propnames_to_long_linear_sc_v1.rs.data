// @generated
/// Implement `DataProvider<ScriptValueToLongNameV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_propnames_to_long_linear_sc_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.67"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_PROPNAMES_TO_LONG_LINEAR_SC_V1: &'static <icu::properties::provider::ScriptValueToLongNameV1Marker as icu_provider::DataMarker>::Yokeable = &icu::properties::provider::names::PropertyEnumToValueNameLinearMapV1 { map: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\xC9\0\0\0\0\0\x06\0\x0F\0\x15\0\x1D\0$\0,\x004\0:\0B\0I\0S\0[\0c\0i\0n\0v\0~\0\x81\0\x87\0\x8D\0\x95\0\x9C\0\xA4\0\xA9\0\xAC\0\xB1\0\xBA\0\xC3\0\xCA\0\xCF\0\xD9\0\xDE\0\xE3\0\xEA\0\xF0\0\xF5\0\xFB\0\x01\x01\x05\x01\x0C\x01\x1F\x01!\x01(\x01/\x014\x01<\x01C\x01J\x01O\x01W\x01^\x01e\x01k\x01s\x01\x87\x01\x8F\x01\x99\x01\xA3\x01\xAF\x01\xBA\x01\xC2\x01\xCD\x01\xD5\x01\xDA\x01\xDE\x01\xE4\x01\xE8\x01\xEC\x01\xF0\x01\xF4\x01\xF8\x01\x0C\x02\x10\x02\x14\x02\x18\x02$\x021\x025\x02=\x02E\x02I\x02M\x02S\x02[\x02b\x02f\x02z\x02}\x02\x87\x02\x91\x02\x99\x02\xA3\x02\xA7\x02\xAB\x02\xAF\x02\xB3\x02\xB7\x02\xBB\x02\xBF\x02\xC2\x02\xC6\x02\xCF\x02\xD3\x02\xDA\x02\xE0\x02\xE4\x02\xEC\x02\xF2\x02\xF8\x02\0\x03\x06\x03\x10\x03\x1B\x03$\x03(\x034\x03D\x03K\x03Q\x03U\x03[\x03e\x03z\x03\x89\x03\x8D\x03\xA3\x03\xAC\x03\xB4\x03\xB8\x03\xBC\x03\xC1\x03\xC5\x03\xC9\x03\xDA\x03\xE3\x03\xEB\x03\xF2\x03\xF9\x03\xFD\x03\x01\x04\x0E\x04\x1E\x04/\x048\x04A\x04J\x04U\x04Y\x04]\x04`\x04e\x04l\x04x\x04}\x04\x83\x04\x87\x04\x9C\x04\xA2\x04\xA9\x04\xBB\x04\xC3\x04\xC7\x04\xCD\x04\xD1\x04\xD8\x04\xE3\x04\xEA\x04\xEF\x04\xF8\x04\xFF\x04\x03\x05\x08\x05\x0C\x05\x10\x05\x14\x05!\x05(\x058\x05=\x05J\x05Q\x05\\\x05k\x05r\x05}\x05\x84\x05\x9A\x05\xA5\x05\xAB\x05\xB5\x05\xC0\x05\xD3\x05\xD9\x05\xE5\x05\xEF\x05\xF5\x05\xF9\x05\x01\x06\x05\x06\x10\x06CommonInheritedArabicArmenianBengaliBopomofoCherokeeCopticCyrillicDeseretDevanagariEthiopicGeorgianGothicGreekGujaratiGurmukhiHanHangulHebrewHiraganaKannadaKatakanaKhmerLaoLatinMalayalamMongolianMyanmarOghamOld_ItalicOriyaRunicSinhalaSyriacTamilTeluguThaanaThaiTibetanCanadian_AboriginalYiTagalogHanunooBuhidTagbanwaBrailleCypriotLimbuLinear_BOsmanyaShavianTai_LeUgariticKatakana_Or_HiraganaBugineseGlagoliticKharoshthiSyloti_NagriNew_Tai_LueTifinaghOld_PersianBalineseBatakBlisBrahmiChamCirtCyrsEgydEgyhEgyptian_HieroglyphsGeokHansHantPahawh_HmongOld_HungarianIndsJavaneseKayah_LiLatfLatgLepchaLinear_AMandaicMayaMeroitic_HieroglyphsNkoOld_TurkicOld_PermicPhags_PaPhoenicianMiaoRoroSaraSyreSyrjSyrnTengVaiVispCuneiformZxxxUnknownCarianJpanTai_ThamLycianLydianOl_ChikiRejangSaurashtraSignWritingSundaneseMoonMeetei_MayekImperial_AramaicAvestanChakmaKoreKaithiManichaeanInscriptional_PahlaviPsalter_PahlaviPhlvInscriptional_ParthianSamaritanTai_VietZmthZsymBamumLisuNkgbOld_South_ArabianBassa_VahDuployanElbasanGranthaKpelLomaMende_KikakuiMeroitic_CursiveOld_North_ArabianNabataeanPalmyreneKhudawadiWarang_CitiAfakJurcMroNushuSharadaSora_SompengTakriTangutWoleAnatolian_HieroglyphsKhojkiTirhutaCaucasian_AlbanianMahajaniAhomHatranModiMultaniPau_Cin_HauSiddhamAdlamBhaiksukiMarchenNewaOsageHanbJamoZsyeMasaram_GondiSoyomboZanabazar_SquareDograGunjala_GondiMakasarMedefaidrinHanifi_RohingyaSogdianOld_SogdianElymaicNyiakeng_Puachue_HmongNandinagariWanchoChorasmianDives_AkuruKhitan_Small_ScriptYezidiCypro_MinoanOld_UyghurTangsaTotoVithkuqiKawiNag_MundariAran") } };
        }
        #[clippy::msrv = "1.67"]
        impl icu_provider::DataProvider<icu::properties::provider::ScriptValueToLongNameV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::ScriptValueToLongNameV1Marker>, icu_provider::DataError> {
                if req.locale.is_empty() {
                    Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(Self::SINGLETON_PROPNAMES_TO_LONG_LINEAR_SC_V1)), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::ExtraneousLocale.with_req(<icu::properties::provider::ScriptValueToLongNameV1Marker as icu_provider::KeyedDataMarker>::KEY, req))
                }
            }
        }
    };
}
/// Implement `IterableDataProvider<ScriptValueToLongNameV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this key.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_propnames_to_long_linear_sc_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        impl icu_provider::datagen::IterableDataProvider<icu::properties::provider::ScriptValueToLongNameV1Marker> for $provider {
            fn supported_locales(&self) -> Result<alloc::vec::Vec<icu_provider::DataLocale>, icu_provider::DataError> {
                Ok([icu_provider::DataLocale::default()].into())
            }
        }
    };
}
