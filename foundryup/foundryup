#!/usr/bin/env bash
set -eo pipefail

# NOTE: if you make modifications to this script, please increment the version number.
# Major / minor: incremented for each stable release of Foundry.
# Patch: incremented for each change between stable releases.
FOUNDRYUP_INSTALLER_VERSION="0.3.2"

BASE_DIR=${XDG_DATA_HOME:-"${HOME}/.local/share"}
FOUNDRY_DIR=${FOUNDRY_DIR:-"${BASE_DIR}/foundry"}
FOUNDRY_BIN_DIR=${XDG_BIN_HOME:-"${FOUNDRY_DIR}/bin"}
FOUNDRY_MAN_DIR="${BASE_DIR}/man/man1"
FOUNDRY_VERSIONS_DIR="${FOUNDRY_DIR}/versions"

FOUNDRYUP_BIN_URL="https://raw.githubusercontent.com/foundry-rs/foundry/master/foundryup/foundryup"
FOUNDRYUP_BIN_PATH="${FOUNDRY_BIN_DIR}/foundryup"

FOUNDRYUP_JOBS=''

BINS=(forge cast anvil chisel)

export RUSTFLAGS=${RUSTFLAGS:-'-C target-cpu=native'}

main() {
  need_cmd git
  need_cmd curl

  while [[ -n $1 ]]; do
    case $1 in
      --)               shift; break;;

      -v|--version)     shift; version;;
      -U|--update)      shift; update;;
      -r|--repo)        shift; FOUNDRY_REPO=$1;;
      -b|--branch)      shift; FOUNDRY_BRANCH=$1;;
      -i|--install)     shift; FOUNDRY_VERSION=$1;;
      -l|--list)        shift; list;;
      -u|--use)         shift; FOUNDRY_VERSION=$1; use;;
      -p|--path)        shift; FOUNDRY_LOCAL_REPO=$1;;
      -P|--pr)          shift; FOUNDRY_PR=$1;;
      -C|--commit)      shift; FOUNDRY_COMMIT=$1;;
      -j|--jobs)        shift; FOUNDRYUP_JOBS=$1;;
      --arch)           shift; FOUNDRY_ARCH=$1;;
      --platform)       shift; FOUNDRY_PLATFORM=$1;;
      -h|--help)
      usage
      exit 0
      ;;
    *)
      warn "unknown option: $1"
      usage
      exit 1
    esac; shift
  done

  CARGO_BUILD_ARGS=('--release')

  if [[ -n ${FOUNDRYUP_JOBS} ]]; then
    CARGO_BUILD_ARGS+=('--jobs' "${FOUNDRYUP_JOBS}")
  fi

  # Print the banner after successfully parsing args
  banner

  if [[ -n ${FOUNDRY_PR} ]]; then
    if [[ -z ${FOUNDRY_BRANCH} ]]; then
      FOUNDRY_BRANCH="refs/pull/${FOUNDRY_PR}/head"
    else
      err "can't use --pr and --branch at the same time"
    fi
  fi

  check_bins_in_use

  # Installs foundry from a local repository if --path parameter is provided
  if [[ -n ${FOUNDRY_LOCAL_REPO} ]]; then
    need_cmd cargo

    # Ignore branches/versions as we do not want to modify local git state
    if [[ -n ${FOUNDRY_REPO} ]] || [[ -n ${FOUNDRY_BRANCH} ]] || [[ -n ${FOUNDRY_VERSION} ]]; then
      warn '--branch, --install, --use, and --repo arguments are ignored during local install'
    fi

    # Enter local repo and build
    say "installing from ${FOUNDRY_LOCAL_REPO}"
    cd "${FOUNDRY_LOCAL_REPO}"
    ensure cargo build --bins "${CARGO_BUILD_ARGS[@]}"

    for bin in "${BINS[@]}"; do
      # Remove prior installations if they exist
      rm -f "${FOUNDRY_BIN_DIR}/${bin}"
      # Symlink from local repo binaries to bin dir
      ensure ln -s "${PWD}/target/release/${bin}" "${FOUNDRY_BIN_DIR}/${bin}"
    done

    say 'done'
    exit 0
  fi

  FOUNDRY_REPO=${FOUNDRY_REPO:-'foundry-rs/foundry'}

  # Install by downloading binaries
  if [[ ${FOUNDRY_REPO} == 'foundry-rs/foundry' && -z ${FOUNDRY_BRANCH} && -z ${FOUNDRY_COMMIT} ]]; then
    FOUNDRY_VERSION=${FOUNDRY_VERSION:-'stable'}

    # Normalize versions (handle channels, versions without v prefix
    if [[ ${FOUNDRY_VERSION} =~ ^nightly ]]; then
      FOUNDRY_VERSION='nightly'
    elif [[ ${FOUNDRY_VERSION} == [0-9]* ]]; then
      # Add v prefix
      FOUNDRY_VERSION="v${FOUNDRY_VERSION}"
    fi

    say "installing foundry version ${FOUNDRY_VERSION}"

    uname_s=$(uname -s)
    PLATFORM=$(tolower "${FOUNDRY_PLATFORM:-${uname_s}}")
    EXT='tar.gz'
    case ${PLATFORM} in
    linux) ;;
    darwin | mac*)
      PLATFORM='darwin'
      ;;
    mingw* | win*)
      EXT='zip'
      PLATFORM='win32'
      ;;
    *)
      err "unsupported platform: ${PLATFORM}"
      ;;
    esac

    uname_m=$(uname -m)
    ARCHITECTURE=$(tolower "${FOUNDRY_ARCH:-${uname_m}}")
    if [[ "${ARCHITECTURE}" == 'x86_64' ]]; then
      # Redirect stderr to /dev/null to avoid printing errors if non Rosetta.
      if [[ "$(sysctl -n sysctl.proc_translated 2>/dev/null)" == '1' ]]; then
        ARCHITECTURE='arm64' # Rosetta.
      else
        ARCHITECTURE='amd64' # Intel.
      fi
    elif [[ "${ARCHITECTURE}" == 'arm64' ]] || [[ "${ARCHITECTURE}" == 'aarch64' ]]; then
      ARCHITECTURE='arm64' # Arm.
    else
      ARCHITECTURE='amd64' # Amd.
    fi

    # Compute the URL of the release tarball in the Foundry repository.
    RELEASE_URL="https://github.com/${FOUNDRY_REPO}/releases/download/${FOUNDRY_VERSION}/"
    BIN_ARCHIVE_URL="${RELEASE_URL}foundry_${FOUNDRY_VERSION}_${PLATFORM}_${ARCHITECTURE}.${EXT}"
    MAN_TARBALL_URL="${RELEASE_URL}foundry_man_${FOUNDRY_VERSION}.tar.gz"

    ensure mkdir -p "${FOUNDRY_VERSIONS_DIR}"
    # Download and extract the binaries archive
    say "downloading forge, cast, anvil, and chisel for ${FOUNDRY_VERSION} version"
    if [[ "${PLATFORM}" == 'win32' ]]; then
      tmp="$(mktemp -d 2>/dev/null || echo '.')/foundry.zip"
      ensure download "${BIN_ARCHIVE_URL}" "${tmp}"
      ensure unzip "${tmp}" -d "${FOUNDRY_VERSIONS_DIR}/${FOUNDRY_VERSION}"
      rm -f "${tmp}"
    else
      tmp="$(mktemp -d 2>/dev/null || echo '.')/foundry.tar.gz"
      ensure download "${BIN_ARCHIVE_URL}" "${tmp}"
      # Make sure it's a valid tar archive.
      ensure tar -tf "${tmp}" 1>/dev/null
      ensure mkdir -p "${FOUNDRY_VERSIONS_DIR}/${FOUNDRY_VERSION}"
      ensure tar -C "${FOUNDRY_VERSIONS_DIR}/${FOUNDRY_VERSION}" -xvf "${tmp}"
      rm -f "${tmp}"
    fi

    # Optionally download the manuals
    if check_cmd tar; then
      say 'downloading manpages'
      mkdir -p "${FOUNDRY_MAN_DIR}"
      download "${MAN_TARBALL_URL}" | tar -xzC "${FOUNDRY_MAN_DIR}"
    else
      say "skipping manpage download: missing 'tar'"
    fi

    for bin in "${BINS[@]}"; do
      bin_path="${FOUNDRY_BIN_DIR}/${bin}"
      cp "${FOUNDRY_VERSIONS_DIR}/${FOUNDRY_VERSION}/${bin}" "${bin_path}"

      # Print installed msg
      say "installed - $(ensure "${bin_path}" -V)"

      # Check if the default path of the binary is not in FOUNDRY_BIN_DIR
      which_path=$(command -v "${bin}" || true)
      if [[ -n ${which_path} ]] && [[ "${which_path}" != "${bin_path}" ]]; then
        warn ""
        cat 1>&2 <<EOF
There are multiple binaries with the name '${bin}' present in your 'PATH'.
This may be the result of installing '${bin}' using another method,
like Cargo or other package managers.
You may need to run 'rm ${which_path}' or move '${FOUNDRY_BIN_DIR}'
in your 'PATH' to allow the newly installed version to take precedence!

EOF
      fi
    done

    say 'done!'

  # Install by cloning the repo with the provided branch/tag
  else
    need_cmd cargo
    FOUNDRY_BRANCH=${FOUNDRY_BRANCH:-'master'}
    REPO_PATH="${FOUNDRY_DIR}/${FOUNDRY_REPO}"

    # If repo path does not exist, grab the author from the repo, make a directory in .foundry, cd to it and clone.
    if [[ ! -d ${REPO_PATH} ]]; then
      AUTHOR=$(echo "${FOUNDRY_REPO}" | cut -d'/' -f1 -)
      ensure mkdir -p "${FOUNDRY_DIR}/${AUTHOR}"
      cd "${FOUNDRY_DIR}/${AUTHOR}"
      ensure git clone "https://github.com/${FOUNDRY_REPO}"
    fi

    # Force checkout, discarding any local changes
    cd "${REPO_PATH}"
    ensure git fetch origin "${FOUNDRY_BRANCH}:remotes/origin/${FOUNDRY_BRANCH}"
    ensure git checkout "origin/${FOUNDRY_BRANCH}"

    # If set, checkout specific commit from branch
    if [[ -n ${FOUNDRY_COMMIT} ]]; then
      say "installing at commit ${FOUNDRY_COMMIT}"
      ensure git checkout "${FOUNDRY_COMMIT}"
    fi

    # Build the repo and install the binaries locally to the .foundry bin directory.
    ensure cargo build --bins "${CARGO_BUILD_ARGS[@]}"
    for bin in "${BINS[@]}"; do
      for try_path in target/release/${bin} target/release/${bin}.exe; do
        if [[ -f ${try_path} ]]; then
          [[ -e "${FOUNDRY_BIN_DIR}/${bin}" ]] && warn "overwriting existing ${bin} in ${FOUNDRY_BIN_DIR}"
          mv -f "${try_path}" "${FOUNDRY_BIN_DIR}"
        fi
      done
    done

    # If help2man is installed, use it to add Foundry man pages.
    if check_cmd help2man; then
      for bin in "${BINS[@]}"; do
        help2man -N "${FOUNDRY_BIN_DIR}/${bin}" >"${FOUNDRY_MAN_DIR}/${bin}.1"
      done
    fi

    say 'done'
  fi
}

usage() {
  cat 1>&2 <<EOF
The installer for Foundry.

Update or revert to a specific Foundry version with ease.

By default, the latest stable version is installed from built binaries.

USAGE:
    foundryup <OPTIONS>

OPTIONS:
    -h, --help      Print help information
    -v, --version   Print the version of foundryup
    -U, --update    Update foundryup to the latest version
    -i, --install   Install a specific version from built binaries
    -l, --list      List versions installed from built binaries
    -u, --use       Use a specific installed version from built binaries
    -b, --branch    Build and install a specific branch
    -P, --pr        Build and install a specific Pull Request
    -C, --commit    Build and install a specific commit
    -r, --repo      Build and install from a remote GitHub repo (uses default branch if no other options are set)
    -p, --path      Build and install a local repository
    -j, --jobs      Number of CPUs to use for building Foundry (default: all CPUs)
    --arch          Install a specific architecture (supports amd64 and arm64)
    --platform      Install a specific platform (supports win32, linux, and darwin)
EOF
}

version() {
  say "${FOUNDRYUP_INSTALLER_VERSION}"
  exit 0
}

update() {
  say 'updating foundryup...'

  # Download to a temporary file first
  tmp_file=$(mktemp)
  ensure download "${FOUNDRYUP_BIN_URL}" "${tmp_file}"

  # Replace the current foundryup with the downloaded file
  ensure mv "${tmp_file}" "${FOUNDRYUP_BIN_PATH}"
  ensure chmod +x "${FOUNDRYUP_BIN_PATH}"

  say 'successfully updated foundryup'
  exit 0
}

list() {
  if [[ -d ${FOUNDRY_VERSIONS_DIR} ]]; then
    for VERSION in "${FOUNDRY_VERSIONS_DIR}"/*; do
      say "${VERSION##*/}"
      for bin in "${BINS[@]}"; do
        bin_path="${VERSION}/${bin}"
        say "- $(ensure "${bin_path}" -V)"
      done
      printf "\n"
    done
  else
    for bin in "${BINS[@]}"; do
      bin_path="${FOUNDRY_BIN_DIR}/${bin}"
      say "- $(ensure "${bin_path}" -V)"
    done
  fi
  exit 0
}

use() {
  [[ -z ${FOUNDRY_VERSION} ]] && err 'no version provided'
  FOUNDRY_VERSION_DIR="${FOUNDRY_VERSIONS_DIR}/${FOUNDRY_VERSION}"
  if [[ -d ${FOUNDRY_VERSION_DIR} ]]; then

    check_bins_in_use

    for bin in "${BINS[@]}"; do
      bin_path="${FOUNDRY_BIN_DIR}/${bin}"
      cp "${FOUNDRY_VERSION_DIR}/${bin}" "${bin_path}"
      # Print usage msg
      say "use - $(ensure "${bin_path}" -V)"
    done
    exit 0
  else
    err "version ${FOUNDRY_VERSION} not installed"
  fi
}

say() {
  printf "foundryup: %s\n" "$1"
}

warn() {
  say "warning: $1" >&2
}

err() {
  say "$1" >&2
  exit 1
}

tolower() {
  echo "$1" | awk '{print tolower($0)}'
}

need_cmd() {
  if ! check_cmd "$1"; then
    err "need '$1' (command not found)"
  fi
}

check_cmd() {
  command -v "$1" &>/dev/null
}

check_bins_in_use() {
  if check_cmd pgrep; then
    for bin in "${BINS[@]}"; do
      if pgrep -x "${bin}" >/dev/null; then
        err "Error: '${bin}' is currently running. Please stop the process and try again."
      fi
    done
  else
    warn "Make sure no foundry process is running during the install process!"
  fi
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing command.
ensure() {
  if ! "$@"; then err "command failed: $*"; fi
}

# Downloads $1 into $2 or stdout
download() {
  if [[ -n "$2" ]]; then
    # output into $2
    if check_cmd curl; then
      curl -#o "$2" -L "$1"
    else
      wget --show-progress -qO "$2" "$1"
    fi
  else
    # output to stdout
    if check_cmd curl; then
      curl -#L "$1"
    else
      wget --show-progress -qO- "$1"
    fi
  fi
}

# Banner Function for Foundry
banner() {
  printf '

.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx

 ╔═╗ ╔═╗ ╦ ╦ ╔╗╔ ╔╦╗ ╦═╗ ╦ ╦         Portable and modular toolkit
 ╠╣  ║ ║ ║ ║ ║║║  ║║ ╠╦╝ ╚╦╝    for Ethereum Application Development
 ╚   ╚═╝ ╚═╝ ╝╚╝ ═╩╝ ╩╚═  ╩                 written in Rust.

.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx

Repo       : https://github.com/foundry-rs/foundry
Book       : https://book.getfoundry.sh/
Chat       : https://t.me/foundry_rs/
Support    : https://t.me/foundry_support/
Contribute : https://github.com/foundry-rs/foundry/blob/master/CONTRIBUTING.md

.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx.xOx

'
}

main "$@"
