#!/usr/bin/env bash
set -e

echo Installing foundryup...

FOUNDRY_DIR=${FOUNDRY_DIR-"$HOME/.foundry"}
FOUNDRY_BIN_DIR="$FOUNDRY_DIR/bin"

FOUNDRYUP='#!/usr/bin/env bash
set -e

FOUNDRY_DIR=${FOUNDRY_DIR-"$HOME/.foundry"}
FOUNDRY_BIN_DIR="$FOUNDRY_DIR/bin"

while [[ $1 ]]; do
  case $1 in
    --)               shift; break;;

    -r|--repo)        shift; FOUNDRYUP_REPO=$1;;
    -b|--branch)      shift; FOUNDRYUP_BRANCH=$1;;
    -v|--version)     shift; FOUNDRYUP_VERSION=$1;;

    *) printf "foundryup: internal error: %q\\n" "$1"; exit 1
  esac; shift
done

FOUNDRYUP_REPO=${FOUNDRYUP_REPO-gakonst/foundry}

if [[ "$FOUNDRYUP_REPO" == "gakonst/foundry" && -z "$FOUNDRYUP_BRANCH" ]]; then 
  FOUNDRYUP_VERSION=${FOUNDRYUP_VERSION-nightly}

  PLATFORM="$(uname -s)"
  case $PLATFORM in
    Linux)
      PLATFORM="linux"
      ;;
    Darwin)
      PLATFORM="darwin"
      ;;
    *)
      echo "foundryup: unsupported platform: $PLATFORM"
      exit 1  
      ;;
  esac

  ARCHITECTURE="$(uname -m)"
  if [ "${ARCHITECTURE}" = "x86_64" ]; then
    # Redirect stderr to /dev/null to avoid printing errors if non Rosetta.
    if [ "$(sysctl -n sysctl.proc_translated 2>/dev/null)" = "1" ]; then
      ARCHITECTURE="arm64" # Rosetta.
    else
      ARCHITECTURE="amd64" # Intel.
    fi 
  elif [ "${ARCHITECTURE}" = "arm64" ]; then
    ARCHITECTURE="arm64" # Arm.
  else
    ARCHITECTURE="amd64" # Amd.
  fi
  
  # Warn MacOS users that they may need to manually install libusb via Homebrew:
  if [[ "$PLATFORM" == "darwin" && ! -f /usr/local/opt/libusb/lib/libusb-1.0.0.dylib ]]; then
    echo "warning: libusb not found. You may need to install it manually on MacOS via Homebrew (`brew install libusb`)."
  fi
  
  # Compute the URL of the release tarball in the Foundry repository.
  TARBALL_URL="https://github.com/${FOUNDRYUP_REPO}/releases/download/${FOUNDRYUP_VERSION}/foundry_${FOUNDRYUP_VERSION}_${PLATFORM}_${ARCHITECTURE}.tar.gz"

  # Download the release tarball and unpack it into the .foundry bin directory.
  curl -L $TARBALL_URL | tar -xvzC $FOUNDRY_BIN_DIR
else 
  FOUNDRYUP_BRANCH=${FOUNDRYUP_BRANCH-master}
  
  if ! command -v cargo &> /dev/null ; then
    # Error if cargo is not already installed.
    echo "foundryup: cargo is not installed. Please install it first."
    exit 1
  fi

  REPO_PATH="${FOUNDRY_DIR}/${FOUNDRYUP_REPO}"
  
  if [ -d $REPO_PATH ]; then
    # If the repo path exists move to it git pull and checkout the branch.
    cd $REPO_PATH
    git pull
    git checkout ${FOUNDRYUP_BRANCH}
    git pull
  else
    # Repo path did not exist, grab the author from the repo, make a directory in .foundry, cd to it and clone.
    IFS="/" read -ra AUTHOR <<< "$FOUNDRYUP_REPO"
    mkdir -p "$FOUNDRY_DIR/$AUTHOR"
    cd "$FOUNDRY_DIR/$AUTHOR"
    git clone https://github.com/${FOUNDRYUP_REPO}
    cd $REPO_PATH
    git checkout ${FOUNDRYUP_BRANCH}
  fi
  
  # Build the repo and install it locally to the .foundry bin directory.
  # --root appends /bin to the directory it is given, so we pass FOUNDRY_DIR.
  cargo install --path ./cli --bins --locked --force --root $FOUNDRY_DIR
fi'

BINARY="$FOUNDRY_BIN_DIR/foundryup"

# Create the .foundry bin directory and foundryup binary if it doesn't exist.
mkdir -p $FOUNDRY_BIN_DIR
echo "$FOUNDRYUP" > $BINARY
chmod +x $BINARY

# Store the correct profile file (i.e. .profile for bash or .zshrc for ZSH).
case $SHELL in
*/zsh)
    PROFILE=$HOME/.zshrc
    PREF_SHELL=zsh
    ;;
*/bash)
    PROFILE=$HOME/.profile
    PREF_SHELL=bash
    ;;
*/fish)
    PROFILE=$HOME/.config/fish/config.fish
    PREF_SHELL=fish
    ;;
*)
    echo "foundryup: could not detect shell, manually add ${FOUNDRY_BIN_DIR} to your PATH."
    exit 1
esac

# Only add foundryup if it isn't already in PATH.
if [[ ":$PATH:" != *":${FOUNDRY_BIN_DIR}:"* ]]; then
    # Add the foundryup directory to the path and ensure the old PATH variables remain.
    echo >> $PROFILE && echo "export PATH=\"\$PATH:$FOUNDRY_BIN_DIR\"" >> $PROFILE
fi

echo && echo "Detected your preferred shell is ${PREF_SHELL} and added foundryup to PATH. Run 'source ${PROFILE}' or start a new terminal session to use foundryup."
echo "Then, simply run 'foundryup' to install Foundry."
